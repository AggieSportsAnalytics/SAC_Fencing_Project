/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import { util } from '@tensorflow/tfjs-core';
import { fill } from '../kernels/Fill';
import { SparseSegmentIdCountProgram, SparseSegmentMeanProgram, SparseSegmentSumProgram } from '../sparse_segment_reduce_webgpu';
export function sparseSegmentReduce(input, indices, segmentIds, isSum = false, backend) {
    const inputSize = util.sizeFromShape(input.shape);
    const segmentSize = inputSize / input.shape[0];
    const dtype = input.dtype;
    // Note that the current implementation assumes that segmentIds values are
    // sorted.
    const numIndices = util.sizeFromShape(indices.shape);
    const $segmentIds = backend.readSync(segmentIds.dataId);
    const lastSegmentIdPlusOne = numIndices > 0 ? $segmentIds[numIndices - 1] + 1 : 0;
    const outputRows = lastSegmentIdPlusOne;
    let program;
    const outputShape = input.shape.slice();
    outputShape[0] = outputRows;
    const sparseSize = numIndices * segmentSize;
    const sparseSegmentSum = fill({ backend, attrs: { shape: outputShape, value: 0, dtype } });
    program = new SparseSegmentSumProgram(outputShape, sparseSize, dtype);
    let uniformData = [
        { type: 'int32', data: [segmentSize] }, { type: 'int32', data: [sparseSize] }
    ];
    const $sparseSegmentSum = backend.runWebGPUProgram(program, [input, indices, segmentIds], dtype, uniformData, sparseSegmentSum);
    if (isSum) {
        return $sparseSegmentSum;
    }
    const sparseSegmentIdCount = fill({ backend, attrs: { shape: [outputRows], value: 0, dtype: 'int32' } });
    program = new SparseSegmentIdCountProgram(outputRows, segmentIds.shape);
    const $sparseSegmentIdCount = backend.runWebGPUProgram(program, [segmentIds], 'int32', null, sparseSegmentIdCount);
    const sparseSegmentMean = fill({ backend, attrs: { shape: outputShape, value: 0, dtype } });
    program = new SparseSegmentMeanProgram(outputShape, dtype);
    uniformData = [{ type: 'int32', data: [segmentSize] }];
    const $sparseSegmentMean = backend.runWebGPUProgram(program, [$sparseSegmentSum, $sparseSegmentIdCount], dtype, uniformData, sparseSegmentMean);
    backend.disposeData($sparseSegmentSum.dataId);
    backend.disposeData($sparseSegmentIdCount.dataId);
    return $sparseSegmentMean;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhcnNlX3NlZ21lbnRfcmVkdWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1iYWNrZW5kLXdlYmdwdS9zcmMva2VybmVsX3V0aWxzL3NwYXJzZV9zZWdtZW50X3JlZHVjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQXlCLElBQUksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBR25FLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNyQyxPQUFPLEVBQUMsMkJBQTJCLEVBQUUsd0JBQXdCLEVBQUUsdUJBQXVCLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUcvSCxNQUFNLFVBQVUsbUJBQW1CLENBQy9CLEtBQWlCLEVBQUUsT0FBbUIsRUFBRSxVQUFzQixFQUM5RCxLQUFLLEdBQUcsS0FBSyxFQUFFLE9BQXNCO0lBQ3ZDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xELE1BQU0sV0FBVyxHQUFHLFNBQVMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFFMUIsMEVBQTBFO0lBQzFFLFVBQVU7SUFDVixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQWUsQ0FBQztJQUN0RSxNQUFNLG9CQUFvQixHQUN0QixVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sVUFBVSxHQUFHLG9CQUFvQixDQUFDO0lBRXhDLElBQUksT0FBc0IsQ0FBQztJQUMzQixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3hDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7SUFFNUIsTUFBTSxVQUFVLEdBQUcsVUFBVSxHQUFHLFdBQVcsQ0FBQztJQUM1QyxNQUFNLGdCQUFnQixHQUNsQixJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBQyxFQUFDLENBQUMsQ0FBQztJQUNsRSxPQUFPLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RFLElBQUksV0FBVyxHQUFHO1FBQ2hCLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBQztLQUMxRSxDQUFDO0lBQ0YsTUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQzlDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFDekQsZ0JBQWdCLENBQUMsQ0FBQztJQUV0QixJQUFJLEtBQUssRUFBRTtRQUNULE9BQU8saUJBQWlCLENBQUM7S0FDMUI7SUFFRCxNQUFNLG9CQUFvQixHQUN0QixJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUMsS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQzVFLE9BQU8sR0FBRyxJQUFJLDJCQUEyQixDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEUsTUFBTSxxQkFBcUIsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQ2xELE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztJQUVoRSxNQUFNLGlCQUFpQixHQUNuQixJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBQyxFQUFDLENBQUMsQ0FBQztJQUNsRSxPQUFPLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDM0QsV0FBVyxHQUFHLENBQUMsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNyRCxNQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FDL0MsT0FBTyxFQUFFLENBQUMsaUJBQWlCLEVBQUUscUJBQXFCLENBQUMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUN2RSxpQkFBaUIsQ0FBQyxDQUFDO0lBRXZCLE9BQU8sQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRCxPQUFPLGtCQUFrQixDQUFDO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7VGVuc29ySW5mbywgVHlwZWRBcnJheSwgdXRpbH0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuaW1wb3J0IHtXZWJHUFVCYWNrZW5kfSBmcm9tICcuLi9iYWNrZW5kX3dlYmdwdSc7XG5pbXBvcnQge2ZpbGx9IGZyb20gJy4uL2tlcm5lbHMvRmlsbCc7XG5pbXBvcnQge1NwYXJzZVNlZ21lbnRJZENvdW50UHJvZ3JhbSwgU3BhcnNlU2VnbWVudE1lYW5Qcm9ncmFtLCBTcGFyc2VTZWdtZW50U3VtUHJvZ3JhbX0gZnJvbSAnLi4vc3BhcnNlX3NlZ21lbnRfcmVkdWNlX3dlYmdwdSc7XG5pbXBvcnQge1dlYkdQVVByb2dyYW19IGZyb20gJy4uL3dlYmdwdV9wcm9ncmFtJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNwYXJzZVNlZ21lbnRSZWR1Y2UoXG4gICAgaW5wdXQ6IFRlbnNvckluZm8sIGluZGljZXM6IFRlbnNvckluZm8sIHNlZ21lbnRJZHM6IFRlbnNvckluZm8sXG4gICAgaXNTdW0gPSBmYWxzZSwgYmFja2VuZDogV2ViR1BVQmFja2VuZCk6IFRlbnNvckluZm8ge1xuICBjb25zdCBpbnB1dFNpemUgPSB1dGlsLnNpemVGcm9tU2hhcGUoaW5wdXQuc2hhcGUpO1xuICBjb25zdCBzZWdtZW50U2l6ZSA9IGlucHV0U2l6ZSAvIGlucHV0LnNoYXBlWzBdO1xuICBjb25zdCBkdHlwZSA9IGlucHV0LmR0eXBlO1xuXG4gIC8vIE5vdGUgdGhhdCB0aGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBhc3N1bWVzIHRoYXQgc2VnbWVudElkcyB2YWx1ZXMgYXJlXG4gIC8vIHNvcnRlZC5cbiAgY29uc3QgbnVtSW5kaWNlcyA9IHV0aWwuc2l6ZUZyb21TaGFwZShpbmRpY2VzLnNoYXBlKTtcbiAgY29uc3QgJHNlZ21lbnRJZHMgPSBiYWNrZW5kLnJlYWRTeW5jKHNlZ21lbnRJZHMuZGF0YUlkKSBhcyBUeXBlZEFycmF5O1xuICBjb25zdCBsYXN0U2VnbWVudElkUGx1c09uZSA9XG4gICAgICBudW1JbmRpY2VzID4gMCA/ICRzZWdtZW50SWRzW251bUluZGljZXMgLSAxXSArIDEgOiAwO1xuICBjb25zdCBvdXRwdXRSb3dzID0gbGFzdFNlZ21lbnRJZFBsdXNPbmU7XG5cbiAgbGV0IHByb2dyYW06IFdlYkdQVVByb2dyYW07XG4gIGNvbnN0IG91dHB1dFNoYXBlID0gaW5wdXQuc2hhcGUuc2xpY2UoKTtcbiAgb3V0cHV0U2hhcGVbMF0gPSBvdXRwdXRSb3dzO1xuXG4gIGNvbnN0IHNwYXJzZVNpemUgPSBudW1JbmRpY2VzICogc2VnbWVudFNpemU7XG4gIGNvbnN0IHNwYXJzZVNlZ21lbnRTdW0gPVxuICAgICAgZmlsbCh7YmFja2VuZCwgYXR0cnM6IHtzaGFwZTogb3V0cHV0U2hhcGUsIHZhbHVlOiAwLCBkdHlwZX19KTtcbiAgcHJvZ3JhbSA9IG5ldyBTcGFyc2VTZWdtZW50U3VtUHJvZ3JhbShvdXRwdXRTaGFwZSwgc3BhcnNlU2l6ZSwgZHR5cGUpO1xuICBsZXQgdW5pZm9ybURhdGEgPSBbXG4gICAge3R5cGU6ICdpbnQzMicsIGRhdGE6IFtzZWdtZW50U2l6ZV19LCB7dHlwZTogJ2ludDMyJywgZGF0YTogW3NwYXJzZVNpemVdfVxuICBdO1xuICBjb25zdCAkc3BhcnNlU2VnbWVudFN1bSA9IGJhY2tlbmQucnVuV2ViR1BVUHJvZ3JhbShcbiAgICAgIHByb2dyYW0sIFtpbnB1dCwgaW5kaWNlcywgc2VnbWVudElkc10sIGR0eXBlLCB1bmlmb3JtRGF0YSxcbiAgICAgIHNwYXJzZVNlZ21lbnRTdW0pO1xuXG4gIGlmIChpc1N1bSkge1xuICAgIHJldHVybiAkc3BhcnNlU2VnbWVudFN1bTtcbiAgfVxuXG4gIGNvbnN0IHNwYXJzZVNlZ21lbnRJZENvdW50ID1cbiAgICAgIGZpbGwoe2JhY2tlbmQsIGF0dHJzOiB7c2hhcGU6IFtvdXRwdXRSb3dzXSwgdmFsdWU6IDAsIGR0eXBlOiAnaW50MzInfX0pO1xuICBwcm9ncmFtID0gbmV3IFNwYXJzZVNlZ21lbnRJZENvdW50UHJvZ3JhbShvdXRwdXRSb3dzLCBzZWdtZW50SWRzLnNoYXBlKTtcbiAgY29uc3QgJHNwYXJzZVNlZ21lbnRJZENvdW50ID0gYmFja2VuZC5ydW5XZWJHUFVQcm9ncmFtKFxuICAgICAgcHJvZ3JhbSwgW3NlZ21lbnRJZHNdLCAnaW50MzInLCBudWxsLCBzcGFyc2VTZWdtZW50SWRDb3VudCk7XG5cbiAgY29uc3Qgc3BhcnNlU2VnbWVudE1lYW4gPVxuICAgICAgZmlsbCh7YmFja2VuZCwgYXR0cnM6IHtzaGFwZTogb3V0cHV0U2hhcGUsIHZhbHVlOiAwLCBkdHlwZX19KTtcbiAgcHJvZ3JhbSA9IG5ldyBTcGFyc2VTZWdtZW50TWVhblByb2dyYW0ob3V0cHV0U2hhcGUsIGR0eXBlKTtcbiAgdW5pZm9ybURhdGEgPSBbe3R5cGU6ICdpbnQzMicsIGRhdGE6IFtzZWdtZW50U2l6ZV19XTtcbiAgY29uc3QgJHNwYXJzZVNlZ21lbnRNZWFuID0gYmFja2VuZC5ydW5XZWJHUFVQcm9ncmFtKFxuICAgICAgcHJvZ3JhbSwgWyRzcGFyc2VTZWdtZW50U3VtLCAkc3BhcnNlU2VnbWVudElkQ291bnRdLCBkdHlwZSwgdW5pZm9ybURhdGEsXG4gICAgICBzcGFyc2VTZWdtZW50TWVhbik7XG5cbiAgYmFja2VuZC5kaXNwb3NlRGF0YSgkc3BhcnNlU2VnbWVudFN1bS5kYXRhSWQpO1xuICBiYWNrZW5kLmRpc3Bvc2VEYXRhKCRzcGFyc2VTZWdtZW50SWRDb3VudC5kYXRhSWQpO1xuICByZXR1cm4gJHNwYXJzZVNlZ21lbnRNZWFuO1xufVxuIl19