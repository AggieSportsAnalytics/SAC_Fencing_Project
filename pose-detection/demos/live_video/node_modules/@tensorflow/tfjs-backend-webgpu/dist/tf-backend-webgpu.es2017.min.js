/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@tensorflow/tfjs-core")):"function"==typeof define&&define.amd?define(["exports","@tensorflow/tfjs-core"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).tf=e.tf||{},e.tf)}(this,(function(e,t){"use strict";function n(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var i=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,i.get?i:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,t}var i=n(t);const s=t.env();s.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",(()=>15)),s.registerFlag("WEBGPU_CPU_FORWARD",(()=>!0)),s.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",(()=>-1)),s.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",(()=>!0)),s.registerFlag("WEBGPU_USE_LOW_POWER_GPU",(()=>!1)),s.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e3)),s.registerFlag("WEBGPU_USE_PROFILE_TOOL",(()=>!1)),s.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",(()=>!0)),s.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG",(()=>!1)),s.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL",(()=>0)),s.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER",(()=>!1)),s.registerFlag("WEBGPU_PRINT_SHADER",(()=>"")),s.registerFlag("WEBGPU_ENGINE_COMPILE_ONLY",(()=>!1));class r{constructor(e){e&&(this.vendor=e.vendor,this.architecture=e.architecture,this.intelGPUGeneration=this.getIntelGPUGeneration())}getIntelGPUGeneration(){if(this.isIntel()){if(this.architecture.startsWith("gen"))return Number(this.architecture.match(/\d+/));if(this.architecture.startsWith("xe"))return 12}return 0}isIntel(){return"intel"===this.vendor}}class a{constructor(e){this.device=e,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireBuffer(e,t,n=!1,i=!0){let s;const r=o(e,t);return i?(this.freeBuffers.has(r)||this.freeBuffers.set(r,[]),this.freeBuffers.get(r).length>0?(s=this.freeBuffers.get(r).pop(),this.numFreeBuffers--):(s=this.device.createBuffer({size:e,usage:t,mappedAtCreation:n}),this.numBytesAllocated+=e)):(s=this.device.createBuffer({size:e,usage:t,mappedAtCreation:n}),this.numBytesAllocated+=e),this.usedBuffers.has(r)||this.usedBuffers.set(r,[]),this.usedBuffers.get(r).push(s),this.numUsedBuffers++,this.numBytesUsed+=e,s}releaseBuffer(e,t=!0){if(0===this.freeBuffers.size)return;const n=e.size,i=o(n,e.usage),s=this.usedBuffers.get(i),r=s.indexOf(e);if(r<0)throw new Error("Cannot find the buffer in buffer manager");s[r]=s[s.length-1],s.pop(),this.numUsedBuffers--,this.numBytesUsed-=n,t?(this.freeBuffers.get(i).push(e),this.numFreeBuffers++):(e.destroy(),this.numBytesAllocated-=n)}getNumUsedBuffers(){return this.numUsedBuffers}getNumFreeBuffers(){return this.numFreeBuffers}dispose(){this.freeBuffers.forEach(((e,t)=>{e.forEach((e=>{e.destroy()}))})),this.usedBuffers.forEach(((e,t)=>{e.forEach((e=>{e.destroy()}))})),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0}}function o(e,t){return`${e}_${t}`}class u{constructor(e){this.device=e,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireTexture(e,t,n,i){const s=e*t*l(n),r=d(e,t,n,i);if(this.freeTextures.has(r)||this.freeTextures.set(r,[]),this.usedTextures.has(r)||this.usedTextures.set(r,[]),this.numBytesUsed+=s,this.numUsedTextures++,this.freeTextures.get(r).length>0){this.numFreeTextures--;const e=this.freeTextures.get(r).shift();return this.usedTextures.get(r).push(e),e}this.numBytesAllocated+=s;const a=this.device.createTexture({size:[e,t],format:n,usage:i});return this.usedTextures.get(r).push(a),a}releaseTexture(e){if(0===this.freeTextures.size)return;const t=e.width,n=e.height,i=e.format,s=d(t,n,i,e.usage);this.freeTextures.has(s)||this.freeTextures.set(s,[]),this.freeTextures.get(s).push(e),this.numFreeTextures++,this.numUsedTextures--;const r=this.usedTextures.get(s),a=r.indexOf(e);if(a<0)throw new Error("Cannot release a texture that was never provided by this texture manager");r.splice(a,1);const o=t*n*l(i);this.numBytesUsed-=o}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){this.freeTextures.forEach(((e,t)=>{e.forEach((e=>{e.destroy()}))})),this.usedTextures.forEach(((e,t)=>{e.forEach((e=>{e.destroy()}))})),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0}}function d(e,t,n,i){return`${e}_${t}_${n}_${i}`}function l(e){if("rgba8unorm"===e)return 16;throw new Error(`${e} is not supported!`)}function h(e,t){if(Math.max(...e)>5)throw new Error("Cannot symbolically compute strides for rank > 6 tensor.");const n=e.length,i=e.map((e=>`${t}.${"xyzwuv"[e]}`)),s=new Array(n-1);s[n-2]=i[n-1];for(let e=n-3;e>=0;--e)s[e]=`(${s[e+1]} * ${i[e+1]})`;return s}const p=(e,t,n)=>"int32"===n?`atomicAdd(${e}, bitcast<i32>(${t}));`:`\n          {\n            var oldValue = 0;\n            loop {\n              let newValueF32 = bitcast<f32>(oldValue) + (${t});\n              let newValue = bitcast<i32>(newValueF32);\n              let res = atomicCompareExchangeWeak(${e}, oldValue, newValue);\n              if res.exchanged {\n                break;\n              }\n              oldValue = res.old_value;\n            }\n          }`;var c;!function(e){e[e.FROM_PIXELS=0]="FROM_PIXELS",e[e.DRAW=1]="DRAW"}(c||(c={}));const f=(e,n,i,s,r)=>{const a=function(e,n,i){const s=[],r=i.workgroupSize[0]*i.workgroupSize[1]*i.workgroupSize[2];if(i.outputComponent=i.outputComponent?i.outputComponent:1,s.push(`\n\n      var<private> localId: vec3<u32>;\n      var<private> localIndex: u32;\n      var<private> globalId: vec3<u32>;\n      var<private> numWorkgroups: vec3<u32>;\n      var<private> workgroupId: vec3<u32>;\n\n      // Only used when the y/z dimension of workgroup size is 1.\n      fn getGlobalIndex() -> i32 {\n        ${v(i)?"  return i32(globalId.x);":`  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +\n                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${r}u +\n                localIndex);\n        `}\n      }\n    `),null!=i.pixelsOpType){const t=i.pixelsOpType===c.FROM_PIXELS?`@group(0) @binding(0) var<storage, read_write> result: array<${I(n.dtype,i.outputComponent)}>;`:`@group(0) @binding(1) var<storage, read> inBuf : array<${I(e[0].dtype,i.outputComponent)}>;`,r=3===n.shape.length?"vec2<i32>":"i32";s.push(`\n        struct Uniform {\n          outShapeStrides : ${r},\n          size            : i32,\n          numChannels     : i32,\n          alpha           : f32,\n        };\n\n        ${t}\n        @group(0) @binding(2) var<uniform> uniforms: Uniform;\n      `);const a=R(i);return[w,s.join("\n"),k(n.shape),i.getUserCode(),b(a,i)].join("\n")}let a,o,u="struct Uniforms { NAN : f32, INFINITY : f32, ";i.variableNames.forEach(((t,n)=>{const i=g(e[n].shape.length);u+=`${t.charAt(0).toLowerCase()+t.slice(1)}Shape : ${i}, `,a=e[n].shape.length-1,o=g(a),u+=`${t.charAt(0).toLowerCase()+t.slice(1)}ShapeStrides: ${o}, `}));const d=g(n.shape.length);u+=`outShape : ${d}, `,a=n.shape.length-1,o=g(a),u+=`\n         outShapeStrides: ${o}, `,i.size&&(u+="size : i32, ");i.uniforms&&(u+=i.uniforms);u+="};",u=function(e){const t=/(\w+)\s*:\s*vec(5|6)/g;e=e.replace(t,(e=>"@align(16) "+e));const n=/vec(5|6)\s*,\s*(\w+)/g;return e=e.replace(n,((e,t,n)=>`vec${t}, @align(16) ${n}`))}(u),s.push(u),i.atomic?s.push("\n      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;\n    "):s.push(`\n      @group(0) @binding(0) var<storage, read_write> result: array<${I(n.dtype,i.outputComponent)}>;\n    `);i.variableNames.forEach(((t,n)=>{s.push(`\n      @group(0) @binding(${1+n}) var<storage, read> ${t}: array<${i.variableComponents?I(e[n].dtype,i.variableComponents[n]):I(e[n].dtype,i.outputComponent)}>;\n        `)})),""!==u&&s.push(`\n      @group(0) @binding(${1+i.variableNames.length}) var<uniform> uniforms: Uniforms;\n      `);const l=function(e,t){const{x:n,y:i=[],z:s=[]}=t,r=e.length,a=n.length+i.length+s.length;if(a!==r)return"";if(n.length===r){return`fn getOutputCoords() -> ${g(r)}{\n    let globalIndex = getGlobalIndex();\n    return getCoordsFromIndex(globalIndex);\n  }\n  `}let o="";const u=[n,i,s];for(let e=0;e<u.length;e++){const t=u[e];if(0!==t.length)if(1===t.length)o+=`let d${t[0]} = i32(globalId[${e}]);`;else{const n=h(t,"uniforms.outShape");o+=`var index${e} = i32(globalId[${e}]);`;for(let i=0;i<n.length;i++)o+=`let d${t[i]} = index${e} / ${n[i]};`,i===n.length-1?o+=`let d${t[i+1]} = index${e} - d${t[i]} * ${n[i]};`:o+=`index${e} = index${e} - d${t[i]} * ${n[i]};`}}const d=[];for(let e=0;e<a;e++)d.push(`d${e}`);const l=g(a);let p=`fn getOutputCoords() -> ${l} {\n  ${o}\n`;0===d.length?p+=`return ${l}(0); }`:p+=`return ${l}(${d.join(",")}); }`;return p}(n.shape,i.dispatchLayout),p=[w,s.join("\n")+S,k(n.shape),l,C(n.shape.length)];i.atomic||p.push(function(e,t,n){const i=e.length,s=I(t,n);let r=`fn setOutputAtIndex(flatIndex : i32, value : ${m(n)}) {\n      result[flatIndex] = ${s}(value);\n    }\n\n    fn setOutputAtIndexI32(flatIndex : i32, value : ${m(n,"i32")}) {\n      result[flatIndex] = ${s}(value);\n    }\n    `;if(i>=2){const e=["d0","d1","d2","d3","d4","d5"].slice(0,i),t=g(i);r+=`\n      fn setOutputAtCoords(${e.map((e=>`${e} : i32`)).join(", ")}, value : ${m(n)}) {\n        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));\n        setOutputAtIndex(flatIndex${1===n?"":` / ${n}`}, value);\n      }\n      fn setOutputAtCoordsI32(${e.map((e=>`${e} : i32`)).join(", ")}, value : ${m(n,"i32")}) {\n        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));\n        setOutputAtIndexI32(flatIndex${1===n?"":` / ${n}`}, value);\n      }\n    `}return r}(n.shape,n.dtype,i.outputComponent));i.variableNames.forEach(((t,n)=>{p.push(`${k(e[n].shape,t)}`)}));const f=e.map(((e,s)=>function(e,n,i,s){let r=function(e,t){const n=e.name,i=e.shape.length,s=g(i),r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=["d0","d1","d2","d3","d4","d5"].slice(0,i),o=a.map((e=>`${e} : i32`)).join(", ");if(i<1)return`\n      fn ${r}() -> ${m(t)} {\n        return ${m(t)}(${n}[0]);\n      }\n    `;const u=`uniforms.${n.charAt(0).toLowerCase()+n.slice(1)}Shape`;let d=`${i}D`;0===i&&(d="1D");return`\n    fn ${r}(${o}) -> ${m(t)} {\n      return ${m(t)}(${n}[getIndexFromCoords${d}(${s}(${a.join(",")}),\n        ${u})${1===t?"":` / ${t}`}]);\n    }\n   `}(e,i);e.shape.length<=n.length&&(r+=function(e,n,i,s){const r=e.name,a=r.charAt(0).toUpperCase()+r.slice(1),o="get"+a+"ByOutput",u=e.shape.length,d=n.length,l=g(d);if(t.util.arraysEqual(e.shape,n)&&s)return`\n    fn ${o}Index(globalIndex : i32) -> ${m(i)} {\n      return ${m(i)}(${r}[globalIndex]);\n    }\n\n    fn ${o}Coords(coords : ${l}) -> ${m(i)} {\n      return ${m(i)}(${r}[${d>1?"getOutputIndexFromCoords(coords)":"coords"}${1===i?"":` / ${i}`}]);\n    }\n    `;const h=t.backend_util.getBroadcastDims(e.shape,n),p=d-u;let c="";if(0===u)return`\n    fn ${o}Index(globalIndex : i32) -> ${m(i)}{\n      return get${a}();\n    }\n\n    fn ${o}Coords(coords : ${l}) -> ${m(i)}{\n      return get${a}();\n    }\n  `;c=d<2&&h.length>=1?"coords = 0;":h.map((e=>`coords.${x(e+p)} = 0;`)).join("\n");let f="";if(d<2&&u>0)f="coords";else if(d>1){const t=g(u),n=e.shape.map(((e,t)=>`coords.${x(t+p)}`)).join(", ");f=`${t}(${n})`}else f="coords";const y=`uniforms.${r.charAt(0).toLowerCase()+r.slice(1)}Shape`,b=`${u}D`;return`\n  fn ${o}Index(globalIndex : i32) -> ${m(i)} {\n    var coords = getCoordsFromIndex(globalIndex);\n    ${c}\n    return ${m(i)}(${r}[getIndexFromCoords${b}(${f}, ${y})${1===i?"":` / ${i}`}]);\n  }\n\n  fn ${o}Coords(coordsIn : ${l}) -> ${m(i)} {\n    var coords = coordsIn;\n    ${c}\n    return ${m(i)}(${r}[getIndexFromCoords${b}(${f}, ${y})${1===i?"":` / ${i}`}]);\n  }\n`}(e,n,i,s));return r}(e,n.shape,i.variableComponents?i.variableComponents[s]:i.outputComponent,i.dispatchLayout.x.length===n.shape.length))).join("\n");p.push(f),p.push(i.getUserCode());const y=R(i);p.push(b(y,i));return p.join("\n")}(i,{dtype:s.dtype,shape:s.shape},n),o=e.createShaderModule({code:a,label:n.constructor.name});let u=t.env().get("WEBGPU_PRINT_SHADER");if(""!==u){u=u.toLowerCase();const e=u.split(",");("all"===u||e.some((e=>n.shaderKey.toLowerCase().includes(e))))&&(console.group(n.shaderKey),console.debug(a),console.groupEnd())}return r?e.createComputePipelineAsync({compute:{module:o,entryPoint:"_start"},label:n.constructor.name,layout:"auto"}):e.createComputePipeline({compute:{module:o,entryPoint:"_start"},label:n.constructor.name,layout:"auto"})},m=(e,t="f32")=>{switch(e){case 1:return`${t}`;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component ${t} is not supported.`)}};function g(e){if(e<=1)return"i32";if(2===e)return"vec2<i32>";if(3===e)return"vec3<i32>";if(4===e)return"vec4<i32>";if(5===e)return"vec5";if(6===e)return"vec6";throw Error(`GPU for rank ${e} is not yet supported`)}function x(e){if(0===e)return"x";if(1===e)return"y";if(2===e)return"z";if(3===e)return"w";if(4===e)return"u";if(5===e)return"v";throw Error(`Index ${e} is not yet supported`)}function y(...e){let t;switch(e.length){case 0:t="\n        fn main()\n      ";break;case 1:t=`\n        fn main(${e[0]} : i32)\n      `;break;default:throw Error("Unreachable")}return t}function b(e,t){let n;return n=`\n     ${function(e){return`\n  @compute @workgroup_size(${e.workgroupSize[0]}, ${e.workgroupSize[1]}, ${e.workgroupSize[2]})\n`}(t)}\n      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n                @builtin(global_invocation_id) GlobalId : vec3<u32>,\n                @builtin(local_invocation_index) LocalIndex: u32,\n                @builtin(workgroup_id) WorkgroupId : vec3<u32>,\n                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {\n        localId = LocalId;\n        localIndex = LocalIndex;\n        globalId = GlobalId;\n        numWorkgroups = NumWorkgroups;\n        workgroupId = WorkgroupId;\n        ${e?"main(getGlobalIndex());":"main();"};\n      }\n    `,n}const w="\n  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};\n  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};\n\n  // Checks whether coordinates lie within the bounds of the shape.\n  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {\n    return all(coord >= vec2<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {\n    return all(coord >= vec3<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {\n    return all(coord >= vec4<i32>(0)) && all(coord < shape);\n  }\n\n  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {\n    return coord;\n  }\n  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {\n    return dot(coords, vec2<i32>(shape.y, 1));\n  }\n  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {\n    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));\n  }\n  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n    return dot(coords, vec4<i32>(\n        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n  }\n  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {\n    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;\n  }\n  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {\n    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;\n  }\n\n  // NaN defination in IEEE 754-1985 is :\n  //   - sign = either 0 or 1.\n  //   - biased exponent = all 1 bits.\n  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).\n  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n  fn isnan(val: f32) -> bool {\n    let floatToUint: u32 = bitcast<u32>(val);\n    return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n  }\n  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {\n    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);\n    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);\n  }\n",S="\n  fn isinf(val: f32) -> bool {\n    return abs(val) == uniforms.INFINITY;\n  }\n";function k(e,n=""){const i=e.length,s=""!==n?`get${n.charAt(0).toUpperCase()+n.slice(1)}CoordsFromIndex`:"getCoordsFromIndex",r=""!==n?`${n.charAt(0).toLowerCase()+n.slice(1)}ShapeStrides`:"outShapeStrides";if(i<=1)return`fn ${s}(index : i32) -> i32 { return index; }`;const a=t.util.computeStrides(e),o=g(i),u=[];for(let e=0;e<i;e++)u.push(`d${e}`);if(1===a.length)return`    fn ${s}(index : i32) -> vec2<i32> {\n      let d0 = index / uniforms.${r}; let d1 = index - d0 * uniforms.${r};\n      return vec2<i32>(d0, d1);\n    }`;let d;return d="var index2 = index;"+a.map(((e,t)=>`${`let ${u[t]} = index2 / uniforms.${r}.${x(t)}`}; ${t===a.length-1?`let ${u[t+1]} = index2 - ${u[t]} * uniforms.${r}.${x(t)}`:`index2 = index2 - ${u[t]} * uniforms.${r}.${x(t)}`};`)).join(""),`\n    fn ${s}(index : i32) -> ${o} {\n      ${d}\n      return ${o}(${u.join(",")});\n    }\n  `}function C(e){let n="";switch(e){case 0:case 1:n+="\n        fn getOutputIndexFromCoords(coords : i32) -> i32 {\n          return coords;\n        }\n        ";break;case 2:n+="\n        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {\n          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));\n        }\n        ";break;case 3:n+="\n        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {\n          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));\n        }\n        ";break;case 4:n+="\n        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n          return dot(coords, vec4<i32>(\n            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));\n        }\n        ";break;case 5:n+="\n        fn getOutputIndexFromCoords(coords : vec5) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u;\n        }\n        ";break;case 6:n+="\n        fn getOutputIndexFromCoords(coords : vec6) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u * uniforms.outShapeStrides.u +\n              coords.v;\n        }\n        ";break;default:t.util.assert(!1,(()=>`Unsupported ${e}D shape`))}return n}function v(e){return 1===e.dispatch[1]&&1===e.dispatch[2]}function I(e,t=1){if("float32"===e)return m(t,"f32");if("int32"===e||"bool"===e)return m(t,"i32");throw new Error(`type ${e} is not supported.`)}function R(e){return(!e.dispatchLayout.hasOwnProperty("y")||0===e.dispatchLayout.y.length)&&(!e.dispatchLayout.hasOwnProperty("z")||0===e.dispatchLayout.z.length)}const $=e=>{let t=1;for(let n=0;n<e.length;n++)t*=e[n];return t};function P(e,t,n=[1,1,1],i=[1,1,1]){const[s,r,a]=[Math.ceil($(e.x.map((e=>t[e])))/(n[0]*i[0])),e.y?Math.ceil($(e.y.map((e=>t[e])))/(n[1]*i[1])):1,e.z?Math.ceil($(e.z.map((e=>t[e])))/(n[2]*i[2])):1];return[s,r,a]}function z(e,t,n,i=!1){const s=[8,8,1],r=[4,4,1];return i||(e<=8&&(r[1]=1),t<=16&&n<=16&&(s[0]=4)),{workgroupSize:s,elementsPerThread:r}}function A(e,t,n=!1){if(n)return[8,8,1];const i=$(e.x.map((e=>t[e]))),s=$(e.y.map((e=>t[e])));return i<=4?[4,16,1]:s<=4?[16,4,1]:[16,16,1]}function N(e,t,n=!1){if(n)return[4,4,1];const i=$(e.x.map((e=>t[e]))),s=$(e.y.map((e=>t[e])));return i<=4?[1,2,1]:s<=4?[2,1,1]:[2,2,1]}function D(e){return{x:e.map(((e,t)=>t))}}function T(e){if("float32"===e||"int32"===e||"bool"===e||"string"===e)return 4;if("complex64"===e)return 8;throw new Error(`Unknown dtype ${e}`)}function F(){return("undefined"!=typeof window||"undefined"!=typeof WorkerGlobalScope)&&!!navigator.gpu}function _(e,n){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&t.util.assert("complex64"!==e.dtype,(()=>`${n} does not support complex64 tensors in the WebGPU backend.`))}))}var E;!function(e){e[e.MatMulReduceProgram=0]="MatMulReduceProgram",e[e.MatMulSplitKProgram=1]="MatMulSplitKProgram",e[e.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",e[e.MatMulPackedProgram=3]="MatMulPackedProgram",e[e.MatMulMax=4]="MatMulMax"}(E||(E={}));var L={__proto__:null,GPUBytesPerElement:T,get MatMulProgramType(){return E},assertNotComplex:_,computeDispatch:P,computeWorkPerThreadForConv2d:N,computeWorkgroupInfoForMatMul:z,computeWorkgroupSizeForConv2d:A,flatDispatchLayout:D,isWebGPUSupported:F,tilesFitEvenlyIntoShape:function(e,t){if(e.length!==t.length)throw new Error(`Cannot compute whether rank ${e.length} tiles fit evenly into rank ${t.length} shape - ranks must match.`);return t.every(((t,n)=>t%e[n]==0))}};const W=t.env().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD");class B extends t.KernelBackend{nextDataId(){return B.nextDataId++}constructor(e,n){if(super(),this.commandQueueOwnedIds=new WeakSet,this.dispatchCountInPass=0,this.disposed=!1,this.downloadWaitMs=0,this.tensorDataPendingDisposal=[],this.queryResolveBuffer=null,this.querySet=null,this.querySetCount=2,this.stagingPendingDisposal=[],this.uniformPendingDisposal=[],this.uploadWaitMs=0,this.hasReadSyncWarned=!1,this.hasTimestampQueryWarned=!1,!F())throw new Error("WebGPU is not supported on this device");this.pipelineCache={},this.device=e,this.queue=e.queue,this.commandEncoder=null,this.computePassEncoder=null,this.adapterInfo=new r(n),this.supportTimestampQuery=this.device.features.has("timestamp-query"),this.thresholdToIncreaseWorkgroups=this.adapterInfo.intelGPUGeneration>=12?16:8,this.bufferManager=new a(this.device),this.textureManager=new u(this.device),this.tensorMap=new t.DataStorage(this,t.engine()),t.env().getBool("WEBGPU_USE_PROFILE_TOOL")&&(this.dummyCanvas=document.createElement("canvas"),this.dummyCanvas.width=1,this.dummyCanvas.height=1,this.dummyContext=this.dummyCanvas.getContext("webgpu"),this.dummyContext.configure({device:e,format:"bgra8unorm"}),document.body.appendChild(this.dummyCanvas))}floatPrecision(){return 32}disposeData(e,t=!1){if(!this.tensorMap.has(e))return!0;const n=this.tensorMap.get(e);return t?n.refCount=0:n.refCount--,!(n.refCount>0)&&(null!=n.complexTensorInfos&&(this.disposeData(n.complexTensorInfos.real.dataId),this.disposeData(n.complexTensorInfos.imag.dataId)),this.commandQueueOwnedIds.has(e)?(this.tensorDataPendingDisposal.push(e),!0):(this.releaseResource(e),this.tensorMap.delete(e),!0))}memory(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}}releaseResource(e){const t=this.tensorMap.get(e);t&&t.resource&&(t.external||(t.resource instanceof GPUBuffer?this.bufferManager.releaseBuffer(t.resource):t.resource instanceof GPUTexture&&this.textureManager.releaseTexture(t.resource)),t.resource=null)}refCount(e){if(this.tensorMap.has(e)){return this.tensorMap.get(e).refCount}return 0}incRef(e){this.tensorMap.get(e).refCount++}decRef(e){if(this.tensorMap.has(e)){this.tensorMap.get(e).refCount--}}write(e,t,n){if("complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const i={id:this.nextDataId()};return this.tensorMap.set(i,{dtype:n,shape:t,values:e,refCount:1}),i}move(e,t,n,i,s){if("complex64"===i)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(e,{dtype:i,shape:n,values:t,refCount:s})}submitQueue(){this.queue.submit([this.commandEncoder.finish()]),this.commandEncoder=null,this.dispatchCountInPass=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach((e=>{this.releaseResource(e),this.tensorMap.delete(e)})),this.uniformPendingDisposal.forEach((e=>this.bufferManager.releaseBuffer(e))),this.stagingPendingDisposal.forEach((e=>this.bufferManager.releaseBuffer(e,!1))),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]}ensureCommandEncoderReady(){this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder())}endComputePassEncoder(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}async checkCompileCompletionAsync(){let e;try{e=await Promise.all(Object.values(this.pipelineCache))}catch(e){throw new Error(e.message)}Object.keys(this.pipelineCache).map(((t,n)=>{this.pipelineCache[t]=e[n]}))}async getBufferData(e){if(t.env().getBool("WEBGPU_ENGINE_COMPILE_ONLY"))return console.warn("The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false"),null;const n=e.size,i=this.bufferManager.acquireBuffer(n,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,i,0,n),this.submitQueue(),await i.mapAsync(GPUMapMode.READ);const s=i.getMappedRange().slice(0);return i.unmap(),null!=i&&this.bufferManager.releaseBuffer(i),t.env().getBool("WEBGPU_USE_PROFILE_TOOL")&&(t.util.assert(void 0!==this.dummyContext,(()=>"Fail to get context for profiling tool")),this.dummyContext.getCurrentTexture()),s}convertAndCacheOnCPU(e,t){const n=this.tensorMap.get(e);return n.values=t,n.values}readSync(e){const n=this.tensorMap.get(e),{values:i,complexTensorInfos:s}=n;if(null!=i||"string"===n.dtype)return i;if("complex64"===n.dtype){const n=this.readSync(s.real.dataId),i=this.readSync(s.imag.dataId),r=t.util.convertBackendValuesAndArrayBuffer(t.backend_util.mergeRealAndImagArrays(n,i).buffer,"float32");return this.convertAndCacheOnCPU(e,r),r}this.hasReadSyncWarned||(this.hasReadSyncWarned=!0,console.warn("The performance of synchronously reading data from GPU to CPU is poor on the webgpu backend, please use asynchronous APIs instead."));const r=["opaque","premultiplied"],a=n.resource,o=a.size;t.util.assert(o%4==0,(()=>"Because there is 4 bytes for one pixel, buffer size must be multiple of 4."));const u=o/4,d=new ArrayBuffer(o),l=256,h=256,p=r.map((e=>new OffscreenCanvas(l,h))),c=new OffscreenCanvas(l,h);this.endComputePassEncoder(),p.map(((e,t)=>{const n=e.getContext("webgpu");return n.configure({device:this.device,format:"bgra8unorm",usage:GPUTextureUsage.COPY_DST,alphaMode:r[t]}),n.getCurrentTexture()})).map(((e,t)=>{const n=(n,i,s)=>{this.ensureCommandEncoderReady(),this.commandEncoder.copyBufferToTexture({buffer:a,bytesPerRow:1024,offset:s},{texture:e},{width:n,height:i}),this.submitQueue();const o=c.getContext("2d",{willReadFrequently:!0});o.clearRect(0,0,n,i),o.drawImage(p[t],0,0);const u=o.getImageData(0,0,n,i).data,l=r[t],h=new Uint8ClampedArray(d,s,n*i*4);for(let e=0;e<h.length;e+=4)if("premultiplied"===l)h[e+3]=u[e+3];else{const t=u[e];h[e]=u[e+2],h[e+1]=u[e+1],h[e+2]=t}},i=Math.floor(u/65536);let s=l,o=h,f=0;for(let e=0;e<i;e++)n(s,o,f),f+=262144;const m=u%65536;o=Math.floor(m/l),o>0&&(n(s,o,f),f+=1024*o),s=m%l,s>0&&n(s,1,f)}));const f=t.util.convertBackendValuesAndArrayBuffer(d,n.dtype);return this.convertAndCacheOnCPU(e,f),f}async read(e){if(!this.tensorMap.has(e))throw new Error(`Tensor ${e} was not registered!`);const n=this.tensorMap.get(e),{values:i}=n;if(null!=i)return i;let s;if("complex64"===n.dtype){const e=await Promise.all([this.read(n.complexTensorInfos.real.dataId),this.read(n.complexTensorInfos.imag.dataId)]),i=e[0],r=e[1];s=t.backend_util.mergeRealAndImagArrays(i,r)}else{const e=await this.getBufferData(n.resource);s=t.util.convertBackendValuesAndArrayBuffer(e,n.dtype)}return this.convertAndCacheOnCPU(e,s),s}copyBuffer(e){const t=e.size,n=e.usage,i=this.bufferManager.acquireBuffer(t,n);return this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,i,0,t),this.submitQueue(),i}createTensorFromGPUData(e,n,i){let s=e.buffer;if("complex64"===i)throw new Error("Cannot write to a complex64 dtype. ");const r={id:this.nextDataId()};this.tensorMap.set(r,{dtype:i,shape:n,values:null,refCount:1,external:e.zeroCopy});const a=this.tensorMap.get(r),o=T(a.dtype)*t.util.sizeFromShape(a.shape);if(e.buffer.size<o)throw new Error(`GPUBuffer size(${e.buffer.size}) is smaller than tensor size(${o})!`);if((e.buffer.usage&(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))!=(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))throw new Error("GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!");return!0!==e.zeroCopy&&(s=this.copyBuffer(s)),a.resource=s,t.engine().makeTensorFromDataId(r,n,i,this)}readToGPU(e){const n=this.tensorMap.get(e),{values:i,dtype:s,shape:r,resource:a}=n;if("complex64"===s)throw new Error("Does not support reading buffer for complex64 dtype.");if(null==a)throw null!=i?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const o=a,u=o.size,d=o.usage,l=this.bufferManager.acquireBuffer(u,d);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(a,0,l,0,u),this.submitQueue();const h=this.makeTensorInfo(r,s),p=t.engine().makeTensorFromTensorInfo(h);return this.tensorMap.get(h.dataId).resource=l,{tensorRef:p,buffer:l}}bufferSync(e){const n=this.readSync(e.dataId);if("string"===e.dtype)try{const i=n.map((e=>t.util.decodeString(e)));return t.buffer(e.shape,e.dtype,i)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return t.buffer(e.shape,e.dtype,n)}async time(e){this.supportTimestampQuery||this.hasTimestampQueryWarned||(console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --disable-dawn-features=disallow_unsafe_apis to try it again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled."),this.hasTimestampQueryWarned=!0);const n=this.activeTimers,i=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=i,s=!0):this.activeTimers.push(i),this.activeTimers=i,e();const r=t.util.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=t.util.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=n,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},u=await Promise.all(r);return o.kernelMs=t.util.sum(u),o.getExtraProfileInfo=()=>u.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", "),this.uploadWaitMs=0,this.downloadWaitMs=0,o}makeTensorInfo(e,n,i){"string"===n&&null!=i&&i.length>0&&t.util.isString(i[0])&&(i=i.map((e=>t.util.encodeString(e))));return{dataId:this.write(i,e,n),shape:e,dtype:n}}tensorToBinding(e){if(!e)return null;const t=this.tensorMap.get(e.dataId).resource;return t instanceof GPUBuffer?{buffer:t}:t instanceof GPUTexture?t.createView():t}uploadToGPU(e){const n=this.tensorMap.get(e);if(null!=n.resource)return;const i=T(n.dtype)*t.util.sizeFromShape(n.shape);let s;const r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST;if(n.values){if(s=this.bufferManager.acquireBuffer(i,r,!0),"unmapped"===s.mapState){const e=this.bufferManager.acquireBuffer(i,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,!0,!1),t=e.getMappedRange();"int32"===n.dtype||"bool"===n.dtype?new Int32Array(t).set(n.values):new Float32Array(t).set(n.values),e.unmap(),this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,s,0,i),this.stagingPendingDisposal.push(e)}else{const e=s.getMappedRange();"int32"===n.dtype||"bool"===n.dtype?new Int32Array(e).set(n.values):new Float32Array(e).set(n.values),s.unmap()}n.values=null}else s=this.bufferManager.acquireBuffer(i,r);n.resource=s}makeUniforms(e){let n=0,i=0;const s=[];let r=1;e.forEach((e=>{let a;switch(0===e.data.length&&(e.data=[1]),e.data.length){case 1:a=4;break;case 2:a=8;break;case 3:case 4:case 5:case 6:a=16;break;default:t.util.assert(!1,(()=>`Unsupported ${e.data.length}D shape`))}5!==i&&6!==i||(a=16),a>r&&(r=a),n=Math.ceil(n/a)*a,i=e.data.length,s.push(n),n+=4*e.data.length})),n=Math.ceil(n/r)*r;const a=new ArrayBuffer(n);e.forEach(((e,t)=>{const n=s[t];"int32"===e.type?new Int32Array(a,n,e.data.length).set(e.data):"uint32"===e.type?new Uint32Array(a,n,e.data.length).set(e.data):new Float32Array(a,n,e.data.length).set(e.data)}));const o=this.bufferManager.acquireBuffer(n,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);return this.queue.writeBuffer(o,0,a,0,n),this.uniformPendingDisposal.push(o),{offset:0,size:n,buffer:o}}runWebGPUProgram(e,n,i,s,r){if(r||(r=this.makeTensorInfo(e.outputShape,i)),0===t.util.sizeFromShape(r.shape))return this.tensorMap.get(r.dataId).values=t.util.getTypedArrayFromDType(r.dtype,0),r;this.uploadToGPU(r.dataId),e.dispatch=((e,n)=>{const i=e.limits.maxComputeWorkgroupsPerDimension,s=n.dispatchLayout,r=n.dispatch;if(r.every((e=>e<=i)))return r;t.util.assert(r[0]>i&&void 0===s.y&&void 0===s.z,(()=>"Dispatch size exceeds WebGPU limits in Y or Z dimension."));let a=Math.ceil(Math.sqrt(r[0]));return a>i?(a=Math.ceil(Math.cbrt(r[0])),t.util.assert(a<=i,(()=>"Total dispatch size exceeds WebGPU maximum.")),[a,a,a]):[a,a,1]})(this.device,e);const a=n.map(((t,n)=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return this.uploadToGPU(t.dataId),{dtype:this.tensorMap.get(t.dataId).dtype,shape:t.shape,name:e.variableNames[n]}}));e.shaderKey=function(e,n,i){let s=e.shaderKey;if(null!=e.pixelsOpType)return s;const r=[],a=[];n.forEach((e=>{r.push(e.shape),a.push(e.dtype)})),r.push(i.shape),a.push(i.dtype);const o=n.map((e=>t.backend_util.getBroadcastDims(e.shape,i.shape))),u=n.map((e=>t.util.arraysEqual(e.shape,i.shape))).join("_"),d=o.map((e=>e.join("_"))).join(";"),l=v(e)?"flatDispatch":"";return s+="_"+(e.workgroupSize?e.workgroupSize.join(","):"")+r.map((e=>e.length)).join(",")+a.join(",")+e.variableNames.join(",")+d+u+l,s}(e,a,r);const o=t.env().getBool("WEBGPU_ENGINE_COMPILE_ONLY");return e.shaderKey in this.pipelineCache||(this.pipelineCache[e.shaderKey]=f(this.device,e,a,r,o)),e.pipeline=this.pipelineCache[e.shaderKey],o||this.recordAndSubmit(e,r,n,s),r}recordAndSubmit(e,n,i,s){if(e.pipeline instanceof Promise)throw new Error("Please call checkCompileCompletionAsync to ensure parallel compilation is done!");let r=[],a=[];const o="int32";if(null==e.pixelsOpType){r.push({type:"float32",data:[NaN]},{type:"float32",data:[1/0]}),a=i.concat(n).map((e=>e.shape));const e="int32";a.map((n=>{r.push({type:e,data:n});const i=t.util.computeStrides(n);r.push({type:e,data:i})}))}else{const e=t.util.computeStrides(n.shape);r.push({type:o,data:e})}if(e.size){const n=t.util.sizeFromShape(e.outputShape);r.push({type:o,data:[e.outputComponent?n/e.outputComponent:n]})}s&&(r=[...r,...s]);const u=[this.tensorToBinding(n),...i.map((e=>this.tensorToBinding(e))),this.makeUniforms(r)];i.forEach((e=>{this.commandQueueOwnedIds.add(e.dataId)})),this.commandQueueOwnedIds.add(n.dataId);const d=this.device.createBindGroup({layout:e.pipeline.getBindGroupLayout(0),entries:u.map(((e,t)=>({binding:t,resource:e})))}),l=null!=this.activeTimers;this.ensureCommandEncoderReady();const h={};l&&this.supportTimestampQuery?(this.endComputePassEncoder(),null==this.querySet&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),h.timestampWrites=[{querySet:this.querySet,queryIndex:0,location:"beginning"},{querySet:this.querySet,queryIndex:1,location:"end"}],this.computePassEncoder=this.commandEncoder.beginComputePass(h)):this.computePassEncoder||(this.computePassEncoder=this.commandEncoder.beginComputePass(h)),this.computePassEncoder.setPipeline(e.pipeline),this.computePassEncoder.setBindGroup(0,d),this.computePassEncoder.dispatchWorkgroups(e.dispatch[0],e.dispatch[1],e.dispatch[2]),this.dispatchCountInPass++,(l||t.env().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchCountInPass||e.pixelsOpType===c.DRAW)&&(this.endComputePassEncoder(),l?this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime()}):this.submitQueue())}async getQueryTime(){if(!this.supportTimestampQuery)return 0;null==this.queryResolveBuffer&&(this.queryResolveBuffer=this.bufferManager.acquireBuffer(8*this.querySetCount,GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST|GPUBufferUsage.QUERY_RESOLVE)),this.commandEncoder.resolveQuerySet(this.querySet,0,this.querySetCount,this.queryResolveBuffer,0);const e=this.bufferManager.acquireBuffer(8*this.querySetCount,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,8*this.querySetCount),this.submitQueue(),await e.mapAsync(GPUMapMode.READ);const t=new BigUint64Array(e.getMappedRange()),n=Number(t[1]-t[0])/1e6;return e.unmap(),this.bufferManager.releaseBuffer(e),n}shouldExecuteOnCPU(e,n=W){return t.env().getBool("WEBGPU_CPU_FORWARD")&&e.every((e=>null==this.tensorMap.get(e.dataId).resource&&t.util.sizeFromShape(e.shape)<n))}numDataIds(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length}dispose(){this.disposed||(null!=this.querySet&&this.querySet.destroy(),this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)}}var O;B.nextDataId=0,F()&&t.registerBackend("webgpu",(async()=>{const e={powerPreference:t.env().get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},n=await navigator.gpu.requestAdapter(e),i={},s=[];n.features.has("timestamp-query")&&s.push("timestamp-query"),n.features.has("bgra8unorm-storage")&&s.push(["bgra8unorm-storage"]),i.requiredFeatures=s;const r=n.limits;i.requiredLimits={maxComputeWorkgroupStorageSize:r.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.maxStorageBufferBindingSize,maxBufferSize:r.maxBufferSize,maxComputeWorkgroupSizeX:r.maxComputeWorkgroupSizeX,maxComputeInvocationsPerWorkgroup:r.maxComputeInvocationsPerWorkgroup};const a=await n.requestDevice(i),o=await n.requestAdapterInfo();return new B(a,o)}),3),function(e){e[e.ADD=0]="ADD",e[e.ATAN2=1]="ATAN2",e[e.COMPLEX_MULTIPLY_IMAG=2]="COMPLEX_MULTIPLY_IMAG",e[e.COMPLEX_MULTIPLY_REAL=3]="COMPLEX_MULTIPLY_REAL",e[e.DIV=4]="DIV",e[e.ELU_DER=5]="ELU_DER",e[e.EQUAL=6]="EQUAL",e[e.FLOOR_DIV=7]="FLOOR_DIV",e[e.GREATER=8]="GREATER",e[e.GREATER_EQUAL=9]="GREATER_EQUAL",e[e.LESS=10]="LESS",e[e.LESS_EQUAL=11]="LESS_EQUAL",e[e.LOGICAL_AND=12]="LOGICAL_AND",e[e.LOGICAL_OR=13]="LOGICAL_OR",e[e.MAX=14]="MAX",e[e.MIN=15]="MIN",e[e.MOD=16]="MOD",e[e.MUL=17]="MUL",e[e.NOT_EQUAL=18]="NOT_EQUAL",e[e.POW=19]="POW",e[e.PRELU=20]="PRELU",e[e.SQUARED_DIFFERENCE=21]="SQUARED_DIFFERENCE",e[e.SUB=22]="SUB"}(O||(O={}));function U(e,t){let n;do{switch(e){case O.ATAN2:n="let resultTemp = atan2(a, b);";break;case O.MAX:n="let resultTemp = max(a, b);";break;case O.MIN:n="let resultTemp = min(a, b);";break;case O.MOD:n=t?"\n  let isNaN = !vec4<bool>(b);\n  var resultTemp = vec4<f32>(a % b);\n  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {\n    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];\n  }\n  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {\n    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];\n  }\n  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {\n    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];\n  }\n  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {\n    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];\n  }\n":"\n  let isNaN = b == 0.;\n  var resultTemp = a % b;\n  resultTemp = select((resultTemp + b) % b, resultTemp,\n      (a < 0. && b < 0.) || (a >= 0. && b > 0.));\n";break;case O.NOT_EQUAL:n=t?"\n  var resultTemp = vec4<f32>(a != b);\n  let valueForNaN = 1.0;\n":"\n  var resultTemp = f32(a != b);\n  let valueForNaN = 1.0;\n";break;case O.POW:n=t?"\n  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);\n  let isModRound1 = vec4<f32>(isModRound1Bool);\n  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);\n  var resultTemp = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  let isExpZero = b == vec4<f32>(0.0);\n  if (isExpZero.r) {\n    resultTemp.r = 1.0;\n  }\n  if (isExpZero.g) {\n    resultTemp.g = 1.0;\n  }\n  if (isExpZero.b) {\n    resultTemp.b = 1.0;\n  }\n  if (isExpZero.a) {\n    resultTemp.a = 1.0;\n  }\n  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);\n":"\n  let isNaN = a < 0.0 && floor(b) < b;\n  if (b == 0.0) {\n    return 1.0;\n  }\n  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),\n      round(abs(b) % 2.0) != 1.0);\n";break;default:continue}let i,s,r;return t?(i="isnanVec4",s="vec4<f32>",r="vec4<bool>"):(i="isnan",s="f32",r="bool"),`\n      let aIsNaN = ${i}(a);\n      let aPostLegalization = select(a, ${s}(42), aIsNaN);\n      let bIsNaN = ${i}(b);\n      let bPostLegalization = select(b, ${s}(42), bIsNaN);\n      let isNaN = false;\n      let valueForNaN = uniforms.NAN;\n      {\n        let a = aPostLegalization;\n        let b = bPostLegalization;\n        ${n}\n        return select(\n            resultTemp, ${s}(valueForNaN),\n            ${r}(isNaN) | aIsNaN | bIsNaN);\n      }\n    `}while(0);switch(e){case O.ADD:n="let resultTemp = a + b;";break;case O.COMPLEX_MULTIPLY_IMAG:n="let resultTemp = areal * bimag + aimag * breal;";break;case O.COMPLEX_MULTIPLY_REAL:n="let resultTemp = areal * breal - aimag * bimag;";break;case O.DIV:n="let resultTemp = a / b;";break;case O.ELU_DER:n="let resultTemp = select(a * (b + 1.0), a, b >= b - b);";break;case O.EQUAL:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a == b);\n";break;case O.FLOOR_DIV:n="\n  let remainder =\n      select(a % b, round(a % b), (round(a) == a) & (round(b) == b));\n  let quotient = (a - remainder) / b;\n  let resultTemp =\n      round(select(quotient, quotient - 1, sign(remainder) == -sign(b)));\n";break;case O.GREATER:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a > b);\n";break;case O.GREATER_EQUAL:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a >= b);\n";break;case O.LESS:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a < b);\n";break;case O.LESS_EQUAL:n="\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a <= b);\n";break;case O.LOGICAL_AND:return t?"return (vec4<f32>(a >= vec4<f32>(1.0)) *\n  vec4<f32>(b >= vec4<f32>(1.0)));":"return f32(a >= 1.0 && b >= 1.0);";case O.LOGICAL_OR:return t?"return min(vec4<f32>(a >= vec4<f32>(1.0)) +\n  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));":"return f32(a >= 1.0 || b >= 1.0);";case O.MUL:n="let resultTemp = a * b;";break;case O.PRELU:return t?"\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n":"if (a < 0.0) { return b * a; }  return a;";case O.SQUARED_DIFFERENCE:n="let resultTemp = (a - b) * (a - b);";break;case O.SUB:n="let resultTemp = a - b;"}return`\n    ${n}\n    return resultTemp;\n  `}var M;!function(e){e[e.ABS=0]="ABS",e[e.ACOS=1]="ACOS",e[e.ACOSH=2]="ACOSH",e[e.ASIN=3]="ASIN",e[e.ASINH=4]="ASINH",e[e.ATAN=5]="ATAN",e[e.ATANH=6]="ATANH",e[e.CEIL=7]="CEIL",e[e.COS=8]="COS",e[e.COSH=9]="COSH",e[e.ELU=10]="ELU",e[e.ERF=11]="ERF",e[e.EXP=12]="EXP",e[e.EXPM1=13]="EXPM1",e[e.FLOOR=14]="FLOOR",e[e.IS_FINITE=15]="IS_FINITE",e[e.IS_INF=16]="IS_INF",e[e.IS_NAN=17]="IS_NAN",e[e.LINEAR=18]="LINEAR",e[e.LOG=19]="LOG",e[e.LOG1P=20]="LOG1P",e[e.LOGICAL_NOT=21]="LOGICAL_NOT",e[e.NEG=22]="NEG",e[e.RELU=23]="RELU",e[e.RELU6=24]="RELU6",e[e.LEAKYRELU=25]="LEAKYRELU",e[e.RECIPROCAL=26]="RECIPROCAL",e[e.ROUND=27]="ROUND",e[e.RSQRT=28]="RSQRT",e[e.SELU=29]="SELU",e[e.SIGMOID=30]="SIGMOID",e[e.SIGN=31]="SIGN",e[e.SIN=32]="SIN",e[e.SINH=33]="SINH",e[e.SOFTPLUS=34]="SOFTPLUS",e[e.SQRT=35]="SQRT",e[e.SQUARE=36]="SQUARE",e[e.STEP=37]="STEP",e[e.TAN=38]="TAN",e[e.TANH=39]="TANH",e[e.TO_INT=40]="TO_INT"}(M||(M={}));const V=`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  let p = ${t.backend_util.ERF_P};\n  let a1 = ${t.backend_util.ERF_A1};\n  let a2 = ${t.backend_util.ERF_A2};\n  let a3 = ${t.backend_util.ERF_A3};\n  let a4 = ${t.backend_util.ERF_A4};\n  let a5 = ${t.backend_util.ERF_A5};\n\n  let sign = sign(a);\n  let absA = abs(a);\n  let t = 1.0 / (1.0 + p * absA);\n  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));\n`,G=`\n  if (a >= 0.0) {\n    return ${t.backend_util.SELU_SCALE} * a;\n  } else {\n    return ${t.backend_util.SELU_SCALEALPHA} * (exp(a) - 1.0);\n  }\n`;function H(e,t){switch(e){case M.ABS:return"return abs(a);";case M.ACOS:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return acos(a);\n";case M.ACOSH:return"\n  if (a < 1.) {\n    return uniforms.NAN;\n  }\n  return acosh(a);\n";case M.ASIN:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return asin(a);\n";case M.ASINH:return"return asinh(a);";case M.ATAN:return"\n  if (isnan(a)) {\n    return uniforms.NAN;\n  }\n  return atan(a);\n";case M.ATANH:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  if (a == 1.) {\n    return uniforms.INFINITY;\n  }\n  if (a == -1.) {\n    return -uniforms.INFINITY;\n  }\n  return atanh(a);\n";case M.COS:return"return cos(a);";case M.COSH:return"\n  let e2x = exp(-a);\n  return (e2x + 1.0 / e2x) / 2.0;\n";case M.CEIL:return"return ceil(a);";case M.ELU:return t?"\n  var resFloat = exp(a) - vec4<f32>(1.0);\n  if (a.r >= 0.0) {\n    resFloat.r = a.r;\n  }\n  if (a.g >= 0.0) {\n    resFloat.g = a.g;\n  }\n  if (a.b >= 0.0) {\n    resFloat.b = a.b;\n  }\n  if (a.a >= 0.0) {\n    resFloat.a = a.a;\n  }\n  return resFloat;\n":"if (a >= 0.0) { return a; }  return (exp(a) - 1.0);";case M.ERF:return V;case M.EXP:return"return exp(a);";case M.EXPM1:return"return exp(a) - 1.0;";case M.FLOOR:return"return floor(a);";case M.IS_FINITE:return"return f32(!isnan(a) && !isinf(a));";case M.IS_INF:return"return f32(isinf(a));";case M.IS_NAN:return"return f32(isnan(a));";case M.LINEAR:return"return a;";case M.LOG:return"if (a < 0.0) { return uniforms.NAN; }\n  return log(a);";case M.LOG1P:return"\n  if (isnan(a)) { return a; }\n  return log(1.0 + a);\n";case M.LOGICAL_NOT:return"return f32(!(a >= 1.0));";case M.NEG:return"return -a;";case M.LEAKYRELU:return t?"\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n":"if (a < 0.0) { return uniforms.alpha * a; } return a;";case M.RECIPROCAL:return"return 1.0 / a;";case M.RELU:return t?"\n  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));\n":"return select(a, 0.0, a < 0.0);";case M.RELU6:return t?"return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));":"return clamp(a, 0.0, 6.0);";case M.ROUND:return"return round(a);";case M.RSQRT:return"return inverseSqrt(a);";case M.SELU:return G;case M.SIGMOID:return"return 1.0 / (1.0 + exp(-1.0 * a));";case M.SIGN:return"return sign(a);";case M.SIN:return"return sin(a);";case M.SINH:return"\n  let e2x = exp(a);\n  return (e2x - 1.0 / e2x) / 2.0;\n";case M.SOFTPLUS:return"\n  let epsilon = 1.1920928955078125e-7;\n  let threshold = log(epsilon) + 2.0;\n\n  let too_large = a > -threshold;\n  let too_small = a < threshold;\n  let exp_a = exp(a);\n\n  if (too_large) {\n    return a;\n  } else if (too_small) {\n    return exp_a;\n  } else {\n    return log(exp_a + 1.0);\n  }\n";case M.SQRT:return"return sqrt(a);";case M.SQUARE:return"return a * a;";case M.STEP:return"\n  if (isnan(a)) {\n    return a;\n  }\n\n  return select(uniforms.stepAlpha, 1.0, a > 0.0);\n";case M.TAN:return"return tan(a);";case M.TANH:return"\n  let e2x = exp(-2.0 * abs(a));\n  return sign(a) * (1.0 - e2x) / (1.0 + e2x);\n";case M.TO_INT:return"return f32(i32((a)));";default:throw new Error(`BinaryType ${e} is not implemented!`)}}function X(e,t=!1,n=!1,i=3){if(null===e)return"";let s="";if("linear"===e)s=H(M.LINEAR);else if("relu"===e)s=H(M.RELU,n);else if("elu"===e)s=H(M.ELU,n);else if("relu6"===e)s=H(M.RELU6,n);else if("prelu"===e)s=U(O.PRELU,n);else if("sigmoid"===e)s=H(M.SIGMOID,n);else{if("leakyrelu"!==e)throw new Error(`Activation ${e} has not been implemented for the WebGPU backend.`);s=H(M.LEAKYRELU,n)}const r=m(n?4:1);let a="";return a=t?`\n      fn activation(a : ${r}, coords : vec${i}<i32>) -> ${r} {\n        let b = getPreluActivationWeightsByOutputCoords(coords);\n        ${s}\n      }`:`\n      fn activation(a : ${r}, coords : vec${i}<i32>) -> ${r} {\n        ${s}\n      }`,a}function K(e,t){return`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      ${t?"value = activation(value, coords);":""}\n      `}function q(e,n,i=!1,s=!1,r=!1,a=1){t.util.assert(e&&1===a||!e,(()=>`transposeA ${e} is not compatible with component size ${a}`));const o=`\n      ${e?"value = getA(batch, col, row);":"value = getA(batch, row, col);"}\n\n    `,u=n?"value = getB(batch, col, row);":"value = getB(batch, row, col);";return`\n  fn mm_readA(batch: i32, row: i32, col: i32) -> ${m(a)} {\n    var value = ${m(a)}(0.0);\n    ${i&&r?o:`\n    ${e?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}\n    {\n      ${o}\n    }\n    `}\n    return value;\n  }\n\n  fn mm_readB(batch: i32, row: i32, col: i32) -> ${m(a)} {\n    var value = ${m(a)}(0.0);\n    ${u}\n    return value;\n  }\n  `}function Y(e,t,n,i,s=!1,r=!1,a=!1,o=1){return`\n  ${q(n,i,s,r,a,o)}\n  fn mm_write(batch: i32, row: i32, col: i32, valueIn: ${m(o)}) {\n    ${s&&r?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}\n    {\n      var value = valueIn;\n      let coords = vec3<i32>(batch, row, col);\n      ${K(e,t)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], value);\n    }\n  }\n  `}function j(e,n,i=!1,s=32,r=!1,a=32,o=!1){const u=n[1]*e[1],d=n[0]*e[0],l=i?u:s,h=i?s:u,p=l/n[0],c=s/n[1],f=e[1],m=e[0];return t.util.assert((i&&4===p&&4===e[1]||!i&&(3===p||4===p))&&l%n[0]==0&&s%n[1]==0&&4===e[0],(()=>`If transposeA ${i} is true, innerElementSize ${p} and workPerThread[1] ${e[1]} must be 4.\n          Otherwise, innerElementSize ${p} must be 3 or 4.\n      tileAWidth ${l} must be divisible by workgroupSize[0]${n[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${n[1]}. colPerThread ${e[0]} must be 4.`)),`\n  var<workgroup> mm_Asub : array<array<vec${p}<f32>, ${l/p}>, ${h}>;\n  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${d/e[0]}>, ${s}>;\n\n  ${y()} {\n    let localRow = i32(localId.y);\n    let tileRow = localRow * ${f};\n    let tileCol = i32(localId.x);\n\n    let globalRow = i32(globalId.y) * ${f};\n    let globalCol = i32(globalId.x) * ${m};\n    let batch = ${r?"0":"i32(globalId.z)"};\n    let batchA = ${r||!o?"batch":"batch % uniforms.aShape[0]"};\n    let batchB = ${r||!o?"batch":"batch % uniforms.bShape[0]"};\n    let globalRowStart = i32(workgroupId.y) * ${u};\n\n    let numTiles = ${r?`${Math.ceil(a/s)}`:`(uniforms.dimInner - 1) / ${s} + 1`};\n    var kStart = ${r?`i32(globalId.z) * ${a}`:"0"};\n\n    var acc: array<vec4<f32>, ${f}>;\n\n    // Loop over shared dimension.\n    let tileRowB = localRow * ${c};\n    for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var innerRow = 0; innerRow < ${f}; innerRow++) {\n            let inputRow = tileRow + innerRow;\n            let inputCol = tileCol;\n            ${((e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol * ${t});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRow + innerRow,\n          kStart + inputCol * ${t});\n        `)(i,p)}\n        }\n\n        // Load one tile of B into local memory.\n        for (var innerRow = 0; innerRow < ${c}; innerRow++) {\n            let inputRow = tileRowB + innerRow;\n            let inputCol = tileCol;\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);\n        }\n        kStart = kStart + ${s};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        ${((e,t,n,i)=>{if(e)return`\n      for (var k = 0; k < ${i}; k++) {\n        let BCached0 = mm_Bsub[k][tileCol];\n        let ACached0 = mm_Asub[k][localRow];\n        for (var i = 0; i < ${n}; i++) {\n          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);\n        }\n      }`;{let e="",s="";for(let n=0;n<t;n++)e+=`let BCached${n} = mm_Bsub[k * ${t} + ${n}][tileCol];`,s+=`acc[i] = fma(BCached${n}, vec4<f32>(ACached[${n}]), acc[i]);`;return`\n      for (var k = 0; k < ${i/t}; k++) {\n        ${e}\n        for (var i = 0; i < ${n}; i++) {\n          let ACached = mm_Asub[tileRow + i][k];\n          ${s}\n        }\n      }`}})(i,p,f,s)}\n        workgroupBarrier();\n    }\n\n    for (var innerRow = 0; innerRow < ${f}; innerRow++) {\n        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n    }\n  }`}const Q=e=>e?"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol);\n        ":"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRowStart + inputRow,\n          kStart + inputCol);\n        ";function Z(e,n,i=!1,s=32,r=!1,a=32,o=!1,u=!1){const d=e[1]*n[1],l=e[0]*n[0],h=i?d:s,p=i?s:d;t.util.assert(p%n[1]==0&&h%n[0]==0&&s%n[1]==0,(()=>`tileAHight ${p} must be divisible by workgroupSize[1]${n[1]}, tileAWidth ${h} must be divisible by workgroupSize[0]${n[0]}, tileInner ${s} must be divisible by workgroupSize[1]${n[1]}`));const c=p/n[1],f=h/n[0],m=s/n[1],g=e[1],x=e[0],b=o?`\n      let localRow = i32(localId.y);\n      let localCol = i32(localId.x);\n      let globalRowStart = i32(workgroupId.y) * ${d};\n      let globalColStart = i32(workgroupId.x) * ${l};\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var inputRow = localRow; inputRow < ${p}; inputRow = inputRow + ${n[1]}) {\n          for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${n[0]}) {\n            ${Q(i)}\n          }\n        }\n        // Load one tile of B into local memory.\n        for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${n[1]}) {\n              for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${n[0]}) {\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n              kStart + inputRow,\n              globalColStart + inputCol);\n          }\n        }\n        kStart = kStart + ${s};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        var BCached : array<f32, ${x}>;\n        for (var k = 0; k < ${s}; k++) {\n          for (var inner = 0; inner < ${x}; inner++) {\n            BCached[inner] = mm_Bsub[k][localCol + inner * ${n[0]}];\n          }\n          for (var innerRow = 0; innerRow < ${g}; innerRow++) {\n            let ACached = ${i?`mm_Asub[k][localRow + innerRow * ${n[1]}];`:`mm_Asub[localRow + innerRow * ${n[1]}][k];`}\n            for (var innerCol = 0; innerCol < ${x}; innerCol++) {\n              acc[innerRow][innerCol] =\n                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n            }\n          }\n        }\n        workgroupBarrier();\n      }\n      for (var innerRow = 0; innerRow < ${g}; innerRow++) {\n        let gRow = globalRowStart + localRow + innerRow * ${n[1]};\n        for (var innerCol = 0; innerCol < ${x}; innerCol++) {\n          let gCol = globalColStart + localCol + innerCol * ${n[0]};\n          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n        }\n      }\n      `:`\n  let tileRow = i32(localId.y) * ${g};\n  let tileCol = i32(localId.x) * ${x};\n\n  let globalRow = i32(globalId.y) * ${g};\n  let globalCol = i32(globalId.x) * ${x};\n  let globalRowStart = i32(workgroupId.y) * ${d};\n\n  let tileRowA = i32(localId.y) * ${c};\n  let tileColA = i32(localId.x) * ${f};\n  let tileRowB = i32(localId.y) * ${m};\n  // Loop over shared dimension.\n  for (var t = 0; t < numTiles; t++) {\n    // Load one tile of A into local memory.\n    for (var innerRow = 0; innerRow < ${c}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${f}; innerCol++) {\n        let inputRow = tileRowA + innerRow;\n        let inputCol = tileColA + innerCol;\n        ${Q(i)}\n      }\n    }\n\n    // Load one tile of B into local memory.\n    for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${x}; innerCol++) {\n        let inputRow = tileRowB + innerRow;\n        let inputCol = tileCol + innerCol;\n        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n          kStart + inputRow,\n          globalCol + innerCol);\n      }\n    }\n    kStart = kStart + ${s};\n    workgroupBarrier();\n\n    // Compute acc values for a single thread.\n    var BCached : array<f32, ${x}>;\n    for (var k = 0; k < ${s}; k++) {\n      for (var inner = 0; inner < ${x}; inner++) {\n        BCached[inner] = mm_Bsub[k][tileCol + inner];\n      }\n\n      for (var innerRow = 0; innerRow < ${g}; innerRow++) {\n        ${(e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];")(i)}\n        for (var innerCol = 0; innerCol < ${x}; innerCol++) {\n          acc[innerRow][innerCol] =\n              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n        }\n      }\n    }\n\n    workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < ${g}; innerRow++) {\n    for (var innerCol = 0; innerCol < ${x}; innerCol++) {\n      mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n          acc[innerRow][innerCol]);\n    }\n  }\n  `;return`\n    var<workgroup> mm_Asub : array<array<f32, ${h}>, ${p}>;\n    var<workgroup> mm_Bsub : array<array<f32, ${l}>, ${s}>;\n\n    ${y()} {\n      let batch = ${r?"0":"i32(globalId.z)"};\n      let batchA = ${r||!u?"batch":"batch % uniforms.aShape[0]"};\n      let batchB = ${r||!u?"batch":"batch % uniforms.bShape[0]"};\n      let numTiles = ${r?`${Math.ceil(a/s)}`:`(uniforms.dimInner - 1) / ${s} + 1`};\n      var kStart = ${r?`i32(globalId.z) * ${a}`:"0"};\n\n      var acc : array<array<f32, ${x}>, ${g}>;\n\n      // Without this initialization strange values show up in acc.\n      for (var innerRow = 0; innerRow < ${g}; innerRow++) {\n        for (var innerCol = 0; innerCol < ${x}; innerCol++) {\n          acc[innerRow][innerCol] = 0.0;\n        }\n      }\n      ${b}\n    }\n  `}class J{constructor(e,t,n=!1,i=!1,s=null,r=null,a=null,o=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0]};const u=n?e[1]:e[2];if(this.isVec4=(u%4==0&&!n||t[1]%4==0&&n)&&t[2]%4==0&&!i,this.outputComponent=this.isVec4?4:1,this.isVectorA=1===t[1]&&!n,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workgroupSize=[32,1,1];else{const e=z(t[1],u,t[2],n);this.workgroupSize=e.workgroupSize,this.elementsPerThread=e.elementsPerThread}this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread);const d=null!=s,l=null!=a;d&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),this.sequentialAccessByThreads=o,this.transposeA=n,this.transposeB=i,this.addBias=d,this.activation=r,this.hasPreluActivationWeights=l,[this.fitAOuter,this.fitBOuter,this.fitInner]=this.getShapeFit(t[1],t[2],u),this.shaderKey=`matMulPacked_${this.elementsPerThread}_${n}_${i}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.sequentialAccessByThreads}`}getShapeFit(e,t,n){const i=this.workgroupSize[1]*this.elementsPerThread[1],s=this.workgroupSize[0]*this.elementsPerThread[0];!this.isVec4&&this.isVectorA?this.tileInner=4*this.workgroupSize[0]:this.tileInner=s;return[e%i==0,t%s==0,n%this.tileInner==0]}getUserCode(){const e=`\n      ${X(this.activation,this.hasPreluActivationWeights,this.isVec4)}\n      ${Y(this.addBias,this.activation,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1)}\n      ${this.isVec4?j(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,!0):this.isVectorA?function(e,n=!1){t.util.assert(1===e[1]&&1===e[2],(()=>`A linear work group size is required. But got ${e}.`));const i=4*e[0];return`\n    var<workgroup> mm_Asub : array<vec4<f32>, ${e[0]}>;\n\n    ${y()} {\n      let tileCol = i32(localId.x);\n      let globalCol = i32(globalId.x);\n      let globalRow = i32(globalId.y);\n\n      let numTiles = (uniforms.dimInner - 1) / ${i} + 1;\n      let batch = i32(globalId.z);\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      // Without this initialization strange values show up in acc.\n      var acc = 0.0;\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        let colA = t * ${i} + tileCol * 4;\n        mm_Asub[tileCol] = vec4<f32>(${(e=>e?"\n      mm_readA(batchA, colA, globalRow),\n      mm_readA(batchA, colA + 1, globalRow),\n      mm_readA(batchA, colA + 2, globalRow),\n      mm_readA(batchA, colA + 3, globalRow)\n  ":"\n      mm_readA(batchA, globalRow, colA),\n      mm_readA(batchA, globalRow, colA + 1),\n      mm_readA(batchA, globalRow, colA + 2),\n      mm_readA(batchA, globalRow, colA + 3)\n  ")(n)});\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ${i/4}; k++) {\n          let rowB = t * ${i} + k * 4;\n          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),\n                              mm_readB(batchB, rowB + 1, globalCol),\n                              mm_readB(batchB, rowB + 2, globalCol),\n                              mm_readB(batchB, rowB + 3, globalCol));\n\n          let ACached = mm_Asub[k];\n          acc = acc + dot(ACached, BCached);\n        }\n\n        workgroupBarrier();\n      }\n\n      mm_write(batch, globalRow, globalCol, acc);\n    }\n  `}(this.workgroupSize,this.transposeA):Z(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,this.sequentialAccessByThreads,!0)}\n    `;return e}}class ee{constructor(e,t=!1,n=!1,i=null,s=null,r=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize);const a=null!=i,o=null!=r;a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),this.transposeA=t,this.transposeB=n,this.addBias=a,this.activation=s,this.hasPreluActivationWeights=o,this.shaderKey=`matMulReduce_${this.activation}_${t}_${n}`}getUserCode(){var e;return`\n      ${X(this.activation,this.hasPreluActivationWeights)}\n      ${Y(this.addBias,this.activation,this.transposeA,this.transposeB)}\n      ${e=this.workgroupSize[0],`\n    var<workgroup> sumValues : array<f32, ${e}>;\n    ${y()} {\n      let coords = getOutputCoords();\n      let batch = coords[0];\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      let row = coords[1];\n      let col = coords[2];\n      var sum = 0.0;\n      let Length = uniforms.dimInner;\n      for (var k = i32(localId.x); k < Length; k = k + ${e}) {\n        let dataA = mm_readA(batchA, row, k);\n        let dataB = mm_readB(batchB, k, col);\n        sum = sum + dataA * dataB;\n      }\n      sumValues[localId.x] = sum;\n      workgroupBarrier();\n\n      for(var currentSize = ${e/2}u; currentSize > 1u;\n          currentSize = currentSize / 2u) {\n        if (localId.x < currentSize)\n        {\n          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (localId.x == 0u) {\n        sum = sumValues[0] + sumValues[1];\n        mm_write(batch, row, col, sum);\n      }\n    }\n  `}\n    `}}class te{constructor(e,t,n,i=!1,s=!1,r=null,a=null,o=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[16,8,1],this.outputShape=n,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(n[2]/this.workgroupSize[0]),Math.ceil(n[1]/this.workgroupSize[1]),n[0]];const u=null!=r;u&&this.variableNames.push("bias");const d=null!=o;d&&this.variableNames.push("preluActivationWeights"),this.transposeA=i,this.transposeB=s,this.addBias=u,this.activation=a,this.hasPreluActivationWeights=d,this.shaderKey=`matMulSmallOutputSize_${this.activation}_${i}_${s}`}getUserCode(){return`\n      ${X(this.activation,this.hasPreluActivationWeights)}\n      ${Y(this.addBias,this.activation,this.transposeA,this.transposeB)}\n      ${function(e){const t=e[1],n=e[0],i=t>n?t:n;return`\n  var<workgroup> mm_Asub : array<array<f32, ${i}>, ${t}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${n}>, ${i}>;\n\n  // If the output size is small for matrix multiplication, avoid to use vec4\n  // and handle some elements per thread to optimally utilize the ALU.\n  // Read data from global memory to registers firstly, then store them into\n  // shared memory, so it is instruction-Level parallelism for arithmetic\n  // operations and others handle IO operations between barrier api, makes ALU\n  // and load/store units work simultaneously, could improves the performance.\n  ${y()} {\n    let tileRow = i32(localId.y);\n    let tileCol = i32(localId.x);\n    let globalRow = i32(globalId.y);\n    let globalCol = i32(globalId.x);\n    let batch = i32(globalId.z);\n    let batchA = batch % uniforms.aShape[0];\n    let batchB = batch % uniforms.bShape[0];\n\n    // uniforms.dimInner should be greater than 0.\n    let numTiles = (uniforms.dimInner - 1) / ${i} + 1;\n    var acc = 0.0;\n\n    var globalColA = tileCol;\n    var globalRowB = 0;\n    var regA = mm_readA(batchA, globalRow, globalColA);\n    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n    globalColA = globalColA + ${i};\n    globalRowB = globalRowB + ${i};\n\n    for (var t = 0; t < numTiles; t = t + 1) {\n      mm_Asub[tileRow][tileCol] = regA;\n      mm_Bsub[2 * tileRow][tileCol] = regB0;\n      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;\n\n      workgroupBarrier();\n\n      regA = mm_readA(batchA, globalRow, globalColA);\n      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n      globalColA = globalColA + ${i};\n      globalRowB = globalRowB + ${i};\n\n      for (var k = 0; k < ${i}; k = k + 1) {\n        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];\n      }\n      workgroupBarrier();\n    }\n\n    mm_write(batch, globalRow, globalCol, acc);\n  }\n  `}(this.workgroupSize)}\n    `}}class ne{constructor(e,n,i=!1,s=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[8,8,1],this.atomic=!0,this.splitedDimInner=128,t.util.assert(1===e[0],(()=>"MatMulSplitKProgram only supports batch = 1.")),this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0,3]};const r=(i&&this.outputShape[1]%4==0||!i&&n%4==0)&&this.outputShape[2]%4==0;this.elementsPerThread=[4,4,this.splitedDimInner],this.outputComponent=r?4:1,r||(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=P(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],n],this.workgroupSize,this.elementsPerThread),this.transposeA=i,this.transposeB=s,this.shaderKey=`matMulSplitK_${i}_${s}_${this.elementsPerThread}_${this.outputComponent}`}getUserCode(){const e=this.outputComponent;return`\n      ${q(!1,this.transposeB,!1,!1,!1,e)}\n      fn mm_write(batch: i32, row : i32, col : i32, value : ${m(e)}) {\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n          let coords = vec3<i32>(batch, row, col);\n          let flatIndex = getOutputIndexFromCoords(coords);\n          // The problem is that we should initialize output to zero before using.\n          // Otherwise, the original value will be added to the result.\n          for (var i = 0; i < ${e}; i = i + 1) {\n            ${p("&result[flatIndex + i]",""+(e>1?"value[i]":"value"),"float32")}\n          }\n        }\n      }\n      ${4===e?j(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner):Z(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner)}\n    `}}class ie{constructor(e,t=null,n=null,i=null){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=null!=t,this.hasPreluActivationWeights=null!=i,this.activation=n,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`biasActivation_${n}`}getUserCode(){return`\n    ${X(this.activation,this.hasPreluActivationWeights)}\n    ${y("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        var value = getXByOutputIndex(index);\n        ${K(this.addBias,this.activation)}\n        setOutputAtIndex(index, value);\n      }\n    }\n    `}}class se{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="fill"}getUserCode(){return`\n    ${y("index")} {\n      if (index < uniforms.size) {\n        setOutputAtIndex(index, uniforms.value);\n      }\n    }\n  `}}function re(e){const{backend:n,attrs:i}=e,{shape:s,value:r}=i;let{dtype:a}=i;if(a=a||t.util.inferDtype(r),"string"===a){const e=t.util.getArrayFromDType(a,t.util.sizeFromShape(s));return e.fill(r),n.makeTensorInfo(s,a,e)}{const e=new se(s),t=[{type:"float32",data:[r]}];return n.runWebGPUProgram(e,[],a,t)}}const ae={kernelName:t.Fill,backendName:"webgpu",kernelFunc:re};function oe(e){const{inputs:n,attrs:i}=e,{x:s}=n,{shape:r}=i,a=t.util.sizeFromShape(s.shape),o=t.util.inferFromImplicitShape(r,a),u=t.util.sizeFromShape(o);return t.util.assert(a===u,(()=>`The new shape (${o}) has ${u} elements and the old shape (${s.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`)),e.backend.incRef(s.dataId),{dataId:s.dataId,shape:o,dtype:s.dtype}}const ue={kernelName:t.Reshape,backendName:"webgpu",kernelFunc:oe};function de({a:e,b:n,transposeA:i,transposeB:s,backend:r,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:u=0,activation:d=null}){const l=e.shape.length,h=n.shape.length,p=i?e.shape[l-2]:e.shape[l-1],c=s?n.shape[h-1]:n.shape[h-2],f=i?e.shape[l-1]:e.shape[l-2],m=s?n.shape[h-2]:n.shape[h-1],g=e.shape.slice(0,-2),x=n.shape.slice(0,-2),y=t.util.sizeFromShape(g),b=t.util.sizeFromShape(x),w=t.broadcast_util.assertAndGetBroadcastShape(e.shape.slice(0,-2),n.shape.slice(0,-2)).concat([f,m]);t.util.assert(p===c,(()=>`Error in matMul: inner shapes (${p}) and (${c}) of Tensors with shapes ${e.shape} and ${n.shape} and transposeA=${i} and transposeB=${s} must match.`));const S=i?[y,p,f]:[y,f,p],k=s?[b,m,c]:[b,c,m],C=oe({inputs:{x:e},backend:r,attrs:{shape:S}}),v=oe({inputs:{x:n},backend:r,attrs:{shape:k}}),I=[C,v],R=Math.max(y,b),$=[C,v],P=[{type:"int32",data:[f]},{type:"int32",data:[m]},{type:"int32",data:[p]}];let z,A;const N=[R,f,m];let D=t.env().get("WEBGPU_MATMUL_PROGRAM_TYPE");if(D<0){const e=t.env().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),n=e>0?e:r.thresholdToIncreaseWorkgroups,i=R*Math.ceil(f/32)*Math.ceil(m/32);D=i<=n||f<=8&&i<=2*n?R*f*m<=128?E.MatMulReduceProgram:1===R&&c>=2e3?E.MatMulSplitKProgram:E.MatMulSmallOutputSizeProgram:E.MatMulPackedProgram}switch(D){case E.MatMulReduceProgram:z=new ee(N,i,s,a,d,o);break;case E.MatMulSplitKProgram:if(A=re({backend:r,attrs:{shape:N,value:0,dtype:e.dtype}}),z=new ne(N,c,i,s),a||d){A=r.runWebGPUProgram(z,$,e.dtype,P,A);const t=new ie(A.shape,a,d,o);let n=null;const i=[A];a&&i.push(a),o&&i.push(o),"leakyrelu"===d&&(n=[{type:"float32",data:[u]}],t.uniforms+=" alpha : f32,");const s=r.runWebGPUProgram(t,i,A.dtype,n);I.push(A);const l=oe({inputs:{x:s},backend:r,attrs:{shape:w}});I.push(s);for(const e of I)r.disposeData(e.dataId);return l}break;case E.MatMulSmallOutputSizeProgram:z=new te(S,k,N,i,s,a,d,o);break;case E.MatMulPackedProgram:const t=r.adapterInfo.isIntel();z=new J(S,N,i,s,a,d,o,t);break;default:throw new Error(`Unsupported MatMulProgramType ${D}.`)}a&&$.push(a),o&&$.push(o),"leakyrelu"===d&&(P.push({type:"float32",data:[u]}),z.uniforms+=" alpha : f32,"),A=r.runWebGPUProgram(z,$,e.dtype,P,A);const T=oe({inputs:{x:A},backend:r,attrs:{shape:w}});I.push(A);for(const e of I)r.disposeData(e.dataId);return T}const le={kernelName:t._FusedMatMul,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{a:s,b:r,bias:a,preluActivationWeights:o}=t,{transposeA:u,transposeB:d,activation:l,leakyreluAlpha:h}=i;return de({a:s,b:r,transposeA:u,transposeB:d,backend:n,bias:a,preluActivationWeights:o,leakyreluAlpha:h,activation:l})}};class he{constructor(e,n,i){this.variableNames=["AReal","AImag","BReal","BImag"],this.workgroupSize=[128,1,1],this.size=!0,this.outputShape=t.backend_util.assertAndGetBroadcastShape(n,i),this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`binaryOpComplex_${e}`,this.op=e}getUserCode(){return`\n      fn binaryOpComplex(\n          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {\n        ${U(this.op,!1)}\n      }\n\n      ${y("index")} {\n        if(index < uniforms.size) {\n          let areal = getARealByOutputIndex(index);\n          let aimag = getAImagByOutputIndex(index);\n          let breal = getBRealByOutputIndex(index);\n          let bimag = getBImagByOutputIndex(index);\n          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));\n        }\n      }\n    `}}class pe{constructor(e,n,i){if(this.size=!0,this.variableNames=["A","B"],this.outputShape=t.backend_util.assertAndGetBroadcastShape(n,i),this.dispatchLayout=D(this.outputShape),this.op=e,this.useSharedMemoryWithA=n.length<=1&&i.length>1&&n[0]<128,this.useSharedMemoryWithB=i.length<=1&&n.length>1&&i[0]<128,this.useSharedMemoryWithA||this.useSharedMemoryWithB)this.outputComponent=1,this.variableComponents=[1,1],this.lastDimensionSize=this.useSharedMemoryWithB?i[0]:n[0],this.shaderKey=`binary_${e}_${this.lastDimensionSize}`,this.type="shared",this.workgroupSize=[256,1,1];else{const s=n.length>0&&n[n.length-1]%4==0,r=i.length>0&&i[i.length-1]%4==0;s&&r?(this.outputComponent=4,this.variableComponents=[4,4]):s&&(t.util.isScalarShape(i)||1===i[i.length-1])||r&&(t.util.isScalarShape(n)||1===n[n.length-1])?(this.outputComponent=4,this.variableComponents=s?[4,1]:[1,4]):(this.outputComponent=1,this.variableComponents=[1,1]),this.type="nonshared",this.shaderKey=`binary_${e}_${this.variableComponents}`,this.workgroupSize=[128,1,1]}this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.outputComponent,1,1])}getUserCode(){let e;const t=4===this.outputComponent?"vec4<f32>":"f32",n=`\n    fn binaryOperation(a : ${t}, b : ${t}) -> ${t} {\n      ${U(this.op,4===this.outputComponent)}\n    };\n    `;if("shared"===this.type){const t=this.lastDimensionSize>1?`coords[${this.outputShape.length-1}]`:"0",i=this.useSharedMemoryWithB?`let a = getAByOutputIndex(index);\n          let b = sharedBuf[${t}];`:`let a = sharedBuf[${t}];\n          let b = getBByOutputIndex(index);`;e=`\n        ${n}\n        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;\n        ${y("index")} {\n          // Fill in the shared memory buffer.\n          let localIndex = i32(localId.x);\n          if(localIndex < ${this.lastDimensionSize}) {\n            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB?"B":"A"}[localIndex]);\n          }\n          workgroupBarrier();\n\n          if(index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            ${i}\n            setOutputAtIndex(index, binaryOperation(a, b));\n          }\n        }\n        `}else e=`\n       ${n}\n       ${y("index")} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index * ${this.outputComponent});\n           let a = ${t}(getAByOutputCoords(coords));\n           let b = ${t}(getBByOutputCoords(coords));\n           setOutputAtIndex(index, binaryOperation(a, b));\n         }\n       }\n       `;return e}}function ce(e){const{inputs:t}=e,{x:n}=t;return e.backend.incRef(n.dataId),{dataId:n.dataId,shape:n.shape,dtype:n.dtype}}const fe={kernelName:t.Identity,backendName:"webgpu",kernelFunc:ce};function me(e){const{inputs:t,backend:n}=e,{real:i,imag:s}=t,r=n.makeTensorInfo(i.shape,"complex64"),a=n.tensorMap.get(r.dataId),o=ce({inputs:{x:i},backend:n}),u=ce({inputs:{x:s},backend:n});return a.complexTensorInfos={real:o,imag:u},r}const ge={kernelName:t.Complex,backendName:"webgpu",kernelFunc:me};class xe{constructor(e,t,n=""){this.variableNames=["A"],this.size=!0;this.workgroupSize=[128,1,1],this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.op=t,""!==n&&(this.uniforms=n),this.shaderKey=`unary_${t}`}getUserCode(){return`\n      fn unaryOperation(a : f32) -> f32 {\n        ${H(this.op,!1)}\n      }\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let a = getAByOutputIndex(index);\n          setOutputAtIndex(index, unaryOperation(a));\n        }\n      }\n      `}}function ye({opType:e,cpuKernelImpl:t,dtype:n}){return({inputs:i,backend:s})=>{const{x:r}=i,a=s,o=n||r.dtype;if(a.shouldExecuteOnCPU([r])&&null!=t){const e=a.tensorMap.get(r.dataId),n=t(e.values,o);return a.makeTensorInfo(r.shape,o,n)}const u=new xe(r.shape,e);return a.runWebGPUProgram(u,[r],o)}}function be({opType:e,cpuKernelImpl:n,supportsComplex:i=!1,dtype:s}){return({inputs:r,backend:a})=>{const{a:o,b:u}=r,d=a;if(i&&"complex64"===o.dtype){const n=d.tensorMap.get(o.dataId),i=d.tensorMap.get(u.dataId);let s,r;if(e!==O.MUL)[s,r]=[[n.complexTensorInfos.real,i.complexTensorInfos.real],[n.complexTensorInfos.imag,i.complexTensorInfos.imag]].map((n=>{const[i,s]=n,r={dataId:i.dataId,dtype:i.dtype,shape:o.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},l=new pe(e,o.shape,u.shape);return d.runWebGPUProgram(l,[r,a],t.upcastType(i.dtype,s.dtype))}));else{const e=new he(O.COMPLEX_MULTIPLY_REAL,o.shape,u.shape),t=new he(O.COMPLEX_MULTIPLY_IMAG,o.shape,u.shape),a=[{dataId:n.complexTensorInfos.real.dataId,dtype:n.complexTensorInfos.real.dtype,shape:o.shape},{dataId:n.complexTensorInfos.imag.dataId,dtype:n.complexTensorInfos.imag.dtype,shape:o.shape},{dataId:i.complexTensorInfos.real.dataId,dtype:i.complexTensorInfos.real.dtype,shape:u.shape},{dataId:i.complexTensorInfos.imag.dataId,dtype:i.complexTensorInfos.imag.dtype,shape:u.shape}];s=d.runWebGPUProgram(e,a,"float32"),r=d.runWebGPUProgram(t,a,"float32")}const a=me({inputs:{real:s,imag:r},backend:d});return d.disposeData(s.dataId),d.disposeData(r.dataId),a}const l=s||t.upcastType(o.dtype,u.dtype);if(("string"===o.dtype||"string"===u.dtype||d.shouldExecuteOnCPU([o,u]))&&null!=n){const e=d.tensorMap.get(o.dataId).values,i=d.tensorMap.get(u.dataId).values,s="string"===o.dtype?t.backend_util.fromUint8ToStringArray(e):e,r="string"===o.dtype?t.backend_util.fromUint8ToStringArray(i):i,[a,h]=n(o.shape,u.shape,s,r,l);return d.makeTensorInfo(h,l,a)}const h=new pe(e,o.shape,u.shape);return d.runWebGPUProgram(h,[o,u],l)}}function we(e){return(n,i,s,r,a)=>{const o=t.backend_util.assertAndGetBroadcastShape(n,i),u=o.length,d=t.util.computeStrides(o),l=t.util.sizeFromShape(o),h=t.util.getTypedArrayFromDType(a,l),p=n.length,c=i.length,f=t.util.computeStrides(n),m=t.util.computeStrides(i),g=t.backend_util.getBroadcastDims(n,o),x=t.backend_util.getBroadcastDims(i,o);if(g.length+x.length===0)for(let t=0;t<h.length;++t)h[t]=e(s[t%s.length],r[t%r.length]);else for(let n=0;n<h.length;++n){const i=t.util.indexToLoc(n,u,d),a=i.slice(-p);g.forEach((e=>a[e]=0));const o=t.util.locToIndex(a,p,f),l=i.slice(-c);x.forEach((e=>l[e]=0));const y=t.util.locToIndex(l,c,m);h[n]=e(s[o],r[y])}return[h,o]}}const Se=we(((e,t)=>e+t));const ke=we(((e,t)=>e&t));function Ce(e){return(n,i,s)=>{const r=t.util.getArrayFromDType(i,n.length);for(let t=0;t<n.length;++t)r[t]=e(n[t],s);return r}}const ve=Ce((e=>Math.ceil(e)));const Ie=we(((e,t)=>e===t?1:0)),Re=Ce((e=>Math.exp(e))),$e=Ce((e=>Math.expm1(e))),Pe=Ce((e=>Math.floor(e))),ze=we(((e,t)=>Math.floor(e/t)));const Ae=we(((e,t)=>e>t?1:0)),Ne=we(((e,t)=>e>=t?1:0)),De=we(((e,t)=>e<t?1:0)),Te=we(((e,t)=>e<=t?1:0));const Fe=Ce((e=>Math.log(e)));const _e=we(((e,t)=>Math.max(e,t))),Ee=we(((e,t)=>Math.min(e,t))),Le=we(((e,t)=>e*t));const We=we(((e,t)=>e!==t?1:0));function Be(e,t,n,i){const s=[];let r=0;const a=t.length-1+n.length,o=new Array(a).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const i=e[n],s=n===e.length-1?t:e[n+1].length;if(0===i.length)throw new Error("Ragged splits may not be empty");if(i[0]<0)throw new Error("Ragged splits must be non-negative");if(i[i.length-1]>s)throw new Error("Ragged splits must not point past values");for(let e=1;e<i.length;++e)if(i[e-1]>i[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,i);let u=1;for(let e=0;e<t.length-1;++e){u*=t[e];const n=t[e+1];for(let t=1;t<u+1;++t)o[e].push(t*n)}for(let i=0;i<e.length;++i){let a=e[i],u=e[i]+1;for(let e=0;e<n.length;++e){const i=n[e],s=e+t.length-1;if(s>=0){const e=o[s],t=e[e.length-1]-i[a];for(let e=a;e<u;++e)o[s].push(i[e+1]+t)}a=i[a],u=i[u]}u!==a&&(s.push([a,u]),r+=u-a)}return{outSplits:o,valueSlices:s,numValues:r}}function Oe(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let i=t;i<e.length;i++)n[t-1]*=e[i];return n}function Ue(e,n,i,s,r){const a=n.slice();a[0]=r;const o=t.util.getArrayFromDType(i,t.util.sizeFromShape(a)),u=e.length;return function(e,t,n,i,s,r){const a=Oe(t,2)[1],o=Oe(r,2)[1];let u=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<i;++t)s[u*o+t]=e[n*a+t];++u}}(e,n,s,0===u?0:u/n[0],o,a),[o,a]}const Me=2147483647;var Ve=t.backend_util.RowPartitionType;class Ge{constructor(e,n,i,s,r,a,o,u,d,l){this.shape=e,this.shapeShape=n,this.values=i,this.valuesShape=s,this.valuesDType=r,this.defaultValue=a,this.defaultValueShape=o,this.rowPartitionValues=u,this.rowPartitionValuesShapes=d,this.rowPartitionTypes=t.backend_util.getRowPartitionTypesHelper(l),this.raggedRank=t.backend_util.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Ve.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Ve.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Ve.VALUE_ROWIDS:return Ge.getMaxWidthValueRowID(t);case Ve.ROW_SPLITS:return Ge.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${Ve[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let i=0;i<t-1;++i){const t=e[i+1]-e[i];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,i=e[0],s=0;for(let r=1;r<t;++r){const t=e[r];t!==i&&(i=t,s=Math.max(r-n,s),n=r)}return Math.max(t-n,s)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return Xe(e,n)}calculateOutputSize(e){const n=this.valuesShape,i=this.defaultValueShape;t.backend_util.validateDefaultValueShape(i,n);const s=this.tensorShapeFromTensor(this.shape,this.shapeShape),r=t.backend_util.combineRaggedTensorToTensorShapes(this.raggedRank,s,n);r[0]<0&&(r[0]=e);for(let e=1;e<=this.raggedRank;++e)r[e]<0&&(r[e]=this.getMaxWidth(e));return r}calculateFirstParentOutputIndex(e,n,i){const s=Math.min(e,i),r=[];let a=0;for(let e=0;e<s;++e,a+=n)r.push(a);for(let t=s;t<e;++t)r.push(-1);return t.util.assert(r.length===e,(()=>"Final length of result must be equal to firstDimension.")),r}calculateOutputIndexRowSplit(e,t,n,i){const s=e.length,r=[];for(let a=0;a<s-1;++a){const s=e[a+1]-e[a];let o=Math.min(i,s),u=t[a];-1===u&&(o=0);for(let e=0;e<o;++e)r.push(u),u+=n;for(let e=0;e<s-o;++e)r.push(-1)}if(s>0&&r.length!==e[s-1])throw new Error("Invalid row split size.");return r}calculateOutputIndexValueRowID(e,t,n,i){const s=e.length,r=[];if(0===s)return[];let a=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let u=t[o];r.push(u);for(let d=1;d<s;++d){const s=e[d];if(s===o)u>=0&&(++a,a<i?u+=n:u=-1);else{if(a=0,o=s,s>=t.length)throw new Error(`Got nextValueRowId=${s} which is not less than ${t.length}`);u=t[s]}r.push(u)}if(r.length!==e.length)throw new Error("Invalid row ids.");return r}calculateOutputIndex(e,t,n,i){const s=this.getRowPartitionTensor(e),r=this.getRowPartitionTypeByDimension(e);switch(r){case Ve.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,n,i);case Ve.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,n,i);default:throw new Error(`Unsupported partition type: ${Ve[r]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case Ve.FIRST_DIM_SIZE:return e[0];case Ve.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Ve.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Ve[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),n=this.calculateOutputSize(e),i=new Array(this.raggedRank+1);i[i.length-1]=1;for(let e=i.length-2;e>=0;--e)i[e]=i[e+1]*n[e+1];const s=Xe(n,!1),r=t.util.getArrayFromDType(this.valuesDType,t.util.sizeFromShape(s));if(i[0]*n[0]>0){let t=this.calculateFirstParentOutputIndex(e,i[0],n[0]);for(let e=1;e<=this.raggedRank;++e){t=this.calculateOutputIndex(e-1,t,i[e],n[e])}this.setOutput(this.raggedRank,t,r,s)}return[s,r]}setOutput(e,n,i,s){if(0===i.length)return;const r=this.values,a=i;let o=s.slice();o=o.slice(e+1);const u=t.util.sizeFromShape(o),d=n.length;let l=this.defaultValue;if(l.length!==u&&1!==l.length){const e=this.defaultValueShape;t.tidy((()=>{const n=t.reshape(l,e),i=t.broadcastTo(n,o);l=i.dataSync()}))}let h=0,p=0,c=0;for(let e=0;e<=d;++e){let t=e<d?n[e]:-1;if(t!==c){if(p<c){const e=r.subarray(h*u);He(a.subarray(p*u),e,(c-p)*u)}if(e>=d){const e=i.length;t=Math.floor(e/u)}if(t>c)if(1===this.defaultValue.length)a.subarray(c*u,t*u).fill(this.defaultValue[0]),c=t;else for(;t>c;){He(a.slice(c*u),l,u),++c}t<0?(h=e+1,p=c):(h=e,p=c,c=p+1)}else++c}}}function He(e,t,n){for(let i=0;i<n;i++)e[i]=t[i]}function Xe(e,t){const n=[];for(let i of e){if(i<0){if(!t)throw new Error(`Dimension ${i} must be >= 0`);if(i<-1)throw new Error(`Dimension ${i} must be >= -1`);i=-1}n.push(i)}return n}const Ke=Ce((e=>1/Math.sqrt(e)));const qe=Ce((e=>1/(1+Math.exp(-e))));const Ye=Ce((e=>Math.sqrt(e))),je=we(((e,t)=>{const n=e-t;return n*n})),Qe=Ce(((e,t)=>{const{pattern:n,replaceGlobal:i,rewrite:s}=t;return e.replace(new RegExp(n,i?"g":""),s)}));class Ze{constructor(e,n,i,s,r,a){this.separator=t.util.encodeString(e),this.nGramWidths=n,this.leftPad=t.util.encodeString(i),this.rightPad=t.util.encodeString(s),this.padWidth=r,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,i,s,r){for(let a=0;a<s;++a){const o=this.getPadWidth(r),u=Math.max(0,o-a),d=Math.max(0,o-(s-(a+1))),l=r-(u+d),h=t+(u>0?0:a-o);let p=0;p+=u*this.leftPad.length;for(let t=0;t<l;++t)p+=e[h+t].length;p+=d*this.rightPad.length;p+=(u+d+l-1)*this.separator.length,n[i+a]=new Uint8Array(p);const c=n[i+a];let f=0;const m=e=>e.forEach((e=>c[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<l-1;++t)m(e[h+t]),m(this.separator);if(l>0){m(e[h+l-1]);for(let e=0;e<d;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<d-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,n){const i=e.length,s=n.length;if(s>0){let e=n[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let t=1;t<s;++t){let s=n[t]>=e;if(s=s&&n[t]<=i,!s)throw new Error(`Invalid split value ${n[t]}, must be in [${e}, ${i}]`);e=n[t]}if(e!==i)throw new Error(`Last split value must be data size. Expected ${i}, got ${e}`)}const r=s-1,a=t.util.getArrayFromDType("int32",s);if(0===i||0===s){const e=new Array(i);for(let e=0;e<=r;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=r;++e){const t=n[e]-n[e-1];let i=0;this.nGramWidths.forEach((e=>{i+=this.getNumNGrams(t,e)})),this.preserveShort&&t>0&&0===i&&(i=1),a[e]=a[e-1]+i}const o=new Array(a[r]);for(let t=0;t<r;++t){const i=n[t];let s=a[t];if(this.nGramWidths.forEach((r=>{const a=n[t+1]-n[t],u=this.getNumNGrams(a,r);this.createNGrams(e,i,o,s,u,r),s+=u})),this.preserveShort&&s===a[t]){const r=n[t+1]-n[t];if(0===r)continue;const a=r+2*this.padWidth,u=1;this.createNGrams(e,i,o,s,u,a)}}return[o,a]}}function Je(e,t,n,i){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)i.push(e.subarray(t,t+1));return}if(1===t.length){const s=t[0];let r=e.indexOf(s);for(;-1!==r;){const t=e.subarray(0,r);n&&0===t.length||i.push(t),r=(e=e.subarray(r+1)).indexOf(s)}return void(n&&0===e.length||i.push(e))}let s=0;for(let r=0;r<e.length+1;r++)if(r===e.length||-1!==t.indexOf(e[r])){const t=e.subarray(s,r);n&&0===t.length||i.push(t),s=r+1}}const et=we(((e,t)=>e-t));const tt=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function nt(e,n,i=0,s=e.length-1){for(;s>i;){if(s-i>600){const t=s-i+1,r=n-i+1,a=Math.log(t),o=.5*Math.exp(2*a/3),u=.5*Math.sqrt(a*o*(t-o)/t)*Math.sign(r-t/2);nt(e,n,Math.max(i,Math.floor(n-r*o/t+u)),Math.min(s,Math.floor(n+(t-r)*o/t+u)))}const r=e[n];let a=i,o=s;for(t.util.swap(e,i,n),tt(e[s],r)>0&&t.util.swap(e,i,s);a<o;){for(t.util.swap(e,a,o),a++,o--;tt(e[a],r)<0;)a+=1;for(;tt(e[o],r)>0;)o-=1}0===tt(e[i],r)?t.util.swap(e,i,o):(o+=1,t.util.swap(e,o,s)),o<=n&&(i=o+1),n<=o&&(s=o-1)}}var it={__proto__:null,addImpl:Se,bincountImpl:function(e,n,i,s,r){const a=t.util.sizeFromShape(s),o=t.util.makeZerosTypedArray(r,i);for(let t=0;t<e.length;t++){const i=e[t];if(i<0)throw new Error("Input x must be non-negative!");i>=r||(o[i]+=a>0?n[t]:1)}return o},bincountReduceImpl:function(e,n,i,s=!1){const r=e.shape[0],a=e.shape[1],o=t.buffer([r,i],n.dtype);for(let t=0;t<r;t++)for(let r=0;r<a;r++){const a=e.get(t,r);if(a<0)throw new Error("Input x must be non-negative!");a>=i||(s?o.set(1,t,a):n.size>0?o.set(o.get(t,a)+n.get(t,r),t,a):o.set(o.get(t,a)+1,t,a))}return o},bitwiseAndImpl:ke,castImpl:function(e,n,i,s){if("int32"===s){return[n,"int32",Int32Array.from(e)]}if("bool"===s){const s=t.util.toTypedArray([0],i),[r,a]=we(((e,t)=>e!==t?1:0))(n,[],e,s,"bool");return[a,"bool",r]}throw new Error(`Error in Cast: failed to cast ${i} to ${s}`)},ceilImpl:ve,concatImpl:function(e,n,i,s){const r=t.util.getArrayFromDType(i,t.util.sizeFromShape(n));if(s&&"string"!==i){let n=0;e.forEach((e=>{const i=t.util.sizeFromShape(e.shape);r.set(e.vals,n),n+=i}))}else{let s=0;e.forEach((e=>{const a="string"===i?t.backend_util.fromUint8ToStringArray(e.vals):e.vals;let o=0;for(let t=0;t<e.shape[0];++t){const i=t*n[1]+s;for(let t=0;t<e.shape[1];++t)r[i+t]=a[o++]}s+=e.shape[1]}))}return r},equalImpl:Ie,expImpl:Re,expm1Impl:$e,floorDivImpl:ze,floorImpl:Pe,gatherNdImpl:function(e,n,i,s,r,a,o,u,d){const l=t.buffer([s,a],i);for(let t=0;t<s;t++){const i=[];let s=0;for(let n=0;n<r;n++){const a=e[t*r+n];s+=a*o[n],i.push(a)}if(s<0||s>=d/a)throw new Error(`Invalid indices: ${i} does not index into ${u}`);for(let e=0;e<a;e++)l.values[t*a+e]=n.get(...n.indexToLoc(s*a+e))}return l},gatherV2Impl:function(e,n,i){const s=t.buffer(i,e.dtype);for(let t=0;t<s.size;++t){const i=s.indexToLoc(t).slice(),r=i[0],a=i[2],o=n.locToIndex([r,a]);i[2]=n.values[o];const u=e.locToIndex(i);0<=u&&u<e.values.length&&(s.values[t]=e.values[u])}return s},greaterEqualImpl:Ne,greaterImpl:Ae,lessEqualImpl:Te,lessImpl:De,linSpaceImpl:function(e,n,i){const s=(n-e)/(i-1),r=t.util.makeZerosTypedArray(i,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r},logImpl:Fe,maxImpl:function(e,n,i,s){const r=t.util.getTypedArrayFromDType(s,t.util.sizeFromShape(i));for(let t=0;t<r.length;++t){const i=t*n;let s=e[i];for(let t=0;t<n;++t){const n=e[i+t];(Number.isNaN(n)||n>s)&&(s=n)}r[t]=s}return r},maximumImpl:_e,minimumImpl:Ee,multiplyImpl:Le,negImpl:function(e,n,i){const s=t.util.createScalarValue(-1,i);return Le([],n,s,e,i)},notEqualImpl:We,prodImpl:function(e,n,i,s){const[r,a]=t.backend_util.computeOutAndReduceShapes(e,s),o=t.upcastType(n,"int32"),u=t.util.makeZerosTypedArray(t.util.sizeFromShape(r),o),d=t.util.sizeFromShape(a);for(let e=0;e<u.length;++e){const t=e*d;let n=1;for(let e=0;e<d;++e)n*=i[t+e];u[e]=n}return{outVals:u,outShape:r,outDtype:o}},raggedGatherImpl:function(e,n,i,s,r,a,o,u){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===n[0].length)throw new Error("Split tensors must not be scalars");if(function(e,n,i){e.forEach(((e,s)=>{if(e<0||e>=i){const r=t.util.indexToLoc(s,n.length,t.util.computeStrides(n)).join(",");throw new Error(`indices[${r}] = ${e} is not in [0, ${i})`)}}))}(a,o,n[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const d=s[0],{outSplits:l,valueSlices:h,numValues:p}=Be(a,o,e,d),c=function(e){const n=[];for(let i=0;i<e.length;++i){const s=e[i].length,r=t.util.getArrayFromDType("int32",s);n.push(r),e[i].forEach(((e,t)=>r[t]=e))}return n}(l),f=Ue(i,s,r,h,p);return[c,f[0],f[1]]},raggedRangeImpl:function(e,n,i,s,r,a,o){if(n.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const u=0===n.length,d=0===r.length,l=0===o.length,h=[];u||h.push(n[0]),d||h.push(r[0]),l||h.push(o[0]);for(let e=1;e<h.length;++e)if(h[e]!==h[e-1])throw new Error("starts, limits, and deltas must have the same shape");const p=0===h.length?1:h[0],c=t.util.getArrayFromDType("int32",p+1);c[0]=0;for(let t=0;t<p;++t){const n=u?e[0]:e[t],i=d?s[0]:s[t],r=l?a[0]:a[t];if(0===r)throw new Error("Requires delta != 0");let o;if(r>0&&i<n||r<0&&i>n)o=0;else if(o=Math.ceil(Math.abs((i-n)/r)),o>Me)throw new Error("Requires ((limit - start) / delta) <= 2147483647");c[t+1]=c[t]+o}const f=c[p],m=t.util.getArrayFromDType(i,f);let g=0;for(let t=0;t<p;++t){const n=c[t+1]-c[t];let i=u?e[0]:e[t];const s=l?a[0]:a[t];for(let e=0;e<n;++e)m[g++]=i,i+=s}return[c,m]},raggedTensorToTensorImpl:function(e,t,n,i,s,r,a,o,u,d){return new Ge(e,t,n,i,s,r,a,o,u,d).compute()},rangeImpl:function(e,n,i,s){if(e===n||e<n&&i<0||n<e&&i>1)return t.util.makeZerosTypedArray(0,s);const r=Math.abs(Math.ceil((n-e)/i)),a=t.util.makeZerosTypedArray(r,s);n<e&&1===i&&(i=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+i;return a},rsqrtImpl:Ke,scatterImpl:function(e,n,i,s,r,a,o,u,d,l){const h=[s/r,r],p=e.values,c=n.values;if(0===s)return t.buffer(i,n.dtype);const f=d instanceof t.TensorBuffer?d:t.buffer(h,n.dtype);"string"==typeof d||"number"==typeof d?f.values.fill(d):"boolean"==typeof d&&f.values.fill(+d);for(let e=0;e<a;e++){const t=[];let a=0;for(let n=0;n<o;n++){const i=p[e*o+n];t.push(i),a+=i*u[n]}if(a<0||a>=s/r)throw new Error(`Invalid indices: ${t} does not index into ${i}`);for(let t=0;t<r;t++)l?f.values[a*r+t]+=c[e*r+t]:f.values[a*r+t]=0===n.rank?c[0]:c[e*r+t]}return f},sigmoidImpl:qe,simpleAbsImpl:function(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t},sliceImpl:function(e,n,i,s,r){const a=t.slice_util.isSliceContinous(s,n,i),o=t.util.sizeFromShape(i),u=t.util.computeStrides(s);if(a){const i=t.slice_util.computeFlatOffset(n,u);return"string"===r?e.slice(i,i+o):e.subarray(i,i+o)}const d="string"===r?t.backend_util.fromUint8ToStringArray(e):e,l=t.buffer(s,r,d),h=t.buffer(i,r);for(let e=0;e<h.size;++e){const t=h.indexToLoc(e),i=t.map(((e,t)=>e+n[t]));h.set(l.get(...i),...t)}return"string"===r?t.backend_util.fromStringArrayToUint8(h.values):h.values},sparseFillEmptyRowsImpl:function(e,n,i,s,r,a,o){const u=n[0],d=a[0],l=new Array(d),h=new Array(u),p=n[1];if(0===d){if(0!==u)throw new Error(t.backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(u));return[t.util.getArrayFromDType(i,0),[0,p],t.util.getArrayFromDType(r,0),l,h]}let c=!0,f=0;const m=new Array(d).fill(0);for(let n=0;n<u;++n){const i=e[n*p];if(i<0)throw new Error(t.backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(n,i));if(i>=d)throw new Error(t.backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(n,i,d));++m[i],c=c&&i>=f,f=i}let g=!0;for(let e=0;e<d;++e){const t=0===m[e];l[e]=t,g=g&&!t,m[e]=Math.max(m[e],1),e>0&&(m[e]+=m[e-1])}if(g&&c){const t=e,n=s;for(let e=0;e<u;++e)h[e]=e;return[t,[u,p],n,l,h]}{const n=m[d-1],a=t.util.getArrayFromDType(i,n*p),c=t.util.getArrayFromDType(r,n),f=new Array(d).fill(0);for(let t=0;t<u;++t){const n=e[t*p],i=f[n],r=(0===n?0:m[n-1])+i;f[n]++;for(let n=0;n<p;++n)a[r*p+n]=e[t*p+n];c[r]=s[t],h[t]=r}for(let e=0;e<d;++e){if(0===f[e]){const t=0===e?0:m[e-1];a[t*p+0]=e;for(let e=1;e<p;++e)a[t*p+e]=0;c[t]=o}}return[a,[n,p],c,l,h]}},sparseReshapeImpl:function(e,n,i,s,r){const a=t.util.sizeFromShape(s),o=n[0],u=r.length,d=[];let l=1,h=-1;for(let e=0;e<u;++e){const n=r[e];if(-1===n){if(-1!==h)throw new Error(t.backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(h,e));h=e,d.push(1)}else{if(n<0)throw new Error(t.backend_util.getSparseReshapeNegativeOutputDimErrorMessage(e,n));l*=n,d.push(n)}}if(-1!==h){if(l<=0)throw new Error(t.backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(a/l);if(l*e!==a)throw new Error(t.backend_util.getSparseReshapeInputOutputMultipleErrorMessage(s,d));d[h]=e}if(t.util.sizeFromShape(d)!==a)throw new Error(t.backend_util.getSparseReshapeInputOutputMismatchErrorMessage(s,d));const p=s.length,c=[];if(p>0){c[p-1]=1;for(let e=p-2;e>=0;--e)c[e]=c[e+1]*s[e+1]}const f=[];if(u>0){f[u-1]=1;for(let e=u-2;e>=0;--e)f[e]=f[e+1]*d[e+1]}const m=t.util.getArrayFromDType(i,o*u);for(let t=0;t<o;++t){let n=0;for(let i=0;i<p;++i)n+=e[t*p+i]*c[i];for(let e=0;e<u;++e)m[t*u+e]=Math.trunc(n/f[e]),n%=f[e]}return[m,[o,u],d]},sparseSegmentReductionImpl:function(e,n,i,s,r,a=!1,o=0){const u=s.length,d=[n[0],e.length/n[0]],l=d[1],h=u>0?r[u-1]+1:0;if(h<0)throw new Error(t.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const p=n.slice();p[0]=h;const c=p.reduce(((e,t)=>e*t),1),f=t.util.getArrayFromDType(i,c);if(0===u)return h>0&&f.fill(o),[f,p];if(h<=0)throw new Error(t.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=0,g=1,x=0,y=r[m];for(;;){let n=0;if(g<u){if(n=r[g],y===n){++g;continue}if(y>=n)throw new Error(t.backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=h)throw new Error(t.backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,h));y>x&&f.fill(o,x*l,y*l);for(let n=m;n<g;++n){const i=s[n];if(i<0||i>=d[0])throw new Error(t.backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(n,s[n],d[0]));for(let t=0;t<l;t++)f[y*l+t]+=e[i*l+t]}if(a)for(let e=0;e<l;e++)f[y*l+e]/=g-m;if(m=g,++g,x=y+1,y=n,g>u)break}return x<h&&f.fill(o,x*l,h*l),[f,p]},sqrtImpl:Ye,squaredDifferenceImpl:je,staticRegexReplaceImpl:Qe,stridedSliceImpl:function(e,n,i,s){const r=t.buffer(e,n.dtype);for(let e=0;e<r.size;e++){const t=r.indexToLoc(e),a=new Array(t.length);for(let e=0;e<a.length;e++)a[e]=t[e]*i[e]+s[e];r.set(n.get(...a),...t)}return r},stringNGramsImpl:function(e,t,n,i,s,r,a,o){return new Ze(n,i,s,r,a,o).compute(e,t)},stringSplitImpl:function(e,n,i){const s=e.length,r=[];let a=0,o=0;const u=new Array(s);for(let t=0;t<s;++t){const s=r.length;Je(e[t],n,i,r);const d=r.length-s;u[t]=d,a+=d,o=Math.max(o,d)}const d=t.util.getArrayFromDType("int32",2*a),l=new Array(a),h=[s,o];let p=0;for(let e=0;e<s;++e)for(let t=0;t<u[e];++t)d[2*p]=e,d[2*p+1]=t,l[p]=r[p],++p;return[d,l,h]},stringToHashBucketFastImpl:function(e,n){const i=t.util.getArrayFromDType("int32",e.length);for(let s=0;s<e.length;++s)i[s]=t.util.fingerPrint64(e[s]).modulo(n).getLowBitsUnsigned();return i},subImpl:et,tileImpl:function(e,n){const i=new Array(e.rank);for(let t=0;t<i.length;t++)i[t]=e.shape[t]*n[t];const s=t.buffer(i,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),i=new Array(e.rank);for(let t=0;t<i.length;t++)i[t]=n[t]%e.shape[t];const r=e.locToIndex(i);s.values[t]=e.values[r]}return s},topKImpl:function(e,n,i,s,r){const a=n[n.length-1],[o,u]=[e.length/a,a],d=t.util.getTypedArrayFromDType(i,o*s),l=t.util.getTypedArrayFromDType("int32",o*s);for(let t=0;t<o;t++){const n=t*u,i=e.subarray(n,n+u);let a=new Array(i.length);i.forEach(((e,t)=>a[t]={value:e,index:t})),s<a.length&&(nt(a,s),a=a.slice(0,s)),r&&a.sort(tt);const o=t*s,h=d.subarray(o,o+s),p=l.subarray(o,o+s);for(let e=0;e<s;e++)h[e]=a[e].value,p[e]=a[e].index}const h=n.slice();return h[h.length-1]=s,[t.buffer(h,i,d),t.buffer(h,"int32",l)]},transposeImpl:function(e,n,i,s,r){const a=n.length,o=t.util.sizeFromShape(n),u=t.util.computeStrides(n),d=t.util.computeStrides(r),l=t.util.getTypedArrayFromDType(i,t.util.sizeFromShape(r));for(let n=0;n<o;++n){const i=t.util.indexToLoc(n,a,u),r=new Array(i.length);for(let e=0;e<r.length;e++)r[e]=i[s[e]];l[t.util.locToIndex(r,a,d)]=e[n]}return l},uniqueImpl:function(e,n,i,s){const r=t.util.parseAxisParam(n,i)[0],a=[1,i[0],1];for(let e=0;e<r;e++)a[0]*=i[e];a[1]=i[r];for(let e=r+1;e<i.length;e++)a[2]*=i[e];const o=new Map,u=new Int32Array(i[r]),d=new t.TensorBuffer(a,s,e),l=[],h=1===a[0]&&1===a[2];for(let t=0;t<i[r];t++){let n;if(h)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let i=0;i<a[2];i++)e.push(d.get(n,t,i));n=e.join(",")}const i=o.get(n);if(null!=i)u[t]=i;else{const e=o.size;o.set(n,e),u[t]=e,l.push(t)}}const p=a.slice();p[1]=o.size;const c=new t.TensorBuffer(p,s);l.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let i=0;i<a[2];i++)c.set(d.get(n,e,i),n,t,i)}));const f=i.slice();return f[r]=p[1],{outputValues:c.values,outputShape:f,indices:u}}};const{addImpl:st,castImpl:rt,ceilImpl:at,concatImpl:ot,equalImpl:ut,expImpl:dt,expm1Impl:lt,floorImpl:ht,floorDivImpl:pt,gatherNdImpl:ct,gatherV2Impl:ft,greaterEqualImpl:mt,greaterImpl:gt,lessEqualImpl:xt,lessImpl:yt,logImpl:bt,maxImpl:wt,maximumImpl:St,minimumImpl:kt,multiplyImpl:Ct,negImpl:vt,notEqualImpl:It,prodImpl:Rt,rangeImpl:$t,rsqrtImpl:Pt,scatterImpl:zt,simpleAbsImpl:At,sliceImpl:Nt,stridedSliceImpl:Dt,stringNGramsImpl:Tt,subImpl:Ft,tileImpl:_t,topKImpl:Et,transposeImpl:Lt,uniqueImpl:Wt}=it,Bt=ye({opType:M.ABS,cpuKernelImpl:At}),Ot={kernelName:t.Abs,backendName:"webgpu",kernelFunc:Bt},Ut=ye({opType:M.ACOS}),Mt={kernelName:t.Acos,backendName:"webgpu",kernelFunc:Ut},Vt=ye({opType:M.ACOSH}),Gt={kernelName:t.Acosh,backendName:"webgpu",kernelFunc:Vt},Ht=be({opType:O.ADD,cpuKernelImpl:st,supportsComplex:!0}),Xt={kernelName:t.Add,backendName:"webgpu",kernelFunc:Ht};class Kt{constructor(e){this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e[0],this.variableNames=e.map(((e,t)=>`T${t}`)),this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}getUserCode(){const e=[];this.variableNames.forEach((t=>{e.push(`let v${t} = get${t}ByOutputCoords(coords);`)}));const t=this.variableNames.map((e=>`v${e}`)).join(" + ");return`\n      ${y("index")} {\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if (flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            ${e.join("\n        ")}\n            setOutputAtIndex(flatIndex, ${t});\n          }\n        }\n      }\n    `}}const qt={kernelName:t.AddN,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i}=e,s=n;if(1===s.length)return ce({inputs:{x:s[0]},backend:i});const r=s.map((e=>e.dtype)).reduce(((e,n)=>t.upcastType(e,n))),a=s.map((e=>e.shape)),o=new Kt(a);return i.runWebGPUProgram(o,s,r)}};class Yt{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[16,16,1];const n=new Array(e.length);for(let i=0;i<n.length;i++)n[i]=e[t[i]];this.outputShape=n,this.dispatchLayout={x:[0],y:[1]},this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize,[1,1,1]),this.shaderKey="transposeShared"}getUserCode(){t.util.assert(this.workgroupSize[0]===this.workgroupSize[1],(()=>`Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`));const e=this.workgroupSize[0];return`\n      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0]+1}>, ${this.workgroupSize[0]}>;\n      ${y()} {\n        var x = i32(workgroupId.x) * ${e} + i32(localId.x);\n        var y = i32(workgroupId.y) * ${e} + i32(localId.y);\n        let width = uniforms.outShape[0];\n        let height = uniforms.outShape[1];\n        if (x < width && y < height) {\n          tile[localId.y][localId.x] = f32(A[y * width + x]);\n        }\n        workgroupBarrier();\n\n        x = i32(workgroupId.y) * ${e} + i32(localId.x);\n        y = i32(workgroupId.x) * ${e} + i32(localId.y);\n        if (x < height && y < width) {\n          setOutputAtIndex((y * height + x), tile[localId.x]\n            [localId.y]);\n        }\n      }\n    `}}class jt{constructor(e,t){this.variableNames=["A"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0;const n=new Array(e.length);for(let i=0;i<n.length;i++)n[i]=e[t[i]];this.outputShape=n,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.newDim=t,this.shaderKey=`transpose_${t}`}getUserCode(){const e=g(this.outputShape.length),t=Qt(this.newDim);return`\n      ${y("index")} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(\n              ${e}(${t}), uniforms.aShape)]);\n          }\n        }\n      }\n    `}}function Qt(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=new Array(t);for(let t=0;t<e.length;t++)n[e[t]]=`coords.${x(t)}`;return n.join()}function Zt(e){const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{perm:a}=s,o=i,u=r.shape.length,d=new Array(u);for(let e=0;e<d.length;e++)d[e]=r.shape[a[e]];if(i.shouldExecuteOnCPU([r])){const e=o.tensorMap.get(r.dataId).values,t=Lt(e,r.shape,r.dtype,a,d);return i.makeTensorInfo(d,r.dtype,t)}if(2===r.shape.length&&t.util.arraysEqual(a,[1,0])){const e=new Yt(r.shape,a);return o.runWebGPUProgram(e,[r],r.dtype)}const l=new jt(r.shape,a);return o.runWebGPUProgram(l,[r],r.dtype)}const Jt={kernelName:t.Transpose,backendName:"webgpu",kernelFunc:Zt};class en{constructor(e,n,i){this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[e.batchSize,e.inSize];const[s]=t.backend_util.computeOutAndReduceShapes(this.inputShape,[1]);this.outputShape=0===s.length?[1]:s,e.inSize>=32768&&i>=512?this.workgroupSize=[512,1,1]:e.inSize>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=n,this.shaderKey=`reduce_${n}`}getUserCode(){let e="",t="0.0";const n=this.workgroupSize[0];"min"===this.reduceType||"max"===this.reduceType?(e=`\n         if (isnan(candidate)) {\n          bestValue = uniforms.NAN;\n         } else if (!isnan(bestValue) && candidate ${"min"===this.reduceType?"<":">"} bestValue)\n           {  bestValue = candidate; }`,t="f32(x[offset])"):"sum"===this.reduceType||"mean"===this.reduceType?e=" bestValue = bestValue + candidate; ":"prod"===this.reduceType?(e=" bestValue = bestValue * candidate; ",t="1.0"):"all"===this.reduceType?(e=" bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ",t="1.0"):"any"===this.reduceType&&(e=" bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ",t="0.0");const i="mean"===this.reduceType?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);";return`\n       fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n       }\n\n       ${`\n         var<workgroup> xBestValues : array<f32, ${n}>;\n       `}\n       fn getOffset(outputIndex : i32) -> i32 {\n         let outputCoords = getCoordsFromIndex(outputIndex);\n         let offset = ${1===this.outputShape.length?"outputCoords":"outputCoords[0]"} * uniforms.reduceSize;\n          return offset;\n       }\n       ${y("index")} {\n         let outputIndex = index / ${n};\n         let offset = getOffset(outputIndex);\n         var bestValue = ${t};\n         let Length = uniforms.reduceSize;\n         let WorkPerThread = DIV_CEIL(u32(Length), ${n}u);\n         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;\n             k = k + ${n}) {\n           let candidate = f32(x[offset + k]);\n           ${e}\n         }\n         xBestValues[localId.x] = bestValue;\n         workgroupBarrier();\n\n         var reduceSize = min(u32(Length), ${n}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            ${e}\n            xBestValues[localId.x] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (localId.x == 0u && outputIndex < uniforms.size) {\n          ${i}\n        }\n       }\n     `}}function tn(e,n,i,s,r){const a=e.shape.length,o=[],u=t.util.parseAxisParam(n,e.shape);let d=u;const l=t.backend_util.getAxesPermutation(d,a);let h=e;null!=l&&(h=Zt({inputs:{x:e},attrs:{perm:l},backend:r}),d=t.backend_util.getInnerMostAxes(d.length,a),o.push(h)),t.backend_util.assertAxesAreInnerMostDims(s,d,a);const[p,c]=t.backend_util.computeOutAndReduceShapes(h.shape,d);let f,m=p;if(i&&(m=t.backend_util.expandShapeToKeepDim(p,u)),"max"!==s&&"prod"!==s||!r.shouldExecuteOnCPU([h])){const n=t.util.sizeFromShape(c),i={windowSize:n,inSize:n,batchSize:t.util.sizeFromShape(h.shape)/n,outSize:1},a="mean"===s?"float32":t.sumOutType(e.dtype),u=[{type:"int32",data:[n]}],d=new en(i,s,r.device.limits.maxComputeWorkgroupSizeX),l=r.runWebGPUProgram(d,[h],a,u);o.push(l),f=oe({inputs:{x:l},attrs:{shape:m},backend:r})}else{const n=r.tensorMap.get(h.dataId).values;switch(s){case"max":const i=wt(n,t.util.sizeFromShape(c),m,e.dtype);f=r.makeTensorInfo(m,e.dtype,i);break;case"prod":const{outVals:a,outShape:o,outDtype:u}=Rt(h.shape,h.dtype,n,d);f=r.makeTensorInfo(o,u,a);break;default:throw new Error(`${s} CPU implementation is not yet supported.`)}}return o.forEach((e=>r.disposeData(e.dataId))),f}const nn={kernelName:t.All,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:s}=t,{keepDims:r,axis:a}=i;return tn(s,a,r,"all",n)}};const sn={kernelName:t.Any,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:s}=t,{keepDims:r,axis:a}=i;return tn(s,a,r,"any",n)}};class rn{constructor(e,n,i){this.workgroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0;const s=[n];this.op="min"===i?"<":">";const[r,a]=t.backend_util.computeOutAndReduceShapes(e,s);this.outputShape=0===r.length?[1]:r,this.dispatchLayout=D(this.outputShape),t.util.sizeFromShape(a)<32?(this.type="plain",this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize)):(this.type="shared",this.dispatch=P(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=e,this.shaderKey=`argMinMax_${this.op}_${this.type}`}getUserCode(){const e=this.workgroupSize[0],t=()=>1===this.inputShape.length?"uniforms.xShape":`uniforms.xShape.${x(this.inputShape.length-1)}`,n=()=>{let e="";if(1===this.outputShape.length)1!==this.inputShape.length&&(e+="outputCoords,");else for(let t=0;t<this.outputShape.length;t++)e+=`outputCoords.${x(t)},`;return e};if("shared"===this.type){return`\n      fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n      }\n\n      ${`\n      var<workgroup> xBestIndices : array<i32, ${e}>;\n      var<workgroup> xBestValues : array<f32, ${e}>;\n    `}\n\n      ${y("index")} {\n        let outputIndex = index / ${e};\n        let reduceLength = ${t()};\n\n        var bestIndex = i32(localId.x);\n        var bestValue = uniforms.infinityValue;\n        let outputCoords = getCoordsFromIndex(outputIndex);\n        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;\n            k = k + ${e}) {\n          let candidate = getX(${n()} k);\n          if (!isnan(candidate) && candidate ${this.op} bestValue) {\n            bestValue = candidate;\n            bestIndex = k;\n          }\n        }\n        xBestValues[localId.x] = bestValue;\n        xBestIndices[localId.x] = bestIndex;\n        workgroupBarrier();\n\n        var reduceSize = min(u32(reduceLength), ${e}u);\n        for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n            currentSize = reduceSize / 2u) {\n          let interval = DIV_CEIL(reduceSize, 2u);\n          if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              xBestValues[localId.x] = bestValue;\n              xBestIndices[localId.x] = xBestIndices[localId.x + interval];\n            }\n          }\n          reduceSize = interval;\n          workgroupBarrier();\n        }\n\n        if (localId.x == 0u && outputIndex < uniforms.size) {\n          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);\n        }\n      }\n    `}return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let outputCoords = getCoordsFromIndex(index);\n          var bestIndex = 0;\n          var bestValue = getX(${n()} 0);\n          let reduceLength = ${t()};\n          for (var i = 1; i < reduceLength; i++) {\n            let candidate = getX(${n()} i);\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              bestIndex = i;\n            }\n          }\n          setOutputAtIndexI32(index, bestIndex);\n        }\n      }\n      `}}const an={kernelName:t.ArgMax,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{axis:a}=s;let o=t.util.parseAxisParam(a,r.shape);const u=t.backend_util.getAxesPermutation(o,r.shape.length);let d=r;const l=[];null!=u&&(d=Zt({inputs:{x:r},backend:i,attrs:{perm:u}}),l.push(d),o=t.backend_util.getInnerMostAxes(o.length,d.shape.length)),t.backend_util.assertAxesAreInnerMostDims("argMax",[o[0]],d.shape.length);const h=new rn(d.shape,o[0],"max"),p=[{type:"float32",data:[Number.NEGATIVE_INFINITY]}],c=i.runWebGPUProgram(h,[d],"int32",p);return l.forEach((e=>i.disposeData(e.dataId))),c}};const on={kernelName:t.ArgMin,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{axis:a}=s;let o=t.util.parseAxisParam(a,r.shape);const u=t.backend_util.getAxesPermutation(o,r.shape.length);let d=r;const l=[];null!=u&&(d=Zt({inputs:{x:r},backend:i,attrs:{perm:u}}),l.push(d),o=t.backend_util.getInnerMostAxes(o.length,d.shape.length)),t.backend_util.assertAxesAreInnerMostDims("argMin",[o[0]],d.shape.length);const h=new rn(d.shape,o[0],"min"),p=[{type:"float32",data:[Number.POSITIVE_INFINITY]}],c=i.runWebGPUProgram(h,[d],"int32",p);return l.forEach((e=>i.disposeData(e.dataId))),c}},un=ye({opType:M.ASIN}),dn={kernelName:t.Asin,backendName:"webgpu",kernelFunc:un},ln=ye({opType:M.ASINH}),hn={kernelName:t.Asinh,backendName:"webgpu",kernelFunc:ln},pn=ye({opType:M.ATAN}),cn={kernelName:t.Atan,backendName:"webgpu",kernelFunc:pn},fn=be({opType:O.ATAN2}),mn={kernelName:t.Atan2,backendName:"webgpu",kernelFunc:fn},gn=ye({opType:M.ATANH}),xn={kernelName:t.Atanh,backendName:"webgpu",kernelFunc:gn};class yn{constructor(e){this.variableNames=["x"],this.uniforms="strides : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}getUserCode(){return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n\n          let xRCCorner = coords.yz * uniforms.strides;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          let value = getX(batch, xRCorner, xCCorner, d);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `}}class bn{constructor(e,t,n=!1,i=!1,s=!1){if(this.variableNames=["x"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workgroupSize=[128,1,1],this.size=!0,"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=n,this.flattenPositions=i,this.includeBatchIndex=s,this.shaderKey=`pool2D_${t}_${n}_${i}_${s}`}getUserCode(){let e;if("avg"===this.poolType)e="resultValue = resultValue + value; count = count + 1.0;";else if(this.computePositions){e=`let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ${this.flattenPositions?this.includeBatchIndex?"((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"wR * uniforms.filterDims.y + wC"};\n      }`}else e="resultValue = max(value, resultValue);";let t="resultValue";"avg"===this.poolType&&(t="resultValue / max(count, 1.0)");return`\n      ${y("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          ${this.computePositions?"var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;":`var resultValue = ${"avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)"};`}\n\n          var count = 0.0;\n          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {\n            let xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {\n              let xC = xCCorner + wC;\n              if (xC < 0 || xC >= uniforms.convDims.y) {\n                continue;\n              }\n\n              let value = getX(batch, xR, xC, d);\n              ${e}\n            }\n          }\n\n          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${t});`}\n        }\n      }\n    `}}class wn{constructor(e,t,n=!1,i=!1,s=!1){if(this.variableNames=["x"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,",this.workgroupSize=[128,1,1],this.size=!0,"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=n,this.flattenPositions=i,this.includeBatchIndex=s,this.shaderKey=`pool3D_${t}_${n}_${i}_${s}`}getUserCode(){let e;if("avg"===this.poolType)e="resultValue += value; count += 1.0;";else if(this.computePositions){e=`let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ${this.flattenPositions?this.includeBatchIndex?"(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC"};\n      }`}else e="resultValue = max(value, resultValue);";let t="resultValue";"avg"===this.poolType&&(t="resultValue / max(count, 1.0)");return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords.x;\n          let ch = coords.u;\n\n          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n          let xDCorner = xCorner.x;\n          let xRCorner = xCorner.y;\n          let xCCorner = xCorner.z;\n\n          ${this.computePositions?"var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;":`var resultValue = ${"avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)"};`}\n\n          var count = 0.0;\n          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {\n            let xD = xDCorner + wD;\n            if (xD < 0 || xD >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {\n              let xR = xRCorner + wR;\n              if (xR < 0 || xR >= uniforms.convDims.y) {\n                continue;\n              }\n\n              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {\n                let xC = xCCorner + wC;\n                if (xC < 0 || xC >= uniforms.convDims.z) {\n                  continue;\n                }\n\n                let value = getX(batch, xD, xR, xC, ch);\n                ${e}\n              }\n            }\n          }\n\n          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${t});`}\n        }\n      }\n    `}}function Sn(e){const{inputs:t,backend:n,attrs:i}=e,{x:s}=t,{reductionIndices:r,keepDims:a}=i;return tn(s,r,a,"max",n)}const kn={kernelName:t.Max,backendName:"webgpu",kernelFunc:Sn};function Cn(e){const{inputs:t,backend:n,attrs:i}=e,{x:s}=t,{keepDims:r,axis:a}=i;return tn(s,a,r,"mean",n)}const vn={kernelName:t.Mean,backendName:"webgpu",kernelFunc:Cn};function In(e,n,i,s){if(1===n.filterWidth&&1===n.filterHeight&&t.util.arraysEqual(n.inShape,n.outShape))return ce({inputs:{x:e},backend:s});if(n.filterWidth===n.inWidth&&n.filterHeight===n.inHeight&&1===n.batchSize&&"VALID"===n.padInfo.type){const r=e.shape.length,a=oe({inputs:{x:e},backend:s,attrs:{shape:[e.shape[r-3]*e.shape[r-2],e.shape[r-1]]}});let o;"avg"===i?o=Cn({inputs:{x:a},backend:s,attrs:{axis:0,keepDims:!1}}):(t.util.assert("max"===i,(()=>`Invalid pool type ${i}`)),o=Sn({inputs:{x:a},backend:s,attrs:{reductionIndices:0,keepDims:!1}}));const u=oe({inputs:{x:o},backend:s,attrs:{shape:n.outShape}});return s.disposeData(a.dataId),s.disposeData(o.dataId),u}let r;const a=[{type:"int32",data:[n.strideHeight,n.strideWidth]}];return 1===n.filterHeight&&1===n.filterWidth?r=new yn(n):("avg"===i?r=new bn(n,"avg"):(t.util.assert("max"===i,(()=>`Invalid pool type ${i}`)),r=new bn(n,"max")),a.push({type:"int32",data:[n.padInfo.top,n.padInfo.left]},{type:"int32",data:[n.dilationHeight,n.dilationWidth]},{type:"int32",data:[n.inHeight,n.inWidth]},{type:"int32",data:[n.effectiveFilterHeight,n.effectiveFilterWidth]})),s.runWebGPUProgram(r,[e],e.dtype,a)}const Rn={kernelName:t.AvgPool,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{filterSize:a,strides:o,pad:u,dimRoundingMode:d}=s;return In(r,t.backend_util.computePool2DInfo(r.shape,a,o,1,u,d),"avg",i)}};const $n={kernelName:t.AvgPool3D,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{filterSize:a,strides:o,pad:u,dataFormat:d,dimRoundingMode:l}=s,h=t.backend_util.computePool3DInfo(r.shape,a,o,[1,1,1],u,l,d),p=new wn(h,"avg"),c=[{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.padInfo.front,h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.inDepth,h.inHeight,h.inWidth]},{type:"int32",data:[h.effectiveFilterDepth,h.effectiveFilterHeight,h.effectiveFilterWidth]}];return i.runWebGPUProgram(p,[r],r.dtype,c)}};class Pn{constructor(e){this.variableNames=["dy"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, avgMultiplier : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool2DBackprop"}getUserCode(){return`\n      ${y("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n\n            dotProd = dotProd + dyValue * uniforms.avgMultiplier;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}class zn{constructor(e){this.variableNames=["dy"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool3DBackprop"}getUserCode(){return`\n      ${y("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              dotProd += dyValue * uniforms.avgMultiplier;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}const An={kernelName:t.AvgPool3DGrad,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{dy:r,input:a}=n,o=a,{filterSize:u,strides:d,pad:l,dimRoundingMode:h}=s,p=t.backend_util.computePool3DInfo(o.shape,u,d,1,l,h),c=new zn(p),f=1/(p.filterDepth*p.filterHeight*p.filterWidth),m=[{type:"int32",data:[p.strideDepth,p.strideHeight,p.strideWidth]},{type:"int32",data:[p.effectiveFilterDepth-1-p.padInfo.front,p.effectiveFilterHeight-1-p.padInfo.top,p.effectiveFilterWidth-1-p.padInfo.left]},{type:"int32",data:[p.effectiveFilterDepth,p.effectiveFilterHeight,p.effectiveFilterWidth]},{type:"int32",data:[p.outDepth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"float32",data:[f]}];return i.runWebGPUProgram(c,[r],o.dtype,m)}};const Nn={kernelName:t.AvgPoolGrad,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{dy:r,input:a}=n,o=a;_([r,a],"avgPoolGrad");const{filterSize:u,strides:d,pad:l}=s,h=t.backend_util.computePool2DInfo(o.shape,u,d,1,l),p=new Pn(h),c=1/(h.filterHeight*h.filterWidth),f=[{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.effectiveFilterHeight-1-h.padInfo.top,h.effectiveFilterWidth-1-h.padInfo.left]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]},{type:"int32",data:[h.effectiveFilterHeight,h.effectiveFilterWidth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]},{type:"float32",data:[c]}];return i.runWebGPUProgram(p,[r],o.dtype,f)}};const Dn={kernelName:t.BatchMatMul,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{a:s,b:r}=t,{transposeA:a,transposeB:o}=i;return de({a:s,b:r,transposeA:a,transposeB:o,backend:n})}};class Tn{constructor(e,t){this.variableNames=["source"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.rank=t.length,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.start=e,this.uniforms=`start : ${g(e.length)}, `,this.shaderKey="slice"}getUserCode(){const e=g(this.rank),t=function(e){if(1===e)return"sourceLoc";if(e<=6)return Fn.slice(0,e).map((e=>`sourceLoc.${e}`)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let n;n=1===this.start.length?this.outputShape.map(((e,t)=>"sourceLoc = uniforms.start + coords;")):this.outputShape.map(((e,t)=>`sourceLoc.${Fn[t]} = uniforms.start.${x(t)} + coords.${Fn[t]};`));return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          var sourceLoc : ${e};\n          let coords = getCoordsFromIndex(index);\n          ${n.join("\n")}\n          setOutputAtIndex(index, getSource(${t}));\n        }\n      }\n    `}}const Fn=["x","y","z","w","u","v"];function _n(e){const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{begin:a,size:o}=s,[u,d]=t.slice_util.parseSliceParams(r,a,o);if(t.slice_util.assertParamsValid(r,u,d),i.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=i.tensorMap.get(r.dataId),t=Nt(e.values,u,d,r.shape,r.dtype);return i.makeTensorInfo(d,r.dtype,t)}if(0===t.util.sizeFromShape(d))return i.makeTensorInfo(d,r.dtype,[]);const l=new Tn(u,d),h=[{type:"int32",data:u}];return i.runWebGPUProgram(l,[r],r.dtype,h)}const En={kernelName:t.Slice,backendName:"webgpu",kernelFunc:_n},Ln={kernelName:t.BatchToSpaceND,backendName:"webgpu",kernelFunc:e=>{const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{blockShape:a,crops:o}=s;t.util.assert(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet"));const u=a.reduce(((e,t)=>e*t)),d=t.backend_util.getReshaped(r.shape,a,u),l=t.backend_util.getPermuted(d.length,a.length),h=t.backend_util.getReshapedPermuted(r.shape,a,u),p=t.backend_util.getSliceBeginCoords(o,a.length),c=t.backend_util.getSliceSize(h,o,a.length),f=[],m=oe({inputs:{x:r},backend:i,attrs:{shape:d}}),g=Zt({inputs:{x:m},backend:i,attrs:{perm:l}}),x=oe({inputs:{x:g},backend:i,attrs:{shape:h}}),y=_n({inputs:{x:x},backend:i,attrs:{begin:p,size:c}});return f.push(m),f.push(g),f.push(x),f.forEach((e=>i.disposeData(e.dataId))),y}},Wn=`\n  fn bincount_write(index: i32, value: f32) {\n    ${p("&result[index]","value","float32")}\n  }\n`;class Bn{constructor(e,t,n=!1){this.outputShape=[],this.variableNames=["x"],this.uniforms="binCountSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.hasWeights=!0,this.binaryOutput=!1,this.outputShape=e,this.rank=e.length,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.binaryOutput=n,n&&(this.atomic=!1),this.hasWeights=t,this.hasWeights&&this.variableNames.push("w"),this.shaderKey=`bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`}getUserCode(){return`\n    ${this.binaryOutput?"\n  fn bincount_write(index: i32, value: f32) {\n    atomicStore(&result[index], bitcast<i32>(value));\n  }\n":Wn}\n  ${y("index")} {\n    ${1===this.rank?`if (index < uniforms.xShape) {\n      let indexVal = i32(getX(index));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${this.binaryOutput?1:this.hasWeights?"getW(index)":"1."};\n        bincount_write(indexVal, value);\n      }\n    }`:`let coord = getCoordsFromIndex(index);\n    if (coordsInBounds2D(coord, uniforms.xShape)) {\n      let indexVal = i32(getX(coord[0], coord[1]));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${this.binaryOutput?1:this.hasWeights?"getW(coord[0], coord[1])":"1."};\n        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);\n      }\n    }`}\n  }\n  `}}const On={kernelName:t.Bincount,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r,weights:a}=n,{size:o}=s,u=t.util.sizeFromShape(r.shape),d=t.util.sizeFromShape(a.shape)>0,l=[o],h=a.dtype,p=re({backend:i,attrs:{shape:l,value:0,dtype:h}}),c=new Bn([u],d),f=[{type:"int32",data:[o]}],m=d?[r,a]:[r];return i.runWebGPUProgram(c,m,h,f,p)}};class Un{constructor(e){this.outputShape=[],this.variableNames=["s0","s1"],this.uniforms="s0Size : i32, s1Size : i32, ",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="broadcastArgs"}getUserCode(){return`\n  ${y("index")} {\n    if (index < uniforms.size) {\n      var s0 = 1.0;\n      var s1 = 1.0;\n      let indexS0 = index - uniforms.size + uniforms.s0Size;\n      let indexS1 = index - uniforms.size + uniforms.s1Size;\n      if (indexS0 >= 0) {\n        s0 = getS0(indexS0);\n      }\n      if (indexS1 >= 0) {\n        s1 = getS1(indexS1);\n      }\n\n      if (s0 == 1.0) {\n        setOutputAtIndex(index, s1);\n      } else if (s1 == 1.0) {\n        setOutputAtIndex(index, s0);\n      } else if (s0 != s1) {\n        setOutputAtIndex(index, uniforms.NAN);\n      } else {\n        setOutputAtIndex(index, s0);\n      }\n    }\n  }\n  `}}const Mn={kernelName:t.BroadcastArgs,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i}=e,{s0:s,s1:r}=n;if(i.shouldExecuteOnCPU([s,r])){const e=i.tensorMap.get(s.dataId),n=i.tensorMap.get(r.dataId),a=e.values,o=n.values,u=t.backend_util.assertAndGetBroadcastShape(Array.from(a),Array.from(o));return i.makeTensorInfo([u.length],"int32",Int32Array.from(u))}const a=t.util.sizeFromShape(s.shape),o=t.util.sizeFromShape(r.shape),u=Math.max(a,o),d=new Un(u),l=[{type:"int32",data:[a]},{type:"int32",data:[o]}];return i.runWebGPUProgram(d,[s,r],"int32",l)}},Vn=be({opType:O.NOT_EQUAL,dtype:"bool",cpuKernelImpl:It}),Gn={kernelName:t.NotEqual,backendName:"webgpu",kernelFunc:Vn};function Hn(e){const{inputs:t,backend:n}=e,{input:i}=t;return ce({inputs:{x:n.tensorMap.get(i.dataId).complexTensorInfos.real},backend:n})}const Xn={kernelName:t.Real,backendName:"webgpu",kernelFunc:Hn};const Kn={kernelName:t.Cast,backendName:"webgpu",kernelFunc:function e(n){const{inputs:s,backend:r,attrs:a}=n,{x:o}=s,{dtype:u}=a;if("complex64"===u){if("complex64"===o.dtype)return ce({inputs:{x:o},backend:r});const t=i.zeros(o.shape),n=e({inputs:{x:o},backend:r,attrs:{dtype:"float32"}}),s=me({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeData(n.dataId),s}if("complex64"===o.dtype){const t=Hn({inputs:{input:o},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:u}});return r.disposeData(t.dataId),n}if(!t.util.hasEncodingLoss(o.dtype,u)){const e=ce({inputs:{x:o},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:u}}if(r.shouldExecuteOnCPU([o])){const e=r.tensorMap.get(o.dataId).values,[t,n,i]=rt(e,o.shape,o.dtype,u);return r.makeTensorInfo(t,n,i)}if("int32"===u)return function(e,t){const n=new xe(e.shape,M.TO_INT),i=t.runWebGPUProgram(n,[e],"int32");return{dataId:i.dataId,shape:i.shape,dtype:i.dtype}}(o,r);if("bool"===u){const e=r.makeTensorInfo([],"bool",t.util.getTypedArrayFromDType("bool",1)),n=Vn({inputs:{a:o,b:e},backend:r});return r.disposeData(e.dataId),n}throw new Error(`Error in Cast: failed to cast ${o.dtype} to ${u}`)}},qn=ye({opType:M.CEIL,cpuKernelImpl:at}),Yn={kernelName:t.Ceil,backendName:"webgpu",kernelFunc:qn};class jn{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workgroupSize=[64,1,1],this.outputComponent=4,this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}getUserCode(){return`\n      ${y("index")} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          var clampedValue = clamp(\n              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));\n          clampedValue = select(clampedValue, value, isnanVec4(value));\n          setOutputAtIndex(index, clampedValue);\n        }\n      }\n    `}}class Qn{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="clip"}getUserCode(){return`\n      ${y("index")} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          if (isnan(value)) {\n            setOutputAtIndex(index, value);\n            return;\n          }\n          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));\n        }\n      }\n    `}}const Zn={kernelName:t.ClipByValue,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{clipValueMin:a,clipValueMax:o}=s;let u;const d=[{type:"float32",data:[a]},{type:"float32",data:[o]}];return u=t.util.sizeFromShape(r.shape)%4==0?new jn(r.shape):new Qn(r.shape),i.runWebGPUProgram(u,[r],r.dtype,d)}};class Jn{constructor(e){this.outputShape=[],this.variableNames=["real","imag"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="complexAbs"}getUserCode(){return`\n    ${y("index")} {\n      if (index < uniforms.size) {\n        let re = abs(getRealByOutputIndex(index));\n        let im = abs(getImagByOutputIndex(index));\n        let mx = max(re, im);\n\n        // The length function in wgsl may be not underflow-safe on some GPUs.\n        // So the safe solution is to ensure underflow-safety in all cases.\n        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));\n      }\n    }\n  `}}function ei(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const ti={kernelName:t.ComplexAbs,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:i}=t,s=n.tensorMap.get(i.dataId),r=new Jn(i.shape),a=[ei(i,s.complexTensorInfos.real),ei(i,s.complexTensorInfos.imag)];return n.runWebGPUProgram(r,a,a[0].dtype)}};class ni{constructor(e){this.uniforms="",this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.backend_util.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`)),this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.offsetLength=e.length-1;for(let e=0;e<this.offsetLength;e++)this.uniforms+=`offset${e} : i32,`;this.shaderKey="concat"}getUserCode(){const e=[];if(this.offsetLength>0){e.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(let t=1;t<this.offsetLength;t++)e.push(`else if (yC < uniforms.offset${[t]}){ setOutputAtCoords(coords.x, coords.y, getT${t}(yR, yC - uniforms.offset${t-1})); }`);const t=this.offsetLength,n=this.offsetLength-1;e.push(`else { setOutputAtCoords(coords.x, coords.y, getT${t}(yR, yC - uniforms.offset${n})); }`)}else e.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return`\n      ${y("index")} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            let yR = coords.x;\n            let yC = coords.y;\n\n            ${e.join("\n        ")}\n          }\n        }\n      }\n    `}}function ii(e){const{inputs:t,backend:n}=e,{input:i}=t;return ce({inputs:{x:n.tensorMap.get(i.dataId).complexTensorInfos.imag},backend:n})}const si={kernelName:t.Imag,backendName:"webgpu",kernelFunc:ii};function ri(e,n,i){const s=e[0].dtype;if("complex64"===s){const t=e.map((e=>Hn({inputs:{input:e},backend:i}))),s=e.map((e=>ii({inputs:{input:e},backend:i}))),r=ri(t,n,i),a=ri(s,n,i),o=me({inputs:{real:r,imag:a},backend:i});return t.forEach((e=>i.disposeData(e.dataId))),s.forEach((e=>i.disposeData(e.dataId))),i.disposeData(r.dataId),i.disposeData(a.dataId),o}let r=i.shouldExecuteOnCPU(e);if("string"===s&&(r=!0),r){const r=e.map((e=>{const s=t.util.sizeFromShape(e.shape.slice(n));return oe({inputs:{x:e},backend:i,attrs:{shape:[-1,s]}})})),a=r.map((e=>({vals:i.readSync(e.dataId),shape:e.shape}))),o=t.backend_util.computeOutShape(r.map((e=>e.shape)),1),u=1===r[0].shape[0],d=ot(a,o,s,u),l=t.backend_util.computeOutShape(e.map((e=>e.shape)),n),h=i.makeTensorInfo(l,s,d);return r.forEach((e=>i.disposeData(e.dataId))),h}const a=i.device.limits.maxStorageBuffersPerShaderStage-1;if(e.length>a){const t=[];for(let s=0;s<e.length;s+=a){const r=e.slice(s,s+a);t.push(ri(r,n,i))}const s=ri(t,n,i);for(const e of t)i.disposeData(e.dataId);return s}const{tensors2D:o,outShape:u}=function(e,n,i){const s=t.backend_util.computeOutShape(e.map((e=>e.shape)),n);return{tensors2D:e.map((e=>oe({inputs:{x:e},backend:i,attrs:{shape:[t.util.sizeFromShape(e.shape.slice(0,n)),t.util.sizeFromShape(e.shape.slice(n))]}}))),outShape:s}}(e,n,i),d=o.map((e=>e.shape)),l=new ni(d),h=[],p=new Array(d.length-1);if(p.length>0){p[0]=d[0][1],h.push({type:"int32",data:[p[0]]});for(let e=1;e<p.length;e++)p[e]=p[e-1]+d[e][1],h.push({type:"int32",data:[p[e]]})}const c=i.runWebGPUProgram(l,o,o[0].dtype,h);o.forEach((e=>i.disposeData(e.dataId)));const f=oe({inputs:{x:c},backend:i,attrs:{shape:u}});return i.disposeData(c.dataId),f}function ai(e){const{inputs:n,backend:i,attrs:s}=e,{axis:r}=s,a=t.util.parseAxisParam(r,n[0].shape)[0],o=n.map((e=>e.shape));t.backend_util.assertParamsConsistent(o,a);const u=t.backend_util.computeOutShape(n.map((e=>e.shape)),a);if(0===t.util.sizeFromShape(u))return i.makeTensorInfo(u,n[0].dtype,[]);const d=n.filter((e=>t.util.sizeFromShape(e.shape)>0));return 1===d.length?ce({inputs:{x:d[0]},backend:i}):ri(d,a,i)}const oi={kernelName:t.Concat,backendName:"webgpu",kernelFunc:ai};class ui{constructor(e,t,n,i,s=!1,r=null,a=!1,o=!1){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.isVec4=((e.inChannels%4==0||e.inChannels%3==0)&&this.isChannelsLast||e.outWidth%4==0&&!this.isChannelsLast)&&e.outChannels%4==0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workgroupSize=A(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=N(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4?(this.outputComponent=4,this.isChannelsLast&&e.inChannels%4!=0?(this.innerElementSize=3,this.variableComponents=[1,4]):(this.innerElementSize=4,this.variableComponents=[4,4]),s&&(this.variableNames.push("bias"),this.variableComponents.push(4)),a&&(this.variableNames.push("preluActivationWeights"),this.variableComponents.push(4))):(this.innerElementSize=this.elementsPerThread[0],s&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights")),this.sequentialAccessByThreads=o,this.addBias=s,this.activation=r,this.hasPreluActivationWeights=a,this.tileAOuter=this.workgroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workgroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workgroupSize[0]*this.innerElementSize,this.workgroupSize[1]),this.fitAOuter=t%this.tileAOuter==0,this.fitBOuter=n%this.tileBOuter==0,this.fitInner=i%this.tileInner==0,this.shaderKey=`conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`}getUserCode(){const e=this.isVec4?j(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner):Z(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner,!1,null,this.sequentialAccessByThreads),t=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return`\n    ${function(e,t,n,i,s=!1,r=null,a=!1,o=4,u=4,d=4){const l=e?"\n      let coord = vec4<i32>(batch, xRow, xCol, xCh);\n      ":"\n      let coord = vec4<i32>(batch, xCh, xRow, xCol);\n      ",h=e?"\n      let coords = vec4<i32>(\n        batch,\n        row / outWidth,\n        row % outWidth,\n        col);\n      ":"\n      let coords = vec4<i32>(\n        batch,\n        row,\n        col / outWidth,\n        col % outWidth);\n      ",p=e?"uniforms.xShape[1]":"uniforms.xShape[2]",c=e?"uniforms.xShape[2]":"uniforms.xShape[3]",f=e?"row":"col",g=e?"col":"row",x=`\n      let inChannels = uniforms.wShape[2];\n      let outWidth = ${e?"uniforms.outShape[2]":"uniforms.outShape[3]"};\n      let outRow = ${f} / outWidth;\n      let outCol = ${f} % outWidth;\n\n      let WRow = ${g} / (uniforms.filterDims[1] * inChannels);\n      let WCol = ${g} / inChannels % uniforms.filterDims[1];\n      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];\n      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];\n      let xCh = ${g} % inChannels;\n      var resData = ${m(o)}(0.0);\n      // The bounds checking is always needed since we use it to pad zero for\n      // the 'same' padding type.\n      if (xRow >= 0 && xRow < ${p} && xCol >= 0 && xCol < ${c}) {\n        ${l}\n        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);\n        ${(e=>{switch(e){case 1:return"resData = x[xIndex];";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(o)}\n      }\n      return resData;`,y=e?t&&i?`\n      ${x}`:`\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${x}\n      }\n      return ${m(o)}(0.0);`:i&&n?`\n      ${x}`:`\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${x}\n      }\n      return ${m(o)}(0.0);`,b=`${(e=>{switch(e){case 1:return"return W[row * uniforms.wShape[3] + col];";case 4:return"return W[(row * uniforms.wShape[3] + col) / 4];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(u)}`,w=m(d),S=m(e?o:u),k=m(e?u:o);return`\n      ${X(r,a,4===d,4)}\n      fn mm_readA(batch: i32, row : i32, col : i32) -> ${S} {\n        ${e?y:b}\n      }\n\n      fn mm_readB(batch: i32, row : i32, col : i32) -> ${k} {\n        ${e?b:y}\n      }\n\n      fn mm_write(batch: i32, row : i32, col : i32, valueIn : ${w}) {\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n        {\n        var value = valueIn;\n        let outWidth = ${e?"uniforms.outShape[2]":"uniforms.outShape[3]"};\n        ${h}\n        ${K(s,r)}\n        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }`}(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,t[0],t[1],t[2])}\n    ${e}\n  `}}class di{constructor(e,t=!1,n=null,i=!1){this.variableNames=["x","W"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,",this.workgroupSize=[4,4,8],this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.dispatchLayout=this.isChannelsLast?{x:[2],y:[1],z:[0,3]}:{x:[3],y:[2],z:[0,1]},this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=t,this.activation=n,this.hasPreluActivationWeights=i,t&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`conv2dnaive_${this.activation}_${this.isChannelsLast}`}getUserCode(){return`\n       ${X(this.activation,this.hasPreluActivationWeights,!1,4)}\n       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{\n         let coords = vec4<i32>(batch, row, col, chan);\n         if (coordsInBounds4D(coords, uniforms.xShape)) {\n           return  getX(batch, row, col, chan);\n         } else {\n          return 0.0;\n         }\n       }\n       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{\n         let coords = vec4<i32>(row, col, xChannel, outChannel);\n         if(coordsInBounds4D(coords, uniforms.wShape)) {\n           return getW(row, col, xChannel, outChannel);\n          } else {\n            return 0.0;\n          }\n       }\n       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {\n         let coords = ${this.isChannelsLast?"vec4<i32>(batch, row, col, chan);":"vec4<i32>(batch, chan, row, col);"}\n         if (coordsInBounds4D(coords, uniforms.outShape)) {\n           var value = valueIn;\n           ${K(this.addBias,this.activation)}\n           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);\n         }\n       }\n       ${y("index")} {\n         let coords = getOutputCoords();\n         let batch = coords[0];\n         let outChannel = ${this.isChannelsLast?"coords[3];":"coords[1];"}\n         let outRow = ${this.isChannelsLast?"coords[1];":"coords[2];"}\n         let outCol = ${this.isChannelsLast?"coords[2];":"coords[3];"}\n         var acc : f32 = 0.0;\n         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {\n           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {\n             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];\n             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];\n             for (var xChannel = 0; xChannel < ${this.isChannelsLast?"uniforms.xShape[3];":"uniforms.xShape[1];"} xChannel = xChannel + 1) {\n               ${this.isChannelsLast?"let v = readInp(batch, xRow, xCol, xChannel);":"let v = readInp(batch, xChannel, xRow, xCol);"}\n               let f = readFilt(row, col, xChannel, outChannel);\n               acc = acc + v * f;\n             }\n           }\n         }\n         writeResult(batch, outRow, outCol, outChannel, acc);\n       }\n     `}}class li{constructor(e,t){this.variableNames=["x"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,\n       inChannels : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=t,this.shaderKey=`im2col_${this.isChannelsLast}`}getUserCode(){const e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,n=this.isChannelsLast?"coords[1]":"coords[2]",i=this.isChannelsLast?"coords[2]":"coords[1]",s=this.isChannelsLast?"getX(batch, xRow, xCol, ch)":"getX(batch, ch, xRow, xCol)";return`\n    ${y("index")} {\n      let coords = getCoordsFromIndex(index);\n      if(index < uniforms.size) {\n        let batch = coords[0];\n        let row = ${n};\n        let col = ${i};\n        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];\n        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);\n        var value = 0.0;\n        if(xRow < uniforms.xShape[${e}] && xRow >= 0) {\n          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -\n              uniforms.pads[1];\n          let xCol = offsetX + uniforms.dilations[1] * ((col %\n              uniforms.itemsPerBlockRow) / uniforms.inChannels);\n          let ch = col % uniforms.inChannels;\n          if(xCol < uniforms.xShape[${t}] && xCol >= 0) {\n            value = ${s};\n          }\n        }\n        setOutputAtIndex(index, value);\n      }\n    }\n   `}}function hi(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function pi({x:e,filter:n,convInfo:i,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:u=null}){const d=null!=r,l=null!=a,h="channelsLast"===i.dataFormat,p=h&&i.filterHeight===i.inHeight&&i.filterWidth===i.inWidth&&"VALID"===i.padInfo.type,c=t.env().getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");if(!c&&(p||1===i.filterHeight&&1===i.filterWidth&&1===i.dilationHeight&&1===i.dilationWidth&&1===i.strideHeight&&1===i.strideWidth&&("SAME"===i.padInfo.type||"VALID"===i.padInfo.type)))return function({x:e,filter:t,convInfo:n,backend:i,bias:s=null,preluActivationWeights:r=null,leakyreluAlpha:a=0,activation:o=null}){const u="channelsLast"===n.dataFormat,d=!u,l=[];let h,p;if(u&&n.filterHeight===n.inHeight&&n.filterWidth===n.inWidth&&"VALID"===n.padInfo.type){const s=n.inHeight*n.inWidth*n.inChannels;h=oe({inputs:{x:e},backend:i,attrs:{shape:[1,n.batchSize,s]}}),p=oe({inputs:{x:t},backend:i,attrs:{shape:[1,s,n.outChannels]}})}else h=oe({inputs:{x:e},backend:i,attrs:{shape:u?[n.batchSize,n.inHeight*n.inWidth,n.inChannels]:[n.batchSize,n.inChannels,n.inHeight*n.inWidth]}}),p=oe({inputs:{x:t},backend:i,attrs:{shape:[1,n.inChannels,n.outChannels]}});if(l.push(h),l.push(p),null!=r){const e=hi(r.shape,u);null!=e&&(r=oe({inputs:{x:r},backend:i,attrs:{shape:e}}),l.push(r))}if(null!=s){const e=hi(s.shape,u);null!=e&&(s=oe({inputs:{x:s},backend:i,attrs:{shape:e}}),l.push(s))}const c=de({a:u?h:p,b:u?p:h,transposeA:d,transposeB:!1,backend:i,bias:s,activation:o,preluActivationWeights:r,leakyreluAlpha:a}),f=oe({inputs:{x:c},backend:i,attrs:{shape:n.outShape}});l.push(c);for(const e of l)i.disposeData(e.dataId);return f}({x:e,filter:n,convInfo:i,backend:s,bias:r,activation:u,preluActivationWeights:a,leakyreluAlpha:o});const f=t.env().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),m=f>0?f:s.thresholdToIncreaseWorkgroups,g=i.batchSize*Math.ceil(i.outHeight*i.outWidth/32)*Math.ceil(i.outChannels/32);if(t.env().getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER")||g<=m)return function({x:e,filter:t,convInfo:n,backend:i,bias:s=null,preluActivationWeights:r=null,leakyreluAlpha:a=0,activation:o=null}){const{filterWidth:u,filterHeight:d,inChannels:l,strideWidth:h,strideHeight:p,padInfo:c,outWidth:f,outHeight:m,dilationWidth:g,dilationHeight:x,dataFormat:y}=n,b="channelsLast"===y,w=u*d*l,S=m*f,k=b?[n.batchSize,S,w]:[n.batchSize,w,S],C=new li(k,b),v=[{type:"int32",data:[c.top,c.left]},{type:"int32",data:[p,h]},{type:"int32",data:[x,g]},{type:"int32",data:[f]},{type:"int32",data:[l*u]},{type:"int32",data:[l]}],I=i.runWebGPUProgram(C,[e],e.dtype,v),R=[];R.push(I);const $=oe({inputs:{x:t},backend:i,attrs:{shape:[1,w,-1]}});if(R.push($),null!=r){const e=hi(r.shape,b);null!=e&&(r=oe({inputs:{x:r},backend:i,attrs:{shape:e}}),R.push(r))}if(null!=s){const e=hi(s.shape,b);null!=e&&(s=oe({inputs:{x:s},backend:i,attrs:{shape:e}}),R.push(s))}const P=de({a:b?I:$,b:b?$:I,transposeA:!b,transposeB:!1,backend:i,bias:s,activation:o,preluActivationWeights:r,leakyreluAlpha:a}),z=oe({inputs:{x:P},backend:i,attrs:{shape:n.outShape}});R.push(P);for(const e of R)i.disposeData(e.dataId);return z}({x:e,filter:n,convInfo:i,backend:s,bias:r,preluActivationWeights:a,leakyreluAlpha:o,activation:u});let x;const y=[i.padInfo.top,i.padInfo.left],b=[{type:"int32",data:[i.filterHeight,i.filterWidth]},{type:"int32",data:[...y]},{type:"int32",data:[i.strideHeight,i.strideWidth]},{type:"int32",data:[i.dilationHeight,i.dilationWidth]}];if(c)x=new di(i,d,u,l);else{const e=h?i.outHeight*i.outWidth:i.outChannels,t=h?i.outChannels:i.outHeight*i.outWidth,n=i.filterHeight*i.filterWidth*i.inChannels;b.push({type:"int32",data:[e]},{type:"int32",data:[t]},{type:"int32",data:[n]});const r=s.adapterInfo.isIntel();x=new ui(i,e,t,n,d,u,l,r)}const w=[],S=[e,n];d&&(h||1!==r.shape.length||(r=oe({inputs:{x:r},backend:s,attrs:{shape:[r.shape[0],1,1]}}),w.push(r)),S.push(r)),l&&(h||1!==a.shape.length||(a=oe({inputs:{x:a},backend:s,attrs:{shape:[a.shape[0],1,1]}}),w.push(a)),S.push(a)),"leakyrelu"===u&&(b.push({type:"float32",data:[o]}),x.uniforms+=" alpha : f32,");const k=s.runWebGPUProgram(x,S,e.dtype,b);for(const e of w)s.disposeData(e.dataId);return k}const ci={kernelName:t.Conv2D,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,attrs:i,backend:s}=e,{x:r,filter:a}=n,{strides:o,pad:u,dataFormat:d,dilations:l,dimRoundingMode:h}=i,p=t.backend_util.convertConv2DDataFormat(d);return pi({x:r,filter:a,convInfo:t.backend_util.computeConv2DInfo(r.shape,a.shape,o,l,u,h,!1,p),backend:s})}};class fi{constructor(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,",this.workgroupSize=[64,1,1],this.size=!1,this.isVec4=!1,this.workPerThread=1,this.outputShape=e.inShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.isVec4=this.isChannelsLast&&e.outChannels%4==0&&e.inChannels%4==0,this.isVec4?(this.workPerThread=2,this.outputComponent=4,this.workgroupSize=[4,4,4],this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize,[4,this.workPerThread,1])):(this.size=!0,this.workPerThread=1,this.workgroupSize=[64,1,1],this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize)),this.shaderKey=`conv2DDerInput_${this.isChannelsLast}_${this.isVec4}_${this.workPerThread}`}getUserCode(){const e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,n=this.isChannelsLast?3:1,i=`\n    ${y()} {\n      let batch = i32(globalId.z) / uniforms.outShape[1];\n      let r = i32(globalId.z) % uniforms.outShape[1];\n      let c = i32(globalId.y) * ${this.workPerThread};\n      let d1 = i32(globalId.x) * 4;\n\n      let dyCorner = vec2<i32>(r, c) - uniforms.pads;\n\n      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n      // ? = to be determined. : = across all values in that axis.\n      var dotProd: array<vec4<f32>, ${this.workPerThread}>;\n      for (var i = 0; i < ${this.workPerThread}; i++) {\n        dotProd[i] = vec4<f32>(0.0);\n      }\n      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);\n        let wRPerm = uniforms.filterDims.x - 1 - wR;\n        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||\n            fract(dyR) > 0.0) {\n          continue;\n        }\n        let idyR = i32(dyR);\n\n        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);\n          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);\n          let wCPerm = uniforms.filterDims.y - 1 - wC;\n          var bDyCVal = true;\n          var bDyCVal2 = true;\n          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC) > 0.0) {\n            bDyCVal = false;\n          }\n          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC2) > 0.0) {\n            bDyCVal2 = false;\n          }\n\n          let idyC = i32(dyC);\n          let idyC2 = i32(dyC2);\n          if (bDyCVal && bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n              xValue = getDy(batch, idyR, idyC2, d2);\n              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),\n                                                  dot(xValue, wValue1),\n                                                  dot(xValue, wValue2),\n                                                  dot(xValue, wValue3));\n            }\n          } else if (bDyCVal) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n            }\n          } else if (bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC2, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[1] = dotProd[1] + tmpval;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n        let coords = vec4<i32>(batch, r, c + i, d1);\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);\n        }\n      }\n    }\n    `;return this.isVec4?`\n    ${i}\n    `:`\n    ${y("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[${n}];\n\n        let dyCorner = vec2<i32>(coords[${e}], coords[${t}]) - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);\n          let wRPerm = uniforms.filterDims.x - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||\n              wRPerm < 0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);\n            let wCPerm = uniforms.filterDims.y - 1 - wC;\n            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n                fract(dyC) > 0.0 || wCPerm < 0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {\n              let xValue = ${this.isChannelsLast?"getDy(batch, idyR, idyC, d2)":"getDy(batch, d2, idyR, idyC)"};\n              let wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd = dotProd + xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}class mi{constructor(e){this.variableNames=["x","dy"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,this.shaderKey=`conv2DDerFilter_${this.isChannelsLast}`}getUserCode(){return`\n    ${y("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let d2 = coords[3];\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b = b + 1) {\n          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              if (${this.isChannelsLast}) {\n                let dyValue = getDy(b, yR, yC, d2);\n                let xValue = getX(b, xR, xC, d1);\n                dotProd = dotProd + xValue * dyValue;\n              } else {\n                let dyValue = getDy(b, d2, yR, yC);\n                let xValue = getX(b, d1, xR, xC);\n                dotProd = dotProd + xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}class gi{constructor(e){this.variableNames=["x","dy"],this.uniforms="pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,\n       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerFilter"}getUserCode(){return`\n    ${y("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wF = coords.x;\n        let wR = coords.y;\n        let wC = coords.z;\n        let d1 = coords.w;\n        let d2 = coords.u;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yF = 0; yF < uniforms.outDepth; yF++) {\n            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];\n            if (xF < 0 || xF >= uniforms.inDepth) {\n              continue;\n            }\n\n            for (var yR = 0; yR < uniforms.outHeight; yR++) {\n              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];\n              if (xR < 0 || xR >= uniforms.inHeight) {\n                continue;\n              }\n\n              for (var yC = 0; yC < uniforms.outWidth; yC++) {\n                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];\n                if (xC < 0 || xC >= uniforms.inWidth) {\n                  continue;\n                }\n\n                let dyValue = getDy(b, yF, yR, yC, d2);\n                let xValue = getX(b, xF, xR, xC, d1);\n                dotProd += xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}class xi{constructor(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerInput"}getUserCode(){return`\n    ${y("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let d1 = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyFCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);\n          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {\n            continue;\n          }\n          let idyF = i32(dyF);\n\n          let wFPerm = uniforms.filterDims[0] - 1 - wF;\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            let wRPerm = uniforms.filterDims[1] - 1 - wR;\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let wCPerm = uniforms.filterDims[2] - 1 - wC;\n\n              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {\n                let xValue = getDy(batch, idyF, idyR, idyC, d2);\n                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}const yi={kernelName:t.Conv2DBackpropFilter,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r,dy:a}=n,{strides:o,pad:u,dataFormat:d,dimRoundingMode:l,filterShape:h}=s,p=t.backend_util.convertConv2DDataFormat(d),c=t.backend_util.computeConv2DInfo(r.shape,h,o,1,u,l,!1,p),f=new mi(c),m=[{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.batchSize]},{type:"int32",data:[c.outHeight]},{type:"int32",data:[c.outWidth]},{type:"int32",data:[c.inHeight]},{type:"int32",data:[c.inWidth]}];return i.runWebGPUProgram(f,[r,a],r.dtype,m)}};class bi{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.inShape,t.util.assert("channelsLast"===e.dataFormat,(()=>"TODO: NCHW is unimplemented")),this.isVec4=e.inChannels%4==0&&e.outChannels%4==0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workgroupSize=A(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=N(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4&&(this.outputComponent=4,this.variableComponents=[4,1]),this.shaderKey=`conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`}getUserCode(){const e=this.isVec4?j(this.elementsPerThread,this.workgroupSize):Z(this.elementsPerThread,this.workgroupSize);return`\n    ${function(e=4){const t=`if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        \n      let outRow = row / uniforms.outShape[2];\n      let outCol = row % uniforms.outShape[2];\n\n      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];\n      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {\n        return ${m(e)}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {\n        return ${m(e)}(0.0);\n      }\n      let coord = vec4<i32>(\n          batch,\n          i32(xR),\n          i32(xC),\n          col % uniforms.outBackprop[3]);\n      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${e}];\n      }\n      return ${m(e)}(0.0);`;return`\n  fn mm_readA(batch: i32, row : i32, col : i32) -> ${m(e)} {\n    ${t}\n  }\n\n  fn mm_readB(batch: i32, row : i32, col : i32) -> ${m(e)} {\n    let coordX = uniforms.filterDims.x - 1 -\n        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n    let coordY = uniforms.filterDims.y - 1 -\n        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&\n        coordX >= 0 && coordY >= 0) {\n      let rowInner = row % uniforms.outBackprop[3];\n      let coord = vec4<i32>(coordX, coordY, col, rowInner);\n      ${(e=>{switch(e){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return"\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];\n            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];\n            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];\n            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];\n            return vec4<f32>(v0, v1, v2, v3);\n            ";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(e)}\n    }\n    return ${m(e)}(0.0);\n  }\n\n  fn mm_write(batch: i32, row : i32, col : i32, valueInput : ${m(e)}) {\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outCoord = vec4<i32>(\n          batch,\n          row / uniforms.outShape[2],\n          row % uniforms.outShape[2],\n          col);\n      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${e}] = value;\n    }\n  }`}(this.isVec4?4:1)}\n    ${e}\n    `}}const wi={kernelName:t.Conv2DBackpropInput,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{dy:r,filter:a}=n,{inputShape:o,strides:u,pad:d,dataFormat:l,dimRoundingMode:h}=s,p=t.backend_util.convertConv2DDataFormat(l),c=t.backend_util.computeConv2DInfo(o,a.shape,u,1,d,h,!1,p),f=[{type:"int32",data:[c.filterHeight,c.filterWidth]},{type:"int32",data:[c.filterHeight-1-c.padInfo.top,c.filterWidth-1-c.padInfo.left]},{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.batchSize,c.outHeight,c.outWidth,c.outChannels]}];let m;if(t.env().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE")||"channelsLast"!==c.dataFormat)m=new fi(c);else{m=new bi(c);const e=c.inHeight*c.inWidth,t=c.inChannels,n=c.filterHeight*c.filterWidth*c.outChannels;f.push({type:"uint32",data:[e]},{type:"uint32",data:[t]},{type:"uint32",data:[n]})}return i.runWebGPUProgram(m,[r,a],"float32",f)}};class Si{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3dnaive"}getUserCode(){return`\n    ${y("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords.x;\n        let d2 = coords.u;\n\n        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n        let xFCorner = xFRCCorner.x;\n        let xRCorner = xFRCCorner.y;\n        let xCCorner = xFRCCorner.z;\n\n        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;\n        let inputDepthVec4Remainder = uniforms.xShape.u % 4;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let xF = xFCorner + wF * uniforms.dilations[0];\n          if (xF < 0 || xF >= uniforms.xShape.y) {\n            continue;\n          }\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let xR = xRCorner + wR * uniforms.dilations[1];\n            if (xR < 0 || xR >= uniforms.xShape.z) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let xC = xCCorner + wC * uniforms.dilations[2];\n              if (xC < 0 || xC >= uniforms.xShape.w) {\n                continue;\n              }\n\n              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {\n                let xValues = vec4<f32>(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                let wValues = vec4<f32>(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (inputDepthVec4Remainder == 1) {\n                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2);\n              } else if (inputDepthVec4Remainder == 2) {\n                let xValues = vec2<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)\n                );\n                let wValues = vec2<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (inputDepthVec4Remainder == 3) {\n                let xValues = vec3<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)\n                );\n                let wValues = vec3<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }`}}const ki={kernelName:t.Conv3D,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r,filter:a}=n,{strides:o,pad:u,dilations:d}=s,l=t.backend_util.computeConv3DInfo(r.shape,a.shape,o,d,u),h=[l.padInfo.front,l.padInfo.top,l.padInfo.left],p=[{type:"int32",data:[l.filterDepth,l.filterHeight,l.filterWidth]},{type:"int32",data:[...h]},{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.dilationDepth,l.dilationHeight,l.dilationWidth]}],c=new Si(l),f=t.upcastType(r.dtype,a.dtype);return i.runWebGPUProgram(c,[r,a],f,p)}};const Ci={kernelName:t.Conv3DBackpropFilterV2,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r,dy:a}=n,{strides:o,pad:u,filterShape:d}=s,l=t.backend_util.computeConv3DInfo(r.shape,d,o,1,u),h=new gi(l),p=[{type:"int32",data:[l.padInfo.front,l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.batchSize]},{type:"int32",data:[l.outDepth]},{type:"int32",data:[l.outHeight]},{type:"int32",data:[l.outWidth]},{type:"int32",data:[l.inDepth]},{type:"int32",data:[l.inHeight]},{type:"int32",data:[l.inWidth]}];return i.runWebGPUProgram(h,[r,a],a.dtype,p)}};const vi={kernelName:t.Conv3DBackpropInputV2,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{dy:r,filter:a}=n,{strides:o,pad:u,inputShape:d}=s,l=t.backend_util.computeConv3DInfo(d,a.shape,o,1,u),h=new xi(l),p=[{type:"int32",data:[l.filterDepth,l.filterHeight,l.filterWidth]},{type:"int32",data:[l.filterDepth-1-l.padInfo.front,l.filterHeight-1-l.padInfo.top,l.filterWidth-1-l.padInfo.left]},{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.outDepth]},{type:"int32",data:[l.outHeight]},{type:"int32",data:[l.outWidth]},{type:"int32",data:[l.outChannels]}];return i.runWebGPUProgram(h,[r,a],r.dtype,p)}},Ii=ye({opType:M.COS}),Ri={kernelName:t.Cos,backendName:"webgpu",kernelFunc:Ii},$i=ye({opType:M.COSH}),Pi={kernelName:t.Cosh,backendName:"webgpu",kernelFunc:$i};class zi{constructor(e,t,n,i){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workgroupSize=[64,1,1],this.size=!0;const[s]=t;this.outputShape=[s,n[0],n[1],e],this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.methodId="bilinear"===i?1:0,this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey=`cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`}getUserCode(){const[e,t]=["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],[n,i,s]=this.cropHeightBiggerThan1?[`(${e} / f32(uniforms.outShape[1] - 1))`,"(y2-y1) * height_ratio",`y1*${e} + f32(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${e}`],[r,a,o]=this.cropWidthBiggerThan1?[`(${t} / f32(uniforms.outShape[2] - 1))`,"(x2-x1) * width_ratio",`x1*${t} + f32(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${t}`];return`\n    ${y("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let height_ratio = f32(${n});\n        let width_ratio = f32(${r});\n        let b = coords[0];\n        let y = coords[1];\n        let x = coords[2];\n        let d = coords[3];\n        // get box vals\n        let y1 = getBoxes(b, 0);\n        let x1 = getBoxes(b, 1);\n        let y2 = getBoxes(b, 2);\n        let x2 = getBoxes(b, 3);\n        // get image in batch index\n        let bInd = i32(round(getBoxInd(b)));\n        if(bInd < 0 || bInd >= uniforms.outShape[0]) {\n          return;\n        }\n        let height_scale = ${i};\n        let width_scale = ${a};\n        let in_y = ${s};\n        if( in_y < 0.0 || in_y > ${e} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let in_x = ${o};\n        if( in_x < 0.0 || in_x > ${t} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let sourceFracIndexCR = vec2<f32>(in_x,in_y);\n        if(${this.methodId} == 1) {\n          // Compute the four integer indices.\n          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);\n          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));\n          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);\n          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);\n          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);\n          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);\n          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);\n          let top = topLeft + (topRight - topLeft) * fracCR.x;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          let newValue = top + (bottom - top) * fracCR.y;\n          setOutputAtIndex(index, newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          let sourceNearestCR = vec2<i32>(floor(\n            sourceFracIndexCR + vec2<f32>(0.5,0.5)));\n          let newValue = getImage(\n            bInd, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    }\n    `}}const Ai={kernelName:t.CropAndResize,backendName:"webgpu",kernelFunc:e=>{const{inputs:t,backend:n,attrs:i}=e,{image:s,boxes:r,boxInd:a}=t,{cropSize:o,method:u,extrapolationValue:d}=i,l=new zi(s.shape[3],r.shape,o,u),h=[{type:"float32",data:[d]}];return n.runWebGPUProgram(l,[s,r,a],"float32",h)}};var Ni;!function(e){e.Prod="*",e.Sum="+"}(Ni||(Ni={}));class Di{constructor(e,t,n,i){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=t,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.exclusive=n,this.reverse=i,this.op=e,this.shaderKey=`cum_${this.op}_${this.exclusive}_${this.reverse}`}getUserCode(){const e=this.outputShape.length,t=this.op===Ni.Prod?"1.0":"0.0",n=this.exclusive?t:`getX(${Ti(e,"coords",this.op)})`,i=this.outputShape[this.outputShape.length-1];let s="",r="";return this.exclusive?(s=this.reverse?"end != "+(i-1):"end != 0",r=this.reverse?"end + 1":"end - 1"):(s=this.reverse?`end + pow2 < ${i}`:"end >= pow2",r=this.reverse?"end + pow2":"end - pow2"),`\n      ${y("index")} {\n       if (index < uniforms.size) {\n         var coords = getCoordsFromIndex(index);\n\n         let end = ${Fi(e,"coords",this.op)};\n         var val = ${n};\n         let pow2 = i32(pow(2.0, uniforms.index));\n         if (${s}) {\n           let idx = ${r};\n           ${Fi(e,"coords",this.op)} = idx;\n           val ${this.op}= getX(${Ti(e,"coords",this.op)});\n         }\n         setOutputAtIndex(index, val);\n       }\n      }\n    `}}function Ti(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function Fi(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function _i(e,n,i,s,r,a){const o=n.shape.length,u=t.backend_util.getAxesPermutation([s],o);let d=n;null!=u&&(d=Zt({inputs:{x:n},backend:i,attrs:{perm:u}}));const l=t.backend_util.getInnerMostAxes(1,o)[0];if(l!==o-1)throw new Error(`WebGPU cumprod shader expects an inner-most axis=${n.shape.length-1} but got axis=${s}`);const h=d.shape[l];let p=ce({inputs:{x:d},backend:i});for(let t=0;t<=Math.ceil(Math.log2(h))-1;t++){const n=new Di(e,d.shape,!1,a),s=p,r=[{type:"float32",data:[t]}];p=i.runWebGPUProgram(n,[p],p.dtype,r),i.disposeData(s.dataId)}if(r){const t=new Di(e,d.shape,r,a),n=p,s=[{type:"float32",data:[0]}];p=i.runWebGPUProgram(t,[p],p.dtype,s),i.disposeData(n.dataId)}if(null!=u){const e=Zt({inputs:{x:p},backend:i,attrs:{perm:t.backend_util.getUndoAxesPermutation(u)}});return i.disposeData(p.dataId),i.disposeData(d.dataId),e}return p}const Ei={kernelName:t.Cumprod,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:s}=t,{axis:r,exclusive:a,reverse:o}=i;return _i(Ni.Prod,s,n,r,a,o)}};const Li={kernelName:t.Cumsum,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:s}=t,{axis:r,exclusive:a,reverse:o}=i;return _i(Ni.Sum,s,n,r,a,o)}};const Wi={kernelName:t.DenseBincount,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r,weights:a}=n,{size:o,binaryOutput:u}=s,d=1===r.shape.length,l=t.util.sizeFromShape(a.shape)>0,h=a.dtype,p=d?[r.shape[0]]:[r.shape[0],r.shape[1]],c=re({backend:i,attrs:{shape:d?[o]:[r.shape[0],o],value:0,dtype:h}}),f=new Bn(p,l,u),m=[{type:"int32",data:[o]}],g=l?[r,a]:[r];return i.runWebGPUProgram(f,g,h,m,c)}};class Bi{constructor(e,t){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`depthToSpace_${t}`,this.dataFormat=t}getUserCode(){return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let h = ${this.getHeightCoordString()};\n          let w = ${this.getWidthCoordString()};\n          let d = ${this.getDepthCoordString()};\n\n          let in_h = h / uniforms.blockSize;\n          let offset_h = h % uniforms.blockSize;\n          let in_w = w / uniforms.blockSize;\n          let offset_w = w % uniforms.blockSize;\n          let offset_d = (offset_h * uniforms.blockSize + offset_w) *\n            ${this.getOutputDepthSize()};\n          let in_d = d + offset_d;\n\n          let rlt = ${this.getInputSamplingString()};\n          setOutputAtIndex(index, rlt);\n        }\n      }`}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?"uniforms.outShape[3]":"uniforms.outShape[1]"}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const Oi={kernelName:t.DepthToSpace,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:s}=t,{blockSize:r,dataFormat:a}=i,o=s.shape[0],u=("NHWC"===a?s.shape[1]:s.shape[2])*r,d=("NHWC"===a?s.shape[2]:s.shape[3])*r,l=("NHWC"===a?s.shape[3]:s.shape[1])/(r*r),h=[{type:"int32",data:[r]}],p=new Bi("NHWC"===a?[o,u,d,l]:[o,l,u,d],a);return n.runWebGPUProgram(p,[s],s.dtype,h)}};class Ui{constructor(e,t,n,i=!1,s=null,r=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>,",this.workgroupSize=[16,16,1],this.outputShape=e,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),i&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.addBias=i,this.activation=s,this.hasPreluActivation=r,this.filterHeight=t,this.filterWidth=n,this.shaderKey=`depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`}getUserCode(){const e=this.filterWidth*this.filterHeight,t=this.workgroupSize[0]*this.workgroupSize[1]*this.workgroupSize[2],n=this.workgroupSize[1]+this.filterHeight-1,i=this.workgroupSize[0]+this.filterWidth-1;return`\n      ${X(this.activation,this.hasPreluActivation,!1,4)}\n\n      var<workgroup> mm_Asub : array<array<f32, ${i}>, ${n}>;\n      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;\n      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {\n        var value = 0.0;\n        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])\n        {\n          value = getX(batch, channel, row, col);\n        }\n        return value;\n      }\n\n      ${y()} {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;\n        let channelMul = uniforms.wShape[3];\n        let d1 = coords[1] / channelMul;\n        let q = coords[1] % channelMul;\n\n        let inputRowStart = xRCCorner.x;\n        let inputColStart = xRCCorner.y;\n\n        let localRow = i32(localId.y);\n        let localCol = i32(localId.x);\n\n        // Load one tile of X into local memory.\n        for (var inputRow = localRow; inputRow < ${n}; inputRow = inputRow + ${this.workgroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${i}; inputCol = inputCol + ${this.workgroupSize[0]}) {\n            let rowOffset = inputRow - localRow;\n            let colOffset = inputCol - localCol;\n            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);\n          }\n        }\n\n        // Load one tile of W into local memory.\n        var wIndex = i32(localIndex);\n        ${e<t?`if (wIndex < ${e})`:`for(; wIndex < ${e}; wIndex = wIndex + ${t})`}\n\n        {\n          let wRow = wIndex / ${this.filterWidth};\n          let wCol = wIndex % ${this.filterWidth};\n          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);\n        }\n\n        workgroupBarrier();\n\n        var value = 0.0;\n        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {\n          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {\n            let xVal = mm_Asub[localRow + wR][localCol + wC];\n            let wVal = mm_Bsub[wR][wC];\n            value = fma(xVal, wVal, value);\n          }\n        }\n        ${K(this.addBias,this.activation)}\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `}}class Mi{constructor(e,n=!1,i=null,s=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,",this.workgroupSize=[64,1,1],this.workPerThread=4,this.outputComponent=4,this.outputShape=e.outShape,this.virtualWidth=Math.ceil(this.outputShape[2]/this.workPerThread)*this.workPerThread;const r=[this.outputShape[0],this.outputShape[1],this.virtualWidth,this.outputShape[3]];this.dispatchLayout=D(r),this.dispatch=P(this.dispatchLayout,r,this.workgroupSize,[this.outputComponent*this.workPerThread,1,1]),t.util.assert("channelsLast"===e.dataFormat,(()=>"TODO: NCHW is unimplemented")),n&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=n,this.activation=i,this.hasPreluActivation=s,this.shaderKey=`depthwiseVec4_${i}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`}getUserCode(){const e=(this.workPerThread-1)*this.convInfo.strideWidth+this.convInfo.filterWidth,t=this.convInfo.strideHeight,n=this.convInfo.strideWidth;return`\n      ${X(this.activation,this.hasPreluActivation,!0,4)}\n      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {\n        var value = vec4<f32>(0.0);\n        if (col >=0 && col < uniforms.inDims[1]) {\n          value = getX(batch, row, col, channel);\n        }\n        return value;\n      }\n\n      ${y("index")} {\n        let width0 = uniforms.outShape[3] / ${this.outputComponent};\n        let d1 = (index % width0) * ${this.outputComponent};\n        var index1 = index / width0;\n        let width1 = uniforms.virtualWidth / ${this.workPerThread};\n        let c = (index1 % width1) * ${this.workPerThread};\n        index1 = index1 / width1;\n        let r = index1 % uniforms.outShape[1];\n        let batch = index1 / uniforms.outShape[1];\n\n        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${t}, ${n}) - uniforms.pads;\n\n        let xRCorner = xRCCorner.x;\n        let xCCorner = xRCCorner.y;\n        var xVals : array<vec4<f32>, ${e}>;\n        var dotProd : array<vec4<f32>, ${this.workPerThread}>;\n        for (var i = 0; i < ${this.workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n\n        // Use constant instead of uniform can give better performance.\n        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {\n          let xR = xRCorner + wR;\n          if (xR >=0 && xR < uniforms.inDims[0]) {\n            for (var i = 0; i < ${e}; i++) {\n              xVals[i] = readX(batch, xR, xCCorner + i, d1);\n            }\n            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {\n              let wValue = getW(wR, wC, d1, 0);\n              for (var i = 0; i < ${this.workPerThread}; i++) {\n                dotProd[i] = fma(xVals[i * ${n} + wC], wValue, dotProd[i]);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let coords = vec4<i32>(batch, r, c + i, d1);\n          if (coordsInBounds4D(coords, uniforms.outShape)) {\n            var value = dotProd[i];\n            ${K(this.addBias,this.activation)}\n            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n          }\n        }\n      }\n    `}}class Vi{constructor(e,t=!1,n=null,i=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,\n      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,t&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=n,this.hasPreluActivation=i,this.shaderKey=`depthwise_${this.activation}_${this.isChannelsLast}`}getUserCode(){const e=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return`\n      ${X(this.activation,this.hasPreluActivation,!1,4)}\n\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast?"yz":"zw"}) * uniforms.strides - uniforms.pads;\n          let d2 = coords[${this.isChannelsLast?3:1}];\n          let channelMul = uniforms.wShape[3];\n          let d1 = d2 / channelMul;\n          let q = d2 % channelMul;\n\n          let inputRowStart = xRCCorner.x;\n          let inputColStart = xRCCorner.y;\n          let inputRowEnd = inputRowStart + uniforms.filterHeight *\n              uniforms.dilations[0];\n          let inputColEnd = inputColStart + uniforms.filterWidth *\n              uniforms.dilations[1];\n\n          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get\n          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all\n          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.\n          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.\n          var value = 0.0;\n\n          // Extract if checking out of for loop for performance.\n          if (inputRowStart >= 0 && inputColStart >= 0 &&\n            inputRowEnd < uniforms.inDims[0] &&\n                inputColEnd < uniforms.inDims[1]) {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  let xVal = ${e};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            } else {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                if (xR < 0 || xR >= uniforms.inDims[0]) {\n                  continue;\n                }\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  if (xC < 0 || xC >= uniforms.inDims[1]) {\n                    continue;\n                  }\n\n                  let xVal = ${e};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            }\n            ${K(this.addBias,this.activation)}\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `}}const Gi={kernelName:t.DepthwiseConv2dNative,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r,filter:a}=n,{strides:o,pad:u,dataFormat:d,dilations:l,dimRoundingMode:h}=s,p=t.backend_util.convertConv2DDataFormat(d);let c=l;null==c&&(c=[1,1]);const f=t.backend_util.computeConv2DInfo(r.shape,a.shape,o,c,u,h,!0,p),m=[{type:"int32",data:[f.padInfo.top,f.padInfo.left]},{type:"int32",data:[f.inHeight,f.inWidth]}],g="channelsLast"===f.dataFormat;let x;return!g&&f.inHeight>16&&f.inWidth>16&&1===f.strideHeight&&1===f.strideWidth&&1===f.dilationWidth&&1===f.dilationHeight&&f.inChannels===f.outChannels?x=new Ui(f.outShape,f.filterHeight,f.filterWidth):g&&f.outHeight>4&&f.outWidth>4&&f.strideWidth<=2&&f.inChannels===f.outChannels&&1===f.dilationHeight&&1===f.dilationWidth&&f.inChannels%4==0?(x=new Mi(f),m.push({type:"int32",data:[x.virtualWidth]})):(x=new Vi(f),m.push({type:"int32",data:[f.filterHeight]},{type:"int32",data:[f.filterWidth]},{type:"int32",data:[f.strideHeight,f.strideWidth]},{type:"int32",data:[f.dilationHeight,f.dilationWidth]})),i.runWebGPUProgram(x,[r,a],r.dtype,m)}};class Hi{constructor(e){this.variableNames=["x","dy"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,\n      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_filter"}getUserCode(){return`\n      ${y("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let dm = coords[3];\n        let d2 = d1 * uniforms.channelMul + dm;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yR = 0; yR < uniforms.outHeight; yR++) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC++) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              let dyValue = getDy(b, yR, yC, d2);\n              let xValue = getX(b, xR, xC, d1);\n              dotProd += xValue * dyValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}class Xi{constructor(e){this.variableNames=["dy","W"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, channelMul : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_input"}getUserCode(){return`\n      ${y("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[3];\n        let dyCorner = coords.yz - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n\n          let idyR = i32(dyR);\n          let wRPerm = uniforms.filterDims[0] - 1 - wR;\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n\n            let idyC = i32(dyC);\n            let wCPerm = uniforms.filterDims[1] - 1 - wC;\n\n            for (var dm = 0; dm < uniforms.channelMul; dm++) {\n              let d2 = d1 * uniforms.channelMul + dm;\n              let xValue = getDy(batch, idyR, idyC, d2);\n              let wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}const Ki={kernelName:t.DepthwiseConv2dNativeBackpropFilter,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r,dy:a}=n,{strides:o,dilations:u,pad:d,dimRoundingMode:l,filterShape:h}=s,p=t.backend_util.computeConv2DInfo(r.shape,h,o,u,d,l,!0),c=new Hi(p),f=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.padInfo.top,p.padInfo.left]},{type:"int32",data:[p.filterHeight,p.filterWidth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"int32",data:[p.inHeight]},{type:"int32",data:[p.inWidth]},{type:"int32",data:[p.batchSize]},{type:"int32",data:[p.outChannels/p.inChannels]}];return i.runWebGPUProgram(c,[r,a],"float32",f)}};const qi={kernelName:t.DepthwiseConv2dNativeBackpropInput,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{dy:r,filter:a}=n,{strides:o,dilations:u,pad:d,dimRoundingMode:l,inputShape:h}=s,p=t.backend_util.computeConv2DInfo(h,a.shape,o,u,d,l,!0),c=new Xi(p),f=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.filterHeight-1-p.padInfo.top,p.filterWidth-1-p.padInfo.left]},{type:"int32",data:[p.filterHeight,p.filterWidth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"int32",data:[p.outChannels/p.inChannels]}];return i.runWebGPUProgram(c,[r,a],r.dtype,f)}};class Yi{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,e],this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="diag"}getUserCode(){return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `}}const ji={kernelName:t.Diag,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i}=e,{x:s}=n,r=[...s.shape,...s.shape],a=t.util.sizeFromShape(s.shape),o=oe({inputs:{x:s},backend:i,attrs:{shape:[a]}}),u=new Yi(a),d=i.runWebGPUProgram(u,[o],o.dtype),l=oe({inputs:{x:d},backend:i,attrs:{shape:r}});return i.disposeData(o.dataId),i.disposeData(d.dataId),l}};class Qi{constructor(e){this.variableNames=["x","w"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="dilation2d"}getUserCode(){return`\n       ${y("index")} {\n         if (index < uniforms.size) {\n           let neg_infinity = -3.4e38;\n           let coords = getOutputCoords();\n           let batch = coords.x;\n           let d1 = coords.w;\n           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;\n           let hBeg = outTopLeftCorner.x;\n           let wBeg = outTopLeftCorner.y;\n\n           var curVal = neg_infinity;\n           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {\n             let hIn = hBeg + h * uniforms.dilations[0];\n\n             if (hIn >= 0 && hIn < uniforms.xShape[1]) {\n               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {\n                 let wIn = wBeg + w * uniforms.dilations[1];\n\n                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {\n                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);\n                   if (val > curVal) {\n                     curVal = val;\n                   }\n                 }\n               }\n             }\n           }\n\n           setOutputAtIndex(index, curVal);\n         }\n       }\n     `}}const Zi={kernelName:t.Dilation2D,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r,filter:a}=n,{strides:o,pad:u,dilations:d}=s,l=t.backend_util.computeDilation2DInfo(r.shape,a.shape,o,u,"NHWC",d),h=[l.padInfo.top,l.padInfo.left],p=[{type:"int32",data:[l.filterHeight,l.filterWidth]},{type:"int32",data:[...h]},{type:"int32",data:[l.strideHeight,l.strideWidth]},{type:"int32",data:[l.dilationHeight,l.dilationWidth]}],c=new Qi(l);return i.runWebGPUProgram(c,[r,a],r.dtype,p)}};class Ji{constructor(e,t){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.inShape,this.dispatchLayout=D(e.outShape),this.dispatch=P(this.dispatchLayout,e.outShape,this.workgroupSize),"float32"!==t&&"int32"!==t)throw new Error(`Dilation2DBackpropInput only supports float32 and int32\n          types, does not support ${t} type.`);this.type=t,this.shaderKey="dilation2DBackpropInput"}getUserCode(){return`\n       ${y("index")} {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var xRMax = 0;\n           var xCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     xRMax = xR;\n                     xCMax = xC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.xShape[3] *\n               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));\n           let value = getDy(b, r, c, d);\n           ${p("&result[flatIndexIn]","value",this.type)}\n         }\n       }\n     `}}class es{constructor(e,t,n){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.filterShape,this.dispatchLayout=D(e.outShape),this.dispatch=P(this.dispatchLayout,e.outShape,this.workgroupSize),"float32"!==n&&"int32"!==n)throw new Error(`Dilation2DBackpropFilter only supports float32 and int32\n          types, does not support ${n} type.`);this.type=n,this.shaderKey="dilation2DBackpropFilter"}getUserCode(){return`\n       ${y("index")} {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var wRMax = 0;\n           var wCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     wRMax = wR;\n                     wCMax = wC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);\n           let value = getDy(b, r, c, d);\n           ${p("&result[flatIndexIn]","value",this.type)}\n         }\n       }\n     `}}const ts={kernelName:t.Dilation2DBackpropFilter,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r,filter:a,dy:o}=n,{strides:u,pad:d,dilations:l}=s,h=t.backend_util.computeDilation2DInfo(r.shape,a.shape,u,d,"NHWC",l),p=a.dtype,c=new es(h,a.shape,p),f=[{type:"int32",data:[h.filterHeight,h.filterWidth]},{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]},{type:"int32",data:[t.util.sizeFromShape(h.outShape)]}],m=re({backend:i,attrs:{shape:a.shape,value:0,dtype:p}});return i.runWebGPUProgram(c,[r,a,o],p,f,m)}};const ns={kernelName:t.Dilation2DBackpropInput,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r,filter:a,dy:o}=n,{strides:u,pad:d,dilations:l}=s,h=t.backend_util.computeDilation2DInfo(r.shape,a.shape,u,d,"NHWC",l),p=r.dtype,c=new Ji(h,p),f=[{type:"int32",data:[h.filterHeight,h.filterWidth]},{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]},{type:"int32",data:[t.util.sizeFromShape(h.outShape)]}],m=re({backend:i,attrs:{shape:h.inShape,value:0,dtype:p}});return i.runWebGPUProgram(c,[r,a,o],p,f,m)}};class is{constructor(e,t,n){this.variableNames=["Image"],this.uniforms="alpha: f32,",this.workgroupSize=[64,1,1],this.pixelsOpType=c.DRAW,this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.type=t,this.textureFormat=n,this.shaderKey=`draw_${t}_${n}`}getUserCode(){let e;const t="float32"===this.type?"value":"value / 255.0";e=`\n      if (uniforms.numChannels == 1) {\n        rgba[0] = ${t};\n        rgba[1] = ${t};\n        rgba[2] = ${t};\n      } else {\n        rgba[d] = ${t};\n      }`;return`\n       @group(0) @binding(0) var outImage : texture_storage_2d<${this.textureFormat}, write>;\n       ${y("index")} {\n         if (index < uniforms.size) {\n           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);\n           for (var d = 0; d < uniforms.numChannels; d = d + 1) {\n             let value = f32(inBuf[index * uniforms.numChannels + d]);\n             ${e}\n           }\n           rgba.x = rgba.x * rgba.w;\n           rgba.y = rgba.y * rgba.w;\n           rgba.z = rgba.z * rgba.w;\n           let coords = getCoordsFromIndex(index);\n           textureStore(outImage, vec2<i32>(coords.yx), rgba);\n         }\n       }\n      `}}const ss={kernelName:t.Draw,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{image:s}=t,{canvas:r,options:a}=i,[o,u]=s.shape.slice(0,2),{imageOptions:d}=a||{},l=(null==d?void 0:d.alpha)||1,h=n.device.features.has("bgra8unorm-storage")?"bgra8unorm":"rgba8unorm",p=[o,u],c=new is(p,s.dtype,h);r.width=u,r.height=o;const f="webgpu";let m,g=r.getContext(f);g||(m=new OffscreenCanvas(u,o),g=m.getContext(f));const x=3===s.shape.length?s.shape[2]:1;g.configure({device:n.device,format:h,usage:GPUTextureUsage.STORAGE_BINDING,alphaMode:"premultiplied"});const y="int32",b=n.makeTensorInfo(p,y),w=n.tensorMap.get(b.dataId);w.resource=g.getCurrentTexture(),w.external=!0;const S=[{type:"uint32",data:[x]},{type:"float32",data:[l]}];if(n.runWebGPUProgram(c,[s],y,S,b),m){const e=r.getContext("2d");if(!e)throw new Error("Please make sure this canvas has only been used for 2d or webgpu context!");e.drawImage(m,0,0)}return n.disposeData(b.dataId),s}},rs=be({opType:O.MUL,cpuKernelImpl:Ct,supportsComplex:!0}),as={kernelName:t.Multiply,backendName:"webgpu",kernelFunc:rs};function os(e){const{inputs:t,backend:n,attrs:i}=e,{x:s}=t,{axis:r,keepDims:a}=i;return tn(s,r,a,"sum",n)}const us={kernelName:t.Sum,backendName:"webgpu",kernelFunc:os};const ds={kernelName:t.Einsum,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{equation:r}=s,a=n,{allDims:o,summedDims:u,idDims:d}=t.backend_util.decodeEinsumEquation(r,a.length);t.backend_util.checkEinsumDimSizes(o.length,d,a);const{path:l,steps:h}=t.backend_util.getEinsumComputePath(u,d),p=h.length;let c=null,f=o.length;const m=[];for(let e=0;e<p;++e){for(const n of h[e]){const{permutationIndices:e,expandDims:s}=t.backend_util.getEinsumPermutation(f,d[n]);let r;t.backend_util.isIdentityPermutation(e)?r=a[n]:(r=Zt({inputs:{x:a[n]},backend:i,attrs:{perm:e}}),m.push(r));const o=r.shape.slice();for(let e=0;e<s.length;++e)o.splice(s[e],0,1);t.util.arraysEqual(r.shape,o)||(r=oe({inputs:{x:r},backend:i,attrs:{shape:o}}),m.push(r)),null===c?c=r:(c=rs({inputs:{a:r,b:c},backend:i}),m.push(c))}e<p-1&&(l[e]>=0&&(c=os({inputs:{x:c},backend:i,attrs:{axis:l[e]-(o.length-f),keepDims:!1}}),m.push(c)),f--)}for(const e of m)e!==c&&i.disposeData(e.dataId);return c}},ls=ye({opType:M.ELU}),hs={kernelName:t.Elu,backendName:"webgpu",kernelFunc:ls},ps={kernelName:t.EluGrad,backendName:"webgpu",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:i,y:s}=t,r=new pe(O.ELU_DER,i.shape,s.shape);return n.runWebGPUProgram(r,[i,s],i.dtype)}},cs=be({opType:O.EQUAL,dtype:"bool",cpuKernelImpl:ut}),fs={kernelName:t.Equal,backendName:"webgpu",kernelFunc:cs},ms=ye({opType:M.ERF}),gs={kernelName:t.Erf,backendName:"webgpu",kernelFunc:ms},xs=ye({opType:M.EXP,cpuKernelImpl:dt,dtype:"float32"}),ys={kernelName:t.Exp,backendName:"webgpu",kernelFunc:xs};function bs(e){const{inputs:n,attrs:i,backend:s}=e,{dim:r}=i,{input:a}=n,o=a.shape.length,u=a.shape.slice();let d=r;return r<0&&(t.util.assert(-(o+1)<=r,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),d=o+r+1),u.splice(d,0,1),oe({inputs:{x:a},backend:s,attrs:{shape:u}})}const ws={kernelName:t.ExpandDims,backendName:"webgpu",kernelFunc:bs},Ss=ye({opType:M.EXPM1,cpuKernelImpl:lt}),ks={kernelName:t.Expm1,backendName:"webgpu",kernelFunc:Ss};class Cs{constructor(e,t){this.variableNames=["real","imag"],this.outputShape=[],this.uniforms="exponentMultiplier : f32, denominator: f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.component=e,this.shaderKey=`fft_${e}`}getUserCode(){return`\n    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {\n      ${"real"===this.component?"return real * expR - imag * expI;":"return real * expI + imag * expR;"}\n    }\n\n    fn mulMatDFT(batch: i32, index: i32) -> f32 {\n      let indexRatio = f32(index) / f32(uniforms.realShape[1]);\n      let exponentMultiplierTimesIndexRatio =\n          uniforms.exponentMultiplier * indexRatio;\n\n      var result = 0.0;\n\n      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {\n        // x = (-2|2 * PI / N) * index * i;\n        let x = exponentMultiplierTimesIndexRatio * f32(i);\n        let expR = cos(x);\n        let expI = sin(x);\n        let real = getReal(batch, i);\n        let imag = getImag(batch, i);\n\n        result = result +\n            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;\n      }\n\n      return result;\n    }\n\n    ${y("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));\n      }\n    }\n  `}}function vs(e,n,i){const s=i.tensorMap.get(e.dataId),r=t.util.sizeFromShape(e.shape),a=e.shape[e.shape.length-1],o=[],u=oe({inputs:{x:e},backend:i,attrs:{shape:[r/a,a]}});o.push(u);const d=u.shape,l=new Cs("real",d),h=new Cs("imag",d),p=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:d},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:d}],c=[{type:"float32",data:[n?2*Math.PI:-2*Math.PI]},{type:"float32",data:[n?d[1]:1]}],f=i.runWebGPUProgram(l,p,"float32",c);o.push(f);const m=i.runWebGPUProgram(h,p,"float32",c);o.push(m);const g=me({inputs:{real:f,imag:m},backend:i});o.push(g);const x=oe({inputs:{x:g},backend:i,attrs:{shape:e.shape}});return o.forEach((e=>i.disposeData(e.dataId))),x}const Is={kernelName:t.FFT,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:i}=t;return vs(i,!1,n)}};class Rs{constructor(e){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="flipLeftRight"}getUserCode(){return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let coordX = uniforms.xShape[2] - coords[2] - 1;\n          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);\n          setOutputAtIndex(index, outputValue);\n        }\n      }\n    `}}const $s={kernelName:t.FlipLeftRight,backendName:"webgpu",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,i=t,s=new Rs(n.shape);return i.runWebGPUProgram(s,[n],n.dtype)}},Ps=ye({opType:M.FLOOR,cpuKernelImpl:ht}),zs={kernelName:t.Floor,backendName:"webgpu",kernelFunc:Ps},As=be({opType:O.FLOOR_DIV,cpuKernelImpl:pt,dtype:"int32"}),Ns={kernelName:t.FloorDiv,backendName:"webgpu",kernelFunc:As};class Ds{constructor(e,t,n=!1){this.pixelsOpType=c.FROM_PIXELS,this.outputShape=[0],this.variableNames=[],this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize,[t,1,1]),this.importVideo=n,this.shaderKey=`fromPixels_${this.importVideo}`}getUserCode(){const e=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)";return`\n      @binding(1) @group(0) var src: ${this.importVideo?"texture_external":"texture_2d<f32>"};\n      ${y("index")} {\n        let flatIndex = index * uniforms.numChannels;\n        if (flatIndex < uniforms.size) {\n          let coords = getCoordsFromIndex(flatIndex);\n          let values = ${e};\n          for (var i = 0; i < uniforms.numChannels; i = i + 1) {\n            result[flatIndex + i] = i32(floor(255.0 * values[i]));\n          }\n        }\n      }\n  `}}const Ts={kernelName:t.FromPixels,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e;let{pixels:r}=n;const{numChannels:a}=s;if(null==r)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");const o="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,d="undefined"!=typeof HTMLCanvasElement&&r instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&r instanceof OffscreenCanvas,l="undefined"!=typeof ImageBitmap&&r instanceof ImageBitmap,[h,p]=o?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[p,h,a],f=o||u;if(l||d||f){let e;{if(f){const e=t.env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=Fs&&e===_s||(_s=e,Fs=document.createElement("canvas").getContext("2d",{willReadFrequently:_s})),Fs.canvas.width=h,Fs.canvas.height=p,Fs.drawImage(r,0,0,h,p),r=Fs.canvas}const n=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,s="rgba8unorm",a=i.textureManager.acquireTexture(c[1],c[0],s,n);i.queue.copyExternalImageToTexture({source:r},{texture:a},[c[1],c[0]]),e=a}const n=t.util.sizeFromShape(c),s=t.util.computeStrides(c),o=new Ds(c,a,false),u=[{type:"uint32",data:[n]},{type:"uint32",data:[a]},{type:"uint32",data:[...s]}],d=i.makeTensorInfo([p,h],"int32");i.tensorMap.get(d.dataId).resource=e;const l=i.runWebGPUProgram(o,[d],"int32",u);return i.disposeData(d.dataId),l}const m=r.data;let g=m;if(null!=a&&4!==a){g=new Uint8Array(r.width*r.height*a);const e=m.length;let t=0;for(let n=0;n<e;n++)n%4<a&&(g[t++]=m[n])}const x=i.makeTensorInfo(c,"int32",new Int32Array(g));return i.uploadToGPU(x.dataId),x}};let Fs,_s=t.env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");class Es{constructor(e,n,i,s,r){this.uniforms="varianceEpsilon : f32,",this.workgroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],t.backend_util.assertAndGetBroadcastShape(e,n),t.backend_util.assertAndGetBroadcastShape(e,i),this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),null!=s&&(t.backend_util.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset")),null!=r&&(t.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale")),this.offsetShape=s,this.scaleShape=r,this.shaderKey="batchNorm"}getUserCode(){let e="0.0";null!=this.offsetShape&&(e="getOffsetByOutputIndex(index)");let t="1.0";null!=this.scaleShape&&(t="getScaleByOutputIndex(index)");return`\n      ${y("index")} {\n        if (index < uniforms.size)\n        {\n          let xValue = getXByOutputIndex(index);\n          let meanValue = getMeanByOutputIndex(index);\n          let varianValue = getVarianceByOutputIndex(index);\n          let offsetValue = ${e};\n          let scaleValue = ${t};\n          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));\n          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));\n        }\n      }\n  `}}const Ls={kernelName:t.FusedBatchNorm,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:i,scale:s,offset:r,mean:a,variance:o}=e,{varianceEpsilon:u}=t,d=n,l=[i,a,o];let h=null;null!=r&&(h=r.shape,l.push(r));let p=null;null!=s&&(p=s.shape,l.push(s));const c=new Es(i.shape,a.shape,o.shape,h,p),f=[{type:"float32",data:[u]}];return d.runWebGPUProgram(c,l,i.dtype,f)}};const Ws={kernelName:t.FusedConv2D,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r,filter:a,bias:o,preluActivationWeights:u}=n,{strides:d,pad:l,dataFormat:h,dilations:p,dimRoundingMode:c,activation:f,leakyreluAlpha:m}=s,g=t.backend_util.convertConv2DDataFormat(h);return pi({x:r,filter:a,convInfo:t.backend_util.computeConv2DInfo(r.shape,a.shape,d,p,l,c,!1,g),backend:i,bias:o,preluActivationWeights:u,leakyreluAlpha:m,activation:f})}};const Bs={kernelName:t.FusedDepthwiseConv2D,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r,filter:a,bias:o,preluActivationWeights:u}=n,{strides:d,pad:l,dilations:h,dimRoundingMode:p,activation:c,leakyreluAlpha:f}=s;let m=h;null==m&&(m=[1,1]),t.util.assert(t.backend_util.eitherStridesOrDilationsAreOne(d,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${d} and dilations '${m}'`));const g=t.backend_util.computeConv2DInfo(r.shape,a.shape,d,m,l,p,!0),x=[r,a],y=null!=o,b=null!=u;y&&x.push(o),b&&x.push(u);const w=[{type:"int32",data:[g.padInfo.top,g.padInfo.left]},{type:"int32",data:[g.inHeight,g.inWidth]}];let S;return g.outHeight>4&&g.outWidth>4&&g.strideWidth<=2&&g.inChannels===g.outChannels&&1===g.dilationHeight&&1===g.dilationWidth&&g.inChannels%4==0?(S=new Mi(g,y,c,b),w.push({type:"int32",data:[S.virtualWidth]})):(S=new Vi(g,y,c,b),w.push({type:"int32",data:[g.filterHeight]},{type:"int32",data:[g.filterWidth]},{type:"int32",data:[g.strideHeight,g.strideWidth]},{type:"int32",data:[g.dilationHeight,g.dilationWidth]})),"leakyrelu"===c&&(w.push({type:"float32",data:[f]}),S.uniforms+=" alpha : f32,"),i.runWebGPUProgram(S,x,"float32",w)}};class Os{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`gathernd_${e}`,this.sliceDim=e,this.uniforms=`sliceDim : i32, strides : ${g(e)},`}getUserCode(){let e;e=this.sliceDim>1?"uniforms.strides[j]":"uniforms.strides";return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          var flattenIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexTemp = i32(round(getIndices(coords[0], j)));\n            let strideNum = ${e};\n            flattenIndex = flattenIndex + indexTemp * strideNum;\n          }\n\n          setOutputAtIndex(index, getA(flattenIndex, coords[1]));\n        }\n      }\n      `}}const Us={kernelName:t.GatherNd,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i}=e,{params:s,indices:r}=n,a=r.shape,o=a[a.length-1],u=t.util.sizeFromShape(s.shape),[d,l,h,p]=t.backend_util.prepareAndValidate(s,r),c=oe({inputs:{x:r},backend:i,attrs:{shape:[l,o]}}),f=oe({inputs:{x:s},backend:i,attrs:{shape:[t.util.sizeFromShape(s.shape)/h,h]}});if(i.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const e=i.readSync(r.dataId),t=i.bufferSync(s),n=ct(e,t,s.dtype,l,o,h,p,s.shape,u);return i.makeTensorInfo(d,s.dtype,n.values)}const m=new Os(o,[l,h]),g=[{type:"int32",data:[o]},{type:"int32",data:p}],x=i.runWebGPUProgram(m,[f,c],f.dtype,g),y=oe({inputs:{x:x},backend:i,attrs:{shape:d}});return i.disposeData(c.dataId),i.disposeData(f.dataId),i.disposeData(x.dataId),y}};class Ms{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.slice(),this.aShape=e,this.outputShape=t,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gather"}getUserCode(){const e=function(e){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let i=0;i<e.length;i++)2===i?n.push("indexZ"):n.push(`${t[i]}`);return n.join()}(this.aShape);return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let indexZ = i32(getIndices(resRC.x, resRC.z));\n          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);\n          setOutputAtIndex(index, inBounds * getA(${e}));\n        }\n      }\n    `}}function Vs(e){const{inputs:n,backend:i,attrs:s}=e,{x:r,indices:a}=n,{axis:o,batchDims:u}=s,d=t.util.parseAxisParam(o,r.shape)[0],l=t.backend_util.segment_util.collectGatherOpShapeInfo(r,a,d,u),h=t.util.sizeFromShape(a.shape),p=[],c=oe({inputs:{x:r},backend:i,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),f=oe({inputs:{x:a},backend:i,attrs:{shape:[l.batchSize,h/l.batchSize]}});p.push(c),p.push(f);const m=[l.batchSize,l.outerSize,h/l.batchSize,l.sliceSize];if(i.shouldExecuteOnCPU([r,a])){const e=i.tensorMap.get(f.dataId).values,n=t.buffer(f.shape,f.dtype,e),s=i.tensorMap.get(c.dataId).values,r=t.buffer(c.shape,c.dtype,s),a=ft(r,n,m);return p.forEach((e=>i.disposeData(e.dataId))),i.makeTensorInfo(l.outputShape,a.dtype,a.values)}const g=new Ms(c.shape,m),x=i.runWebGPUProgram(g,[c,f],c.dtype);p.push(x);const y=oe({inputs:{x:x},backend:i,attrs:{shape:l.outputShape}});return p.forEach((e=>i.disposeData(e.dataId))),y}const Gs={kernelName:t.GatherV2,backendName:"webgpu",kernelFunc:Vs},Hs=be({opType:O.GREATER,cpuKernelImpl:gt,dtype:"bool"}),Xs={kernelName:t.Greater,backendName:"webgpu",kernelFunc:Hs},Ks=be({opType:O.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:mt}),qs={kernelName:t.GreaterEqual,backendName:"webgpu",kernelFunc:Ks};const Ys={kernelName:t.IFFT,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:i}=t;return vs(i,!0,n)}},js=ye({opType:M.IS_FINITE,dtype:"bool"}),Qs={kernelName:t.IsFinite,backendName:"webgpu",kernelFunc:js},Zs=ye({opType:M.IS_INF,dtype:"bool"}),Js={kernelName:t.IsInf,backendName:"webgpu",kernelFunc:Zs},er=ye({opType:M.IS_NAN,dtype:"bool"}),tr={kernelName:t.IsNan,backendName:"webgpu",kernelFunc:er};const nr={kernelName:t.LeakyRelu,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:s}=t,{alpha:r}=i,a=[{type:"float32",data:[r]}],o=new xe(s.shape,M.LEAKYRELU,"alpha : f32,");return n.runWebGPUProgram(o,[s],"float32",a)}},ir=be({opType:O.LESS,dtype:"bool",cpuKernelImpl:yt}),sr={kernelName:t.Less,backendName:"webgpu",kernelFunc:ir},rr=be({opType:O.LESS_EQUAL,dtype:"bool",cpuKernelImpl:xt}),ar={kernelName:t.LessEqual,backendName:"webgpu",kernelFunc:rr};class or{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="start : f32, step : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="linSpace"}getUserCode(){return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);\n        }\n      }\n    `}}const ur={kernelName:t.LinSpace,backendName:"webgpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:i,stop:s,num:r}=n,a=(s-i)/(r-1),o=new or(r),u=[{type:"float32",data:[i]},{type:"float32",data:[a]}];return t.runWebGPUProgram(o,[],"float32",u)}},dr=ye({opType:M.LOG,cpuKernelImpl:bt}),lr={kernelName:t.Log,backendName:"webgpu",kernelFunc:dr},hr=ye({opType:M.LOG1P}),pr={kernelName:t.Log1p,backendName:"webgpu",kernelFunc:hr},cr=be({opType:O.LOGICAL_AND,dtype:"bool"}),fr={kernelName:t.LogicalAnd,backendName:"webgpu",kernelFunc:cr},mr=ye({opType:M.LOGICAL_NOT}),gr={kernelName:t.LogicalNot,backendName:"webgpu",kernelFunc:mr},xr=be({opType:O.LOGICAL_OR}),yr={kernelName:t.LogicalOr,backendName:"webgpu",kernelFunc:xr},br="\n  var powValue = 0.0;\n  let basis = uniforms.bias + uniforms.alpha * sum;\n  if (uniforms.beta == 0.5) {\n    powValue = inverseSqrt(basis);\n  } else if (uniforms.beta == 1.0) {\n    powValue = 1.0 / basis;\n  } else {\n    powValue = exp(log(basis) * (-uniforms.beta));\n  }\n";class wr{constructor(e){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn"}getUserCode(){return`\n    ${y("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n        let d = coords[3];\n\n        let x = getX(b, r, c, d);\n        var sum = 0.0;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let idx = d + i;\n          if (idx >= 0 && idx < uniforms.xShape[3]) {\n            let z = getX(b, r, c, idx);\n            sum = sum + z * z;\n          }\n        }\n        ${br}\n\n        setOutputAtIndex(index, x * powValue);\n      }\n    }\n  `}}class Sr{constructor(e,n){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[256,1,1],this.maxAllowRadius=16,t.util.assert(n<=this.maxAllowRadius,(()=>`Radius must be less than or equal to ${this.maxAllowRadius}, current radius is ${n}`)),this.outputShape=e,this.elementsPerWorkgroup=this.workgroupSize[0]-2*this.maxAllowRadius,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=P(this.dispatchLayout,this.outputShape,[this.elementsPerWorkgroup,this.workgroupSize[1],this.workgroupSize[2]]),this.shaderKey="lrn_shared"}getUserCode(){return`\n    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;\n    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};\n    const maxAllowRadius = ${this.maxAllowRadius};\n\n    ${y()} {\n      let localDepth = i32(localId.x);\n      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;\n      let xDepth = workgroupDepth + localDepth - maxAllowRadius;\n      let b = i32(globalId.z) / uniforms.xShape[1];\n      let r = i32(globalId.z) - b * uniforms.xShape[1];\n      let c = i32(globalId.y);\n      let d = workgroupDepth + localDepth;\n\n      var x = 0.0;\n      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {\n        x = getX(b, r, c, xDepth);\n      }\n      lrnSub[localDepth] = x;\n      workgroupBarrier();\n\n      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {\n        var sum = 0.0;\n        let index = localDepth + maxAllowRadius;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let z = lrnSub[index + i];\n          sum = sum + z * z;\n        }\n        ${br}\n\n        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);\n      }\n    } `}}const kr={kernelName:t.LRN,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:s}=t,{depthRadius:r,bias:a,alpha:o,beta:u}=i;let d;d=r>16?new wr(s.shape):new Sr(s.shape,r);const l=[{type:"int32",data:[r]},{type:"float32",data:[a]},{type:"float32",data:[o]},{type:"float32",data:[u]}];return n.runWebGPUProgram(d,[s],s.dtype,l)}};class Cr{constructor(e){this.outputShape=[],this.variableNames=["inputImage","outputImage","dy"],this.uniforms="depthRadius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn_grad"}getUserCode(){return`\n    ${y("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n\n        let MIN_DEPTH_BEGIN = 0;\n        let MAX_DEPTH_END = uniforms.outShape[3];\n        var result = 0.0;\n        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {\n          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);\n          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);\n\n          var norm = 0.0;\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            } else {\n              break;\n            }\n          }\n\n          norm = uniforms.alpha * norm + uniforms.bias;\n\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              var dyi = -2.0 * uniforms.alpha * uniforms.beta\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * uniforms.beta);\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, result);\n      }\n    }\n  `}}const vr={kernelName:t.LRNGrad,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:s,y:r,dy:a}=t,{depthRadius:o,bias:u,alpha:d,beta:l}=i,h=new Cr(s.shape),p=[{type:"int32",data:[o]},{type:"float32",data:[u]},{type:"float32",data:[d]},{type:"float32",data:[l]}];return n.runWebGPUProgram(h,[s,r,a],s.dtype,p)}},Ir=be({opType:O.MAX,cpuKernelImpl:St}),Rr={kernelName:t.Maximum,backendName:"webgpu",kernelFunc:Ir};const $r={kernelName:t.MaxPool,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{filterSize:a,strides:o,pad:u,dimRoundingMode:d}=s;return In(r,t.backend_util.computePool2DInfo(r.shape,a,o,1,u,d),"max",i)}};const Pr={kernelName:t.MaxPool3D,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{filterSize:a,strides:o,pad:u,dataFormat:d,dimRoundingMode:l}=s,h=t.backend_util.computePool3DInfo(r.shape,a,o,[1,1,1],u,l,d),p=new wn(h,"max"),c=[{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.padInfo.front,h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.inDepth,h.inHeight,h.inWidth]},{type:"int32",data:[h.effectiveFilterDepth,h.effectiveFilterHeight,h.effectiveFilterWidth]}];return i.runWebGPUProgram(p,[r],r.dtype,c)}};class zr{constructor(e){this.variableNames=["dy","maxPos"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool2DBackprop"}getUserCode(){return`\n      ${y("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            let curPosValue = wR * uniforms.filterDims[1] + wC;\n            let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}class Ar{constructor(e){this.variableNames=["dy","maxPos"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool3DBackprop"}getUserCode(){return`\n      ${y("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;\n\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;\n              let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}const Nr={kernelName:t.MaxPool3DGrad,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{dy:r,input:a}=n,o=a,{filterSize:u,strides:d,pad:l,dimRoundingMode:h}=s,p=t.backend_util.computePool3DInfo(o.shape,u,d,[1,1,1],l,h),c=new wn(p,"max",!0);let f=[{type:"int32",data:[p.strideDepth,p.strideHeight,p.strideWidth]},{type:"int32",data:[p.padInfo.front,p.padInfo.top,p.padInfo.left]},{type:"int32",data:[p.inDepth,p.inHeight,p.inWidth]},{type:"int32",data:[p.effectiveFilterDepth,p.effectiveFilterHeight,p.effectiveFilterWidth]}];const m=i.runWebGPUProgram(c,[o],"int32",f),g=new Ar(p);f=[{type:"int32",data:[p.strideDepth,p.strideHeight,p.strideWidth]},{type:"int32",data:[p.effectiveFilterDepth-1-p.padInfo.front,p.effectiveFilterHeight-1-p.padInfo.top,p.effectiveFilterWidth-1-p.padInfo.left]},{type:"int32",data:[p.effectiveFilterDepth,p.effectiveFilterHeight,p.effectiveFilterWidth]},{type:"int32",data:[p.outDepth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]}];const x=i.runWebGPUProgram(g,[r,m],o.dtype,f);return i.disposeData(m.dataId),x}};const Dr={kernelName:t.MaxPoolGrad,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{dy:r,input:a,output:o}=n,u=a;_([a,o],"maxPoolGrad");const{filterSize:d,strides:l,pad:h,dimRoundingMode:p}=s,c=t.backend_util.computePool2DInfo(u.shape,d,l,1,h,p),f=new bn(c,"max",!0);let m=[{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[c.inHeight,c.inWidth]},{type:"int32",data:[c.effectiveFilterHeight,c.effectiveFilterWidth]}];const g=i.runWebGPUProgram(f,[u],"int32",m),x=new zr(c);m=[{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.effectiveFilterHeight-1-c.padInfo.top,c.effectiveFilterWidth-1-c.padInfo.left]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[c.effectiveFilterHeight,c.effectiveFilterWidth]},{type:"int32",data:[c.outHeight]},{type:"int32",data:[c.outWidth]}];const y=i.runWebGPUProgram(x,[r,g],u.dtype,m);return i.disposeData(g.dataId),y}};const Tr={kernelName:t.MaxPoolWithArgmax,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{filterSize:r,strides:a,pad:o,includeBatchInIndex:u}=s,{x:d}=n;t.util.assert(4===d.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${d.shape.length}.`));const l=[1,1];t.util.assert(t.backend_util.eitherStridesOrDilationsAreOne(a,l),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${l}'`));const h=t.backend_util.computePool2DInfo(d.shape,r,a,l,o),p=[{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]},{type:"int32",data:[h.inHeight,h.inWidth]},{type:"int32",data:[h.effectiveFilterHeight,h.effectiveFilterWidth]}];let c=new bn(h,"max",!1);const f=i.runWebGPUProgram(c,[d],d.dtype,p);return c=new bn(h,"max",!0,!0,u),[f,i.runWebGPUProgram(c,[d],"int32",p)]}};const Fr={kernelName:t.Min,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:s}=t,{axis:r,keepDims:a}=i;return tn(s,r,a,"min",n)}},_r=be({opType:O.MIN,cpuKernelImpl:kt}),Er={kernelName:t.Minimum,backendName:"webgpu",kernelFunc:_r};class Lr{constructor(e,t,n){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1])),this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,t.map(((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`})),this.offset="reflect"===n?0:1,this.shaderKey=`mirrorPad_${n}`}getUserCode(){const e=this.xShape.length,t=this.xShape.map(((e,t)=>`uniforms.pad${t}[0]`)).join(","),n=this.xShape.map(((t,n)=>`uniforms.pad${n}[0] + uniforms.xShape${e>1?`[${n}]`:""}`)).join(","),i=1===e?"start":"start[i]",s=1===e?"end":"end[i]",r=1===e?"outC":"outC[i]",a=g(e),o=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let start = ${a}(${t});\n          let end = ${a}(${n});\n          var outC = getCoordsFromIndex(index);\n          for (var i = 0; i < ${e}; i = i + 1) {\n            if (${r} < ${i}) {\n              ${r} = ${i} * 2 - ${r} - ${this.offset};\n            } else if(${r} >= ${s}) {\n              ${r} = (${s} - 1) * 2 - ${r} + ${this.offset};\n            }\n          }\n          let coords = outC - start;\n          setOutputAtIndex(index, getX(${o}));\n        }\n      }\n    `}}const Wr={kernelName:t.MirrorPad,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:i}=e,{paddings:s,mode:r}=t,a=n,o=s.map((e=>({type:"int32",data:[e[0],e[1]]}))),u=new Lr(i.shape,s,r);return a.runWebGPUProgram(u,[i],i.dtype,o)}},Br=be({opType:O.MOD}),Or={kernelName:t.Mod,backendName:"webgpu",kernelFunc:Br};class Ur{constructor(e,t){this.variableNames=["probs"],this.outputShape=[],this.uniforms="seed : f32, numOutcomes: i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="multinomial"}getUserCode(){return`\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {\n      let HASHSCALE1 = 443.8975;\n      let p = resultUV * seed;\n      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);\n      p3 = p3 + dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${y("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n\n        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),\n            f32(coords[0]) / f32(uniforms.outShape[0]));\n        let r = random(uniforms.seed, resUV);\n        var cdf = 0.0;\n        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {\n          cdf = cdf + getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutputAtIndexI32(index, i);\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);\n      }\n    }\n  `}}class Mr{constructor(e){this.variableNames=["logits"],this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=[this.outputShape[0],1,1],this.outputShape[1]>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.shaderKey="softmax"}getUserCode(){return`\n    var<workgroup> buf : array<f32, ${this.workgroupSize[0]}>;\n    var<workgroup> rowMaxShared : f32;\n    var<workgroup> rowSumShared : f32;\n    const blockSize = ${this.workgroupSize[0]};\n    ${y("index")} {\n      let row = index / blockSize;\n      let tid = i32(localId.x);\n      let cols = uniforms.outShape[1];\n\n      var threadMax = -3.402823e+38f;\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = getLogits(row, col);\n        threadMax = max(threadMax, value);\n      }\n      if (tid < cols) {\n        buf[tid] = threadMax;\n      }\n      workgroupBarrier();\n\n      var reduceSize = min(cols, blockSize);\n      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n        reduceSize = currSize + (reduceSize & 1);\n        if (tid < currSize) {\n          buf[tid] = max(buf[tid], buf[tid + reduceSize]);\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowMaxShared = buf[0];\n      }\n      workgroupBarrier();\n\n      var threadSum = 0.0;\n      for (var col = tid; col < cols; col += blockSize) {\n        let subExp = exp(getLogits(row, col) - rowMaxShared);\n        threadSum += subExp;\n      }\n      buf[tid] = threadSum;\n      workgroupBarrier();\n\n      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n        if (tid < currSize) {\n          buf[tid] = buf[tid] + buf[tid + currSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowSumShared = buf[0];\n      }\n      workgroupBarrier();\n\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;\n        setOutputAtCoords(row, col, value);\n      }\n  }\n    `}}function Vr(e){const{inputs:n,backend:i,attrs:s}=e,{logits:r}=n,{dim:a}=s,o=oe({inputs:{x:r},backend:i,attrs:{shape:[t.util.sizeFromShape(r.shape)/r.shape[a],r.shape[a]]}}),u=new Mr(o.shape),d=i.runWebGPUProgram(u,[o],r.dtype),l=oe({inputs:{x:d},backend:i,attrs:{shape:r.shape}});return i.disposeData(o.dataId),i.disposeData(d.dataId),l}const Gr={kernelName:t.Softmax,backendName:"webgpu",kernelFunc:Vr};const Hr={kernelName:t.Multinomial,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{logits:s}=t,{numSamples:r,seed:a,normalized:o}=i,u=o?s:Vr({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),d=u.shape[0],l=u.shape[1],h=new Ur(d,r),p=[{type:"float32",data:[a]},{type:"int32",data:[l]}],c=n.runWebGPUProgram(h,[u],"int32",p);return o||n.disposeData(u.dataId),c}};const Xr={kernelName:t.Neg,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:i}=t;if(n.shouldExecuteOnCPU([i])){const e=n.tensorMap.get(i.dataId),[t,s]=vt(e.values,i.shape,i.dtype);return n.makeTensorInfo(s,i.dtype,t)}const s=new xe(i.shape,M.NEG);return n.runWebGPUProgram(s,[i],i.dtype)}};const Kr={kernelName:t.NonMaxSuppressionV3,backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:i,attrs:s}=e,{boxes:r,scores:a}=n,{maxOutputSize:o,iouThreshold:u,scoreThreshold:d}=s,l=i.readSync(r.dataId),h=i.readSync(a.dataId),{selectedIndices:p}=t.kernel_impls.nonMaxSuppressionV3Impl(l,h,o,u,d);return i.makeTensorInfo([p.length],"int32",new Int32Array(p))}};const qr={kernelName:t.NonMaxSuppressionV5,backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:i,attrs:s}=e,{boxes:r,scores:a}=n,{maxOutputSize:o,iouThreshold:u,scoreThreshold:d,softNmsSigma:l}=s,h=i.readSync(r.dataId),p=i.readSync(a.dataId),c=o,f=u,m=d,g=l,{selectedIndices:x,selectedScores:y}=t.kernel_impls.nonMaxSuppressionV5Impl(h,p,c,f,m,g);return[i.makeTensorInfo([x.length],"int32",new Int32Array(x)),i.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class Yr{constructor(e,t){this.variableNames=["x"],this.uniforms="onValue : f32, offValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="onehot"}getUserCode(){return`\n      ${y("index")} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,\n                                      f32(i32(round(getX(coords.x))) == coords.y)));\n        }\n      }\n    `}}const jr={kernelName:t.OneHot,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{indices:r}=n,{dtype:a,depth:o,onValue:u,offValue:d}=s,l=t.util.sizeFromShape(r.shape),h=new Yr(l,o),p=oe({inputs:{x:r},backend:i,attrs:{shape:[l]}}),c=[{type:"float32",data:[u]},{type:"float32",data:[d]}],f=i.runWebGPUProgram(h,[p],a,c);i.disposeData(p.dataId);const m=oe({inputs:{x:f},backend:i,attrs:{shape:[...r.shape,o]}});return i.disposeData(f.dataId),m}};function Qr(e){const{inputs:t,backend:n}=e,{x:i}=t;if("complex64"===i.dtype){const e=Hn({inputs:{input:i},backend:n}),t=Qr({inputs:{x:e},backend:n}),s=ii({inputs:{input:i},backend:n}),r=Qr({inputs:{x:s},backend:n}),a=me({inputs:{real:t,imag:r},backend:n});return n.disposeData(e.dataId),n.disposeData(t.dataId),n.disposeData(s.dataId),n.disposeData(r.dataId),a}return re({attrs:{shape:i.shape,dtype:i.dtype,value:"string"===i.dtype?"":0},backend:n})}const Zr={kernelName:t.ZerosLike,backendName:"webgpu",kernelFunc:Qr};const Jr={kernelName:t.OnesLike,backendName:"webgpu",kernelFunc:function e(t){const{inputs:n,backend:i}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=Hn({inputs:{input:s},backend:i}),n=e({inputs:{x:t},backend:i}),r=ii({inputs:{input:s},backend:i}),a=Qr({inputs:{x:r},backend:i}),o=me({inputs:{real:n,imag:a},backend:i});return i.disposeData(t.dataId),i.disposeData(n.dataId),i.disposeData(r.dataId),i.disposeData(a.dataId),o}return re({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:i})}};const ea={kernelName:t.Pack,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{axis:r}=s;if(1===n.length)return bs({inputs:{input:n[0]},backend:i,attrs:{dim:r}});const a=n[0].shape,o=n[0].dtype;n.forEach((e=>{t.util.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),t.util.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],d=ai({inputs:n.map((e=>{const t=bs({inputs:{input:e},backend:i,attrs:{dim:r}});return u.push(t),t})),backend:i,attrs:{axis:r}});return u.forEach((e=>i.disposeData(e.dataId))),d}};function ta(e,t=!1){const n=e.length,i=g(n),s=e.map(((e,t)=>`uniforms.pad${t}[0]`)).join(","),r=e.map(((e,t)=>`uniforms.pad${t}[0] + uniforms.xShape${n>1?`[${t}]`:""}`)).join(",");return`\n        let start = ${n>1?`${i}(${s})`:`${s}`};\n        let end = ${n>1?`${i}(${r})`:`${r}`};\n        if (${n>1?"any(paddedCoords < start)":"paddedCoords < start"} || ${n>1?"any(paddedCoords >= end)":"paddedCoords >= end"}) {\n          setOutputAtIndex(index, ${t?0:"uniforms.constantValue"});\n        } else {\n          let coords = paddedCoords - start;\n          setOutputAtIndex(index, getX(${n>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n):"coords"}));\n        }\n  `}class na{constructor(e,t){this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1])),this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),t.map(((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`})),this.xShape=e,this.shaderKey="pad"}getUserCode(){return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let paddedCoords = getCoordsFromIndex(index);\n          ${ta(this.xShape)}\n        }\n      }\n    `}}const ia={kernelName:t.PadV2,backendName:"webgpu",kernelFunc:e=>{const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{paddings:a,constantValue:o}=s;if(a.every((e=>t.util.arraysEqual(e,[0,0]))))return ce({inputs:{x:r},backend:i});if(0===t.util.sizeFromShape(r.shape)){return re({backend:i,attrs:{shape:a.map(((e,t)=>e[0]+r.shape[t]+e[1])),value:o,dtype:r.dtype}})}const u=[{type:"float32",data:[o]}];a.map((e=>u.push({type:"int32",data:[e[0],e[1]]})));const d=new na(r.shape,a);return i.runWebGPUProgram(d,[r],r.dtype,u)}},sa=be({opType:O.POW}),ra={kernelName:t.Pow,backendName:"webgpu",kernelFunc:sa};const aa={kernelName:t.Prelu,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:i,alpha:s}=t,r=new pe(O.PRELU,i.shape,s.shape);return n.runWebGPUProgram(r,[i,s],"float32")}};const oa={kernelName:t.Prod,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:s}=t,{axis:r,keepDims:a}=i;return tn(s,r,a,"prod",n)}},ua={kernelName:t.Range,backendName:"webgpu",kernelFunc:e=>{const{backend:t,attrs:n}=e,{start:i,stop:s,step:r,dtype:a}=n,o=$t(i,s,r,a);return t.makeTensorInfo([o.length],a,o)}},da=be({opType:O.DIV}),la={kernelName:t.RealDiv,backendName:"webgpu",kernelFunc:da},ha=ye({opType:M.RECIPROCAL}),pa={kernelName:t.Reciprocal,backendName:"webgpu",kernelFunc:ha},ca=ye({opType:M.RELU}),fa={kernelName:t.Relu,backendName:"webgpu",kernelFunc:ca},ma=ye({opType:M.RELU6}),ga={kernelName:t.Relu6,backendName:"webgpu",kernelFunc:ma};class xa{constructor(e,t,n){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,n,e[3]],this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="resizeBilinear"}getUserCode(){return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC =\n            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *\n            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);\n\n          // Compute the four integer indices.\n          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);\n          let sourceCeilRC = vec2<i32>(\n            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));\n\n          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);\n\n          let top = topLeft + (topRight - topLeft) * fracRC.y;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          let newValue = top + (bottom - top) * fracRC.x;\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `}}const ya={kernelName:t.ResizeBilinear,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{images:s}=t,{alignCorners:r,size:a,halfPixelCenters:o}=i,[u,d]=a,l=[{type:"float32",data:[r&&u>1?1:0,r&&d>1?1:0]},{type:"float32",data:[o?.5:0]}],h=new xa(s.shape,u,d);return n.runWebGPUProgram(h,[s],"float32",l)}};class ba{constructor(e,t){this.variableNames=["dy"],this.uniforms="effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,\n       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey=`resizeBilinearBackprop_${t}`}getUserCode(){return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let dxR = f32(dyR) * uniforms.heightScale;\n              let topDxRIndex = i32(floor(dxR));\n              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));\n              let dxRLerp = dxR - f32(topDxRIndex);\n              let inverseDxRLerp = 1.0 - dxRLerp;\n\n              let dxC = f32(dyC) * uniforms.widthScale;\n              let leftDxCIndex = i32(floor(dxC));\n              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));\n              let dxCLerp = dxC - f32(leftDxCIndex);\n              let inverseDxCLerp = 1.0 - dxCLerp;\n\n              if (r == topDxRIndex && c == leftDxCIndex) {\n                // topLeft\n                accumulator +=\n                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n              }\n\n              if (r == topDxRIndex && c == rightDxCIndex) {\n                // topRight\n                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == leftDxCIndex) {\n                // bottomLeft\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == rightDxCIndex) {\n                // bottomRight\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    `}}const wa={kernelName:t.ResizeBilinearGrad,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{images:s,dy:r}=t,{alignCorners:a}=i,[,o,u]=s.shape,[,d,l]=r.shape,h=[a&&d>1?o-1:o,a&&l>1?u-1:u],p=[a&&d>1?d-1:d,a&&l>1?l-1:l],c=h[0]/p[0],f=h[1]/p[1],m=1/c,g=1/f,x=2*Math.ceil(m)+2,y=2*Math.ceil(g)+2,b=new ba(s.shape,a),w=[{type:"int32",data:h},{type:"int32",data:p},{type:"float32",data:[c]},{type:"float32",data:[f]},{type:"float32",data:[m]},{type:"float32",data:[g]},{type:"int32",data:[x]},{type:"int32",data:[y]}];return n.runWebGPUProgram(b,[r],r.dtype,w)}};class Sa{constructor(e,t,n,i){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,n,e[3]],this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.halfPixelCenters=i,this.shaderKey=`resizeNearest_${i}`}getUserCode(){let e;e=this.halfPixelCenters?"max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":"vec2<f32>(rc) * effectiveInputOverOutputRatioRC";return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC = ${e};\n\n          // Compute the coordinators of nearest neighbor point.\n          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));\n          let sourceNearestRC = vec2<i32>(\n            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));\n          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `}}const ka={kernelName:t.ResizeNearestNeighbor,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{images:s}=t,{alignCorners:r,halfPixelCenters:a,size:o}=i,[u,d]=o,l=[{type:"float32",data:[r&&u>1?1:0,r&&d>1?1:0]},{type:"float32",data:[r?.5:0]}],h=new Sa(s.shape,u,d,a);return n.runWebGPUProgram(h,[s],s.dtype,l)}};class Ca{constructor(e,t){this.variableNames=["dy"],this.uniforms="effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,\n       winHeight : i32, winWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey=`resizeNearestNeigborBackprop_${t}`}getUserCode(){return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *\n                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));\n\n              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *\n                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));\n\n              let sourceNearestRow =\n                  i32(min(f32(uniforms.outShape[1] - 1),\n                  ${this.alignCorners?"floor(sourceFracRow + 0.5)":"floor(sourceFracRow)"}));\n\n              let sourceNearestCol =\n                  i32(min(f32(uniforms.outShape[2] - 1),\n                  ${this.alignCorners?"floor(sourceFracCol + 0.5)":"floor(sourceFracCol)"}));\n\n              if (r == sourceNearestRow && c == sourceNearestCol) {\n                accumulator += getDy(b, dyR, dyC, d);\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    `}}const va={kernelName:t.ResizeNearestNeighborGrad,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{images:s,dy:r}=t,{alignCorners:a}=i,[,o,u]=s.shape,[,d,l]=r.shape,h=[a&&d>1?o-1:o,a&&l>1?u-1:u],p=[a&&d>1?d-1:d,a&&l>1?l-1:l],c=1/(h[0]/p[0]),f=1/(h[1]/p[1]),m=2*Math.ceil(c)+2,g=2*Math.ceil(f)+2,x=new Ca(s.shape,a),y=[{type:"int32",data:h},{type:"int32",data:p},{type:"float32",data:[c]},{type:"float32",data:[f]},{type:"int32",data:[m]},{type:"int32",data:[g]}];return n.runWebGPUProgram(x,[r],r.dtype,y)}};class Ia{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=" axis : vec4<i32>,",this.shaderKey="reverse"}getUserCode(){return`\n      \n      // Using uniform variables as judging conditions, so the function has\n      // coherent execution within all threads.\n      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {\n        var reverseCoords = coords;\n        if (uniforms.axis[0] == 1) {\n          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;\n        }\n        if (uniforms.axis[1] == 1) {\n          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;\n        }\n        if (uniforms.axis[2] == 1) {\n          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;\n        }\n        if (uniforms.axis[3] == 1) {\n          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;\n        }\n\n        return reverseCoords;\n      }\n    \n      ${y("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let reverseCoords = getReverseCoords(coords);\n          setOutputAtIndex(index, getX(reverseCoords[0],\n              reverseCoords[1], reverseCoords[2], reverseCoords[3]));\n        }\n      }\n    `}}const Ra={kernelName:t.Reverse,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{dims:a}=s,o=r.shape.length;if(0===o)return ce({inputs:{x:r},backend:i});const u=r.shape,d=[1,1,1,1];u.forEach(((e,t)=>{d[t+4-o]=e}));const l=t.util.parseAxisParam(a,r.shape),h=[0,0,0,0];l.forEach((e=>{h[e+4-o]=1}));const p=[{type:"int32",data:h}],c=oe({inputs:{x:r},backend:i,attrs:{shape:d}}),f=new Ia(d),m=i.runWebGPUProgram(f,[c],c.dtype,p);i.disposeData(c.dataId);const g=oe({inputs:{x:m},backend:i,attrs:{shape:u}});return i.disposeData(m.dataId),g}};class $a{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="centerX : f32, centerY : f32, sinRadians : f32,\n          cosRadians : f32,",this.shaderKey="rotate",this.outputShape=e,"number"==typeof t?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}getUserCode(){return`\n        ${y("index")} {\n          if (index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *\n                uniforms.sinRadians;\n            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *\n                uniforms.cosRadians;\n            let coordX = i32(round(coordXFloat + uniforms.centerX));\n            let coordY = i32(round(coordYFloat + uniforms.centerY));\n            ${this.fillSnippet}\n            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&\n                coordY < uniforms.xShape[1]) {\n              outputValue = getX(coords[0], coordY, coordX, coords[3]);\n            }\n            setOutputAtIndex(index, outputValue);\n          }\n        }\n      `}}const Pa={kernelName:t.RotateWithOffset,backendName:"webgpu",kernelFunc:({inputs:e,attrs:n,backend:i})=>{const{image:s}=e,{radians:r,fillValue:a,center:o}=n,u=i,d=new $a(s.shape,a),[l,h]=t.backend_util.getImageCenter(o,s.shape[1],s.shape[2]),p=[{type:"float32",data:[l]},{type:"float32",data:[h]},{type:"float32",data:[Math.sin(r)]},{type:"float32",data:[Math.cos(r)]}];"number"==typeof a?p.push({type:"float32",data:[Number.parseFloat(a.toFixed(2))]}):p.push({type:"float32",data:a});return u.runWebGPUProgram(d,[s],s.dtype,p)}},za=ye({opType:M.ROUND}),Aa={kernelName:t.Round,backendName:"webgpu",kernelFunc:za},Na=ye({opType:M.RSQRT,cpuKernelImpl:Pt}),Da={kernelName:t.Rsqrt,backendName:"webgpu",kernelFunc:Na};class Ta{constructor(e,t,n,i,s,r,a,o=!0){this.variableNames=["updates","indices"],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=r,this.type=a,this.sumDupeIndices=o,this.dispatchLayout=D(e),this.dispatch=P(this.dispatchLayout,e,this.workgroupSize),this.sliceDimGreaterThanOne=t>1,this.shaderKey=`scatter_${n}_${i}_${this.sliceDimGreaterThanOne}_${a}_${o}`;const u=g(s.length);this.uniforms=`sliceDim : i32, strides: ${u}, updatesSize: i32,`,this.updatesRank=i,this.indicesRank=n}getUserCode(){let e="";1===this.indicesRank?e="coords[0]":2===this.indicesRank&&(e="coords[0], j");const t=`getIndices(${e})`,n=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides";let i="",s="";1===this.dispatchLayout.x.length?(i="flattenedIndex",s="\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {\n        return index;\n      }\n      "):2===this.dispatchLayout.x.length&&(i="vec2<i32>(flattenedIndex, coords[1])",s="\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {\n        // N.B. |updates| could be a scalar tensor, conceptually representing a\n        // 2D tensor with all values equal to that. By design, its size must be\n        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|\n        // gives the other.\n        let sliceSize = uniforms.outShape[1];\n        let d0 = index / sliceSize;\n        let d1 = index - d0 * sliceSize;\n        return vec2<i32>(d0, d1);\n      }\n      ");const r=`getUpdates(${Array.from({length:this.updatesRank},((e,t)=>`coords[${t}]`)).join(", ")})`;return`\n    ${s}\n      ${y("index")} {\n        if (index < uniforms.updatesSize) {\n          let coords = getUpdatesCoordsFromFlatIndex(index);\n          var flattenedIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexInside = i32(round(${t}));\n            flattenedIndex = flattenedIndex + indexInside * ${n};\n          }\n          let updateValue =\n              ${I(this.type)}(${r});\n          let flatIndex = getOutputIndexFromCoords(${i});\n\n          ${this.sumDupeIndices?p("&result[flatIndex]","updateValue",this.type):"atomicStore(&result[flatIndex], bitcast<i32>(updateValue));"}\n        }\n      }`}}const Fa={kernelName:t.ScatterNd,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{indices:r,updates:a}=n,{shape:o}=s,{sliceRank:u,numUpdates:d,sliceSize:l,strides:h,outputSize:p}=t.backend_util.calculateShapes(a,r,o),c=[p/l,l];if(0===p)return i.makeTensorInfo(o,r.dtype);const f=oe({inputs:{x:r},backend:i,attrs:{shape:[d,u]}}),m=oe({inputs:{x:a},backend:i,attrs:{shape:[d,l]}}),g=m.dtype,x=re({backend:i,attrs:{shape:c,value:0,dtype:g}}),y=[{type:"int32",data:[u]},{type:"int32",data:h},{type:"int32",data:[t.util.sizeFromShape(m.shape)]}],b=new Ta(m.shape,u,f.shape.length,m.shape.length,h,c,g),w=i.runWebGPUProgram(b,[m,f],g,y,x),S=oe({inputs:{x:w},backend:i,attrs:{shape:o}});return i.disposeData(f.dataId),i.disposeData(m.dataId),i.disposeData(w.dataId),S}};class _a{constructor(e,t){this.outputShape=[],this.variableNames=["sortedSequence","values"],this.uniforms="numInputs : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.side=t,this.shaderKey=`search_sorted_${t}`}getUserCode(){return`\n      fn findBound(batch: i32, value: f32) -> i32 {\n        var left = i32(0);\n        var right = uniforms.numInputs;\n        while (left < right) {\n          var mid = (left + right) / 2;\n          if (getSortedSequence(batch, mid) ${"left"===this.side?"<":"<="} value) {\n            left = mid + 1;\n          } else {\n            right = mid;\n          }\n        }\n        return right;\n      }\n\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let value = getValuesByOutputIndex(index);\n          setOutputAtIndexI32(index, findBound(coords[0], value));\n        }\n      }\n    `}}const Ea={kernelName:t.SearchSorted,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{sortedSequence:s,values:r}=t,{side:a}=i,o=new _a([r.shape[0],r.shape[1]],a),u=[{type:"int32",data:[s.shape[1]]}];return n.runWebGPUProgram(o,[s,r],"int32",u)}};class La{constructor(e,t,n){this.variableNames=["c","a","b"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.cRank=e,this.rank=n,this.shaderKey="select"}getUserCode(){let e,t;if(this.rank>4)throw Error(`Where for rank ${this.rank} is not yet supported`);if(1===this.rank)t="resRC",e="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],i=[],s=[];for(let e=0;e<this.outputShape.length;e++)s.push(`${n[e]}`),e<this.cRank&&i.push(`${n[e]}`);e=i.join(),t=s.join()}return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let cVal = getC(${e});\n          if (cVal >= 1.0) {\n            setOutputAtIndex(index, getA(${t}));\n          } else {\n            setOutputAtIndex(index, getB(${t}));\n          }\n        }\n      }\n    `}}const Wa={kernelName:t.Select,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i}=e,{condition:s,t:r,e:a}=n,o=new La(s.shape.length,r.shape,r.shape.length);return i.runWebGPUProgram(o,[s,r,a],t.upcastType(r.dtype,a.dtype))}},Ba=ye({opType:M.SELU}),Oa={kernelName:t.Selu,backendName:"webgpu",kernelFunc:Ba},Ua=ye({opType:M.SIGMOID}),Ma={kernelName:t.Sigmoid,backendName:"webgpu",kernelFunc:Ua},Va=ye({opType:M.SIGN}),Ga={kernelName:t.Sign,backendName:"webgpu",kernelFunc:Va},Ha=ye({opType:M.SIN}),Xa={kernelName:t.Sin,backendName:"webgpu",kernelFunc:Ha},Ka=ye({opType:M.SINH}),qa={kernelName:t.Sinh,backendName:"webgpu",kernelFunc:Ka},Ya=ye({opType:M.SOFTPLUS}),ja={kernelName:t.Softplus,backendName:"webgpu",kernelFunc:Ya};class Qa{constructor(e,t,n,i,s,r){this.variableNames=["x"],this.outputShape=[],this.uniforms="",this.workgroupSize=[64,1,1],this.size=!0;const a=new Array(i.length);for(let e=0;e<a.length;e++)a[e]=i[s[e]];this.outputShape=a,this.newDim=s,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,this.paddedXShape=t,this.uniforms+=`reshapedPaddedXShape : ${g(i.length)}, paddedXShapeStrides : ${g(r)}, `,n.map(((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`})),this.shaderKey=`spaceToBatchND_${s}`}getUserCode(){const e=g(this.outputShape.length),t=Qt(this.newDim);return`\n      ${k(this.paddedXShape,"PaddedX")}\n      ${y("index")} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${e}(${t}), uniforms.reshapedPaddedXShape);\n          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);\n          ${ta(this.xShape,!0)}\n        }\n      }\n    `}}const Za={kernelName:t.SpaceToBatchND,backendName:"webgpu",kernelFunc:e=>{const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{blockShape:a,paddings:o}=s;t.util.assert(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet"));const u=a.reduce(((e,t)=>e*t)),d=[[0,0]];d.push(...o);for(let e=1+a.length;e<r.shape.length;++e)d.push([0,0]);const l=d.map(((e,t)=>e[0]+r.shape[t]+e[1])),h=t.backend_util.getReshaped(l,a,u,!1),p=t.backend_util.getPermuted(h.length,a.length,!1),c=t.backend_util.getReshapedPermuted(l,a,u,!1),f=t.util.computeStrides(l),m=new Qa(r.shape,l,d,h,p,f.length),g=[{type:"int32",data:h},{type:"int32",data:f}];d.map((e=>g.push({type:"int32",data:[e[0],e[1]]})));const x=i.runWebGPUProgram(m,[r],r.dtype,g),y=oe({inputs:{x:x},backend:i,attrs:{shape:c}});return i.disposeData(x.dataId),y}};class Ja{constructor(e,t,n){this.variableNames=["input","indices","segmentIds"],this.outputShape=[],this.uniforms="segmentSize : i32, sparseSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e,this.type=n,this.dispatchLayout=D([t]),this.dispatch=P(this.dispatchLayout,[t],this.workgroupSize),this.shaderKey="sparseSegmentSum"}getUserCode(){return`\n    ${y("index")} {\n      if (index < uniforms.sparseSize) {\n        let indexInSegmentIds = index / uniforms.segmentSize;\n        let indexInSegment = index % uniforms.segmentSize;\n        let indexInInput = indices[indexInSegmentIds];\n        let segmentId = segmentIds[indexInSegmentIds];\n\n        let value = input[indexInInput * uniforms.segmentSize + indexInSegment];\n        let outIndex = segmentId * uniforms.segmentSize + indexInSegment;\n        ${p("&result[outIndex]","value",this.type)}\n      }\n    }\n  `}}class eo{constructor(e,t){this.variableNames=["segmentIds"],this.outputShape=[],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=[e],this.dispatchLayout=D(t),this.dispatch=P(this.dispatchLayout,t,this.workgroupSize),this.shaderKey="sparseSegmentIdCountProgram"}getUserCode(){return`\n    ${y("index")} {\n      if (index < uniforms.segmentIdsShape) {\n        let segmentId = segmentIds[index];\n        ${p("&result[segmentId]","1","int32")}\n      }\n    }\n  `}}class to{constructor(e,t){this.variableNames=["segmentSum","sameSegmentIdCount"],this.outputShape=[],this.uniforms="segmentSize : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.type=t,this.dispatchLayout=D(e),this.dispatch=P(this.dispatchLayout,e,this.workgroupSize),this.shaderKey="sparseSegmentMean"}getUserCode(){return`\n    ${y("index")} {\n      if (index < uniforms.size) {\n        let segmentId = index / uniforms.segmentSize;\n        let count = sameSegmentIdCount[segmentId];\n        if (count != 0) {\n          ${"float32"===this.type?"setOutputAtIndex(index, segmentSum[index] / f32(count));":"setOutputAtIndexI32(index, segmentSum[index] / count);"}\n        }\n      }\n    }\n  `}}function no(e,n,i,s=!1,r){const a=t.util.sizeFromShape(e.shape)/e.shape[0],o=e.dtype,u=t.util.sizeFromShape(n.shape),d=r.readSync(i.dataId),l=u>0?d[u-1]+1:0;let h;const p=e.shape.slice();p[0]=l;const c=u*a,f=re({backend:r,attrs:{shape:p,value:0,dtype:o}});h=new Ja(p,c,o);let m=[{type:"int32",data:[a]},{type:"int32",data:[c]}];const g=r.runWebGPUProgram(h,[e,n,i],o,m,f);if(s)return g;const x=re({backend:r,attrs:{shape:[l],value:0,dtype:"int32"}});h=new eo(l,i.shape);const y=r.runWebGPUProgram(h,[i],"int32",null,x),b=re({backend:r,attrs:{shape:p,value:0,dtype:o}});h=new to(p,o),m=[{type:"int32",data:[a]}];const w=r.runWebGPUProgram(h,[g,y],o,m,b);return r.disposeData(g.dataId),r.disposeData(y.dataId),w}const io={kernelName:t.SparseSegmentMean,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:i,indices:s,segmentIds:r}=t;return no(i,s,r,!1,n)}};const so={kernelName:t.SparseSegmentSum,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:i,indices:s,segmentIds:r}=t;return no(i,s,r,!0,n)}};class ro{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[64,1,1],this.size=!0;const n=new Array(e.length);for(let i=0;i<n.length;i++)n[i]=e[i]*t[i];this.outputShape=n,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}getUserCode(){const e=function(e,t=""){if(e>=5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`(resRC % ${t}aShape)`;const n=["resRC.x","resRC.y","resRC.z","resRC.w"],i=[];for(let s=0;s<e;s++)i.push(`(${n[s]} % ${t}aShape[${s}])`);return i.join()}(this.rank,"uniforms.");return`\n      ${y("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          setOutputAtIndex(index, getA(${e}));\n        }\n      }\n    `}}function ao(e){const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{reps:a}=s;if(i.shouldExecuteOnCPU([r])||"string"===r.dtype||r.shape.length>=5){const e=i.readSync(r.dataId),n="string"===r.dtype?e.map((e=>t.util.decodeString(e))):e,s=t.buffer(r.shape,r.dtype,n),o=_t(s,a);return i.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new ro(r.shape,a);return i.runWebGPUProgram(o,[r],r.dtype)}const oo={kernelName:t.Tile,backendName:"webgpu",kernelFunc:ao};const uo={kernelName:t.SparseToDense,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:o}=n,{outputShape:u}=s,{sliceRank:d,numUpdates:l,sliceSize:h,strides:p,outputSize:c}=t.backend_util.calculateShapes(a,r,u),f=!1;if("string"===a.dtype){const e=i.bufferSync(r),n=i.bufferSync(a),s=t.util.decodeString(i.readSync(o.dataId)[0]),m=zt(e,n,u,c,h,l,d,p,s,f);return i.makeTensorInfo(u,m.dtype,m.values)}const m=[c/h,h],g=oe({inputs:{x:r},backend:i,attrs:{shape:[l,d]}}),x=a.shape.length?oe({inputs:{x:a},backend:i,attrs:{shape:[l,h]}}):ce({inputs:{x:a},backend:i}),y=x.dtype,b=i.makeTensorInfo([],y,t.util.makeZerosTypedArray(1,y)),w=oe({inputs:{x:o},backend:i,attrs:{shape:Array(m.length).fill(1)}}),S=ao({inputs:{x:w},backend:i,attrs:{reps:m}}),k=[{type:"int32",data:[d]},{type:"int32",data:p},{type:"int32",data:[t.util.sizeFromShape([l,h])]}];switch(l){case 0:break;case 1:{const e=new Ta([l,h],d,g.shape.length,x.shape.length,p,m,y,f);i.runWebGPUProgram(e,[x,g],y,k,S)}break;default:{const e=new Ta([l,h],d,g.shape.length,b.shape.length,p,m,y,f);i.runWebGPUProgram(e,[b,g],y,k,S)}{const e=new Ta([l,h],d,g.shape.length,x.shape.length,p,m,y);i.runWebGPUProgram(e,[x,g],y,k,S)}}const C=oe({inputs:{x:S},backend:i,attrs:{shape:u}});return i.disposeData(g.dataId),i.disposeData(x.dataId),i.disposeData(w.dataId),i.disposeData(b.dataId),i.disposeData(S.dataId),C}};const lo={kernelName:t.SplitV,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{numOrSizeSplits:a,axis:o}=s,u=t.util.parseAxisParam(o,r.shape)[0],d=t.backend_util.prepareSplitSize(r,a,u),l=r.shape.length,h=new Array(l).fill(0),p=r.shape.slice();return d.map((e=>{const t=[...p];t[u]=e;const n=_n({inputs:{x:r},backend:i,attrs:{begin:h,size:t}});return h[u]+=e,n}))}},ho=ye({opType:M.SQRT}),po={kernelName:t.Sqrt,backendName:"webgpu",kernelFunc:ho},co={kernelName:t.Square,backendName:"webgpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,i=t,s=new xe(n.shape,M.SQUARE);return i.runWebGPUProgram(s,[n],n.dtype)}},fo=be({opType:O.SQUARED_DIFFERENCE}),mo={kernelName:t.SquaredDifference,backendName:"webgpu",kernelFunc:fo};const go={kernelName:t.Step,backendName:"webgpu",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:i}=e,s=new xe(i.shape,M.STEP,"stepAlpha : f32,"),r=[{type:"float32",data:[t.alpha]}];return n.runWebGPUProgram(s,[i],i.dtype,r)}};class xo{constructor(e){this.variableNames=["x"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]);const t=g(this.outputShape.length);this.uniforms=`begin : ${t},  strides : ${t}, `,this.shaderKey="stridedSlice"}getUserCode(){let e="";if(1===this.outputShape.length)e="coords * uniforms.strides + uniforms.begin";else{let t=0;e=this.outputShape.map(((e,n)=>(t++,1===this.outputShape.length?`coords * uniforms.strides[${n}] + uniforms.begin[${n}]`:`coords[${t-1}] * uniforms.strides[${n}] + uniforms.begin[${n}]`))).join(",")}return`\n       ${y("index")} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index);\n           setOutputAtIndex(index, getX(${e}));\n         }\n       }\n     `}}const yo={kernelName:t.StridedSlice,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{begin:a,end:o,strides:u,beginMask:d,endMask:l,ellipsisMask:h,newAxisMask:p,shrinkAxisMask:c}=s,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:x,isSimpleSlice:y,begin:b,end:w,strides:S}=t.slice_util.sliceInfo(r.shape,a,o,u,d,l,h,p,c);let k;if(g)k=oe({inputs:{x:r},backend:i,attrs:{shape:m}});else if(x||y){t.util.assert(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=t.slice_util.computeOutShape(b,w,S),n=_n({inputs:{x:r},backend:i,attrs:{begin:b,size:e}});k=oe({inputs:{x:n},backend:i,attrs:{shape:m}}),i.disposeData(n.dataId)}else{if(i.shouldExecuteOnCPU([r])){const e=i.readSync(r.dataId),n=t.buffer(r.shape,r.dtype,e),s=Dt(f,n,S,b);k=i.makeTensorInfo(m,r.dtype,s.values)}else{const e=new xo(f),t=[{type:"int32",data:b},{type:"int32",data:S}],n=i.runWebGPUProgram(e,[r],r.dtype,t);k=oe({inputs:{x:n},backend:i,attrs:{shape:m}}),i.disposeData(n.dataId)}}return k}};const bo={kernelName:t.StringNGrams,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{separator:s,nGramWidths:r,leftPad:a,rightPad:o,padWidth:u,preserveShortSequences:d}=i,{data:l,dataSplits:h}=t,p=n.readSync(l.dataId),c=n.readSync(h.dataId),[f,m]=Tt(p,c,s,r,a,o,u,d);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}},wo=be({opType:O.SUB,cpuKernelImpl:Ft,supportsComplex:!0}),So={kernelName:t.Sub,backendName:"webgpu",kernelFunc:wo},ko=ye({opType:M.TAN}),Co={kernelName:t.Tan,backendName:"webgpu",kernelFunc:ko},vo=ye({opType:M.TANH}),Io={kernelName:t.Tanh,backendName:"webgpu",kernelFunc:vo};const Ro={kernelName:t.TensorScatterUpdate,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{tensor:r,indices:a,updates:o}=n,{sliceRank:u,numUpdates:d,sliceSize:l,strides:h,outputSize:p}=t.backend_util.calculateShapes(o,a,r.shape),c=[p/l,l];if(0===p)return i.makeTensorInfo(r.shape,a.dtype);const f=[],m=oe({inputs:{x:a},backend:i,attrs:{shape:[d,u]}});f.push(m);const g=oe({inputs:{x:o},backend:i,attrs:{shape:[d,l]}});f.push(g);const x=oe({inputs:{x:r},backend:i,attrs:{shape:c}});f.push(x);const y=ao({inputs:{x:x},backend:i,attrs:{reps:Array(c.length).fill(1)}}),b=new Ta([d,l],u,m.shape.length,g.shape.length,h,c,r.dtype,!1),w=[{type:"int32",data:[u]},{type:"int32",data:h},{type:"int32",data:[t.util.sizeFromShape([d,l])]}],S=i.runWebGPUProgram(b,[g,m],x.dtype,w,y);f.push(S);const k=oe({inputs:{x:S},backend:i,attrs:{shape:r.shape}});return f.forEach((e=>i.disposeData(e.dataId))),k}};class $o{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, negativeInf : f32,\n        dir : i32, inc : i32,",this.shaderKey="swap"}getUserCode(){return`\n        ${y("index")} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // We compare elements pair-wise within a group of size 2 * inc.\n            // The comparing rule for each group alternates between ascending\n            // and descending. Within each group, we compare each pair at\n            // positions i and i+inc. To decide whether an element at position i\n            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n            // inc, it is in the first half of the group, we denote it as x0,\n            // otherwise we denote it as x1.\n            // For example, as shown in the Bitonic top K paper referenced\n            // above, Figure5(a) shows that element[1] is in the second half of\n            // the group when group size is 2, but it is in the first half of\n            // the group when group size is 4.\n            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;\n            var i = 0;\n            if (isFirstInPair) {\n              i = elemIdx;\n            } else {\n              i = elemIdx - uniforms.inc;\n            }\n\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.inc;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.inc));\n            }\n\n            var x0 = f32(0.0);\n            var x1 = f32(0.0);\n            if (i0 < uniforms.inputSize) {\n              x0 = getX(batch, i0);\n            } else {\n              x0 = uniforms.negativeInf;\n            }\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = uniforms.negativeInf;\n            }\n\n            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;\n            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n            if (reverse == isGreater) {\n              // Elements in opposite order of direction\n              let iTemp = i0;\n              i0 = i1;\n              i1 = iTemp;\n            }\n            if (isFirstInPair) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `}}class Po{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}getUserCode(){return`\n        ${y("index")} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // The output size is half of the previous size.\n            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _\n            // (k=4), we only need to output the indices at positions |, the\n            // indices at positions _ can be thrown away, see Figure5(b) After\n            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced\n            // above.\n            // For example, the paper shows we only need to output the orange\n            // bars. The output sequence should look like this | | | | | | | |.\n            // Because the sequence is halved, to map the output index back to\n            // the previous sequence to find the corresponding value, we need\n            // to double the index. When we double the index, we basically\n            // interpolate a position, so 2i looks like\n            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k\n            // position of each 2k positions by - elemIdx % k. E.g. for output\n            // at index 4,5,6,7, we want to get the corresponding element at\n            // original index 8,9,10,11, for output at index 8,9,10,11,\n            // we want to get the corresponding element at original index\n            // 16,17,18,19, so on and so forth.\n\n            var i = 0;\n            if (elemIdx < uniforms.k) {\n              i = elemIdx;\n            } else {\n              i = elemIdx * 2 - elemIdx % uniforms.k;\n            }\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.k;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.k));\n            }\n\n            let x0 = getX(batch, i0);\n            var x1 = f32(0.0);\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = x0;\n            }\n\n            if (x0 >= x1) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `}}function zo(e,t){null!==t&&e.disposeData(t.dataId)}function Ao(e){let t=1;for(;t<e;)t*=2;return t}const No={kernelName:t.TopK,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r}=n,{k:a,sorted:o}=s,u=r.shape,d=u[u.length-1];if(i.shouldExecuteOnCPU([r])){const e=i.readSync(r.dataId),[t,n]=Et(e,u,r.dtype,a,o);return[i.makeTensorInfo(t.shape,t.dtype,t.values),i.makeTensorInfo(n.shape,n.dtype,n.values)]}if(0===a)return u[u.length-1]=0,[i.makeTensorInfo(u,r.dtype,[]),i.makeTensorInfo(u,"int32",[])];if(1===d)return[r,re({attrs:{shape:u,dtype:"int32",value:0},backend:i})];const l=t.util.sizeFromShape(u)/d,h=oe({inputs:{x:r},attrs:{shape:[l,d]},backend:i}),p=Ao(a),c=Ao(d);let f=null;const m=()=>null===f?[h,h]:[h,f],g=(e,t,n)=>{const s=m(),r=new $o(n),a=[{type:"int32",data:[d]},{type:"int32",data:[null===f?1:0]},{type:"float32",data:[Number.NEGATIVE_INFINITY]},{type:"int32",data:[e]},{type:"int32",data:[t]}],o=f;f=i.runWebGPUProgram(r,s,"int32",a),zo(i,o)};for(let e=1;e<p;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)g(t,n,[l,c])}for(let e=c;e>p;e/=2){const t=m(),n=new Po([l,e/2]),s=[{type:"int32",data:[d]},{type:"int32",data:[null===f?1:0]},{type:"int32",data:[p]}],r=f;f=i.runWebGPUProgram(n,t,"int32",s),zo(i,r);const a=p/2,o=2*a;for(let e=a;e>=1;e/=2)g(o,e,f.shape)}let x=f;f=_n({inputs:{x:f},backend:i,attrs:{begin:0,size:[l,a]}}),zo(i,x);let y=Vs({inputs:{x:h,indices:f},backend:i,attrs:{axis:1,batchDims:1}});zo(i,h);const b=u.slice(0,-1);b.push(a),x=f,f=oe({inputs:{x:f},attrs:{shape:b},backend:i}),zo(i,x);const w=y;return y=oe({inputs:{x:y},attrs:{shape:b},backend:i}),zo(i,w),[y,f]}};class Do{constructor(e){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=D(this.outputShape),this.dispatch=P(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="transform"}getUserCode(){return`\n          fn mapCoord(outCoord : f32, len : f32) -> f32{\n            var inCoord = outCoord;\n            if(uniforms.fillModeId == 2) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  if (inCoord < sz2) {\n                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +\n                    inCoord;\n                  }\n                  if (inCoord < -len) {\n                    inCoord = inCoord + sz2;\n                  } else {\n                    inCoord = -inCoord - 1.0;\n                  }\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));\n                  if (inCoord >= len) {\n                    inCoord = sz2 - inCoord - 1.0;\n                  }\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 3) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 4) {\n              return clamp(outCoord, 0.0, len - 1.0);\n            }\n            return outCoord;\n          }\n          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,\n            channel : i32) -> f32 {\n            var outputValue : f32;\n            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {\n                outputValue = getImage(batch, coordY, coordX, channel);\n            } else {\n              outputValue = uniforms.fillValue;\n            }\n            return outputValue;\n          }\n\n          ${y("index")} {\n            if (index < uniforms.size) {\n              let coords = getCoordsFromIndex(index);\n              var outputValue : f32;\n              let batch = coords[0];\n              let x = coords[2];\n              let y = coords[1];\n              let channel = coords[3];\n              let xf = f32(x);\n              let yf = f32(y);\n              let a1 = getTransforms(batch, 0);\n              let a2 = getTransforms(batch, 1);\n              let a3 = getTransforms(batch, 2);\n              let b1 = getTransforms(batch, 3);\n              let b2 = getTransforms(batch, 4);\n              let b3 = getTransforms(batch, 5);\n              let c1 = getTransforms(batch, 6);\n              let c2 = getTransforms(batch, 7);\n              let projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = uniforms.fillValue;\n              } else {\n                let inX = (a1 * xf + a2 * yf + a3) / projection;\n                let inY = (b1 * xf + b2 * yf + b3) / projection;\n                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));\n                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));\n\n                if (uniforms.interpolationModeId == 1) {\n                  let coordY = i32(round(mapY));\n                  let coordX = i32(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  let yFloor = floor(mapY);\n                  let xFloor = floor(mapX);\n                  let yCeil = yFloor + 1.0;\n                  let xCeil = xFloor + 1.0;\n                  let valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);\n                  let valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutputAtIndex(index, outputValue);\n            }\n          }\n        `}}const To={kernelName:t.Transform,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{image:s,transforms:r}=t,{interpolation:a,fillMode:o,fillValue:u,outputShape:d}=i,[l,h,p,c]=s.shape,[f,m]=null!=d?d:[h,p],g=new Do([l,f,m,c]),x="nearest"===a?1:2;let y;switch(o){case"constant":default:y=1;break;case"reflect":y=2;break;case"wrap":y=3;break;case"nearest":y=4}const b=[{type:"int32",data:[x]},{type:"int32",data:[y]},{type:"float32",data:[u]}];return n.runWebGPUProgram(g,[s,r],"float32",b)}};const Fo={kernelName:t.Unpack,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{value:s}=t;let{axis:r}=i;r<0&&(r+=s.shape.length);const a=s,o=a.shape.length,u=s.shape[r],d=new Array(o-1);let l=0;for(let e=0;e<o;e++)e!==r&&(d[l++]=a.shape[e]);const h=[],p=new Array(o).fill(0),c=a.shape.slice();c[r]=1;const f=new Array(u);for(let e=0;e<f.length;e++){p[r]=e;const t=_n({inputs:{x:a},backend:n,attrs:{begin:p,size:c}}),i=oe({inputs:{x:t},backend:n,attrs:{shape:d}});f[e]=i,h.push(t)}return h.forEach((e=>n.disposeData(e.dataId))),f}};class _o{constructor(e,t,n){if(this.outputShape=[],this.variableNames=["x","segmentIds"],this.uniforms="numSegments : i32, xSize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=t,this.dispatchLayout=D(e),this.dispatch=P(this.dispatchLayout,e,this.workgroupSize),"float32"!==n&&"int32"!==n)throw new Error(`UnsortedSegmentSum only supports float32 and int32\n              types, does not support ${n} type.`);this.type=n,this.shaderKey="unsortedSegmentSum"}getUserCode(){return`\n    ${y("index")} {\n      if (index < uniforms.xSize) {\n        let coords = getXCoordsFromIndex(index);\n        let b = coords[0];\n        let inCol = coords[1];\n\n        let segmentId = i32(getSegmentIds(inCol));\n        if (segmentId >= 0) {\n          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;\n          let value = getX(b, inCol);\n\n          ${p("&result[flatIndex]","value",this.type)}\n        }\n      }\n    }\n  `}}const Eo=[le,Ot,Mt,Gt,Xt,qt,nn,sn,an,on,dn,hn,cn,mn,xn,Rn,$n,An,Nn,Dn,Ln,On,Mn,Kn,Yn,Zn,ge,ti,oi,ci,yi,wi,ki,Ci,vi,Ri,Pi,Ai,Ei,Li,Wi,Oi,Ki,qi,Gi,ji,Zi,ts,ns,ss,ds,hs,ps,fs,gs,ys,ws,ks,Is,ae,$s,Ts,zs,Ns,Ls,Ws,Bs,Us,Gs,Xs,qs,fe,Ys,si,Qs,Js,tr,nr,sr,ar,ur,pr,lr,fr,gr,yr,kr,vr,kn,Rr,$r,Dr,Pr,Nr,Tr,vn,Fr,Er,Wr,Or,Hr,as,Xr,Kr,qr,Gn,jr,Jr,ea,ia,ra,aa,oa,ua,Xn,la,pa,fa,ga,ue,ya,wa,ka,va,Ra,Pa,Aa,Da,Fa,Ea,Wa,Oa,Ma,Ga,Xa,qa,En,go,yo,bo,Gr,ja,Za,io,so,uo,lo,po,co,mo,So,us,Co,Io,Ro,oo,No,To,Jt,Fo,{kernelName:t.UnsortedSegmentSum,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:i,attrs:s}=e,{x:r,segmentIds:a}=n,{numSegments:o}=s,u=r.shape.length,d=[];let l=0;const h=t.backend_util.getAxesPermutation([l],u);let p=r;null!=h&&(p=Zt({inputs:{x:r},backend:i,attrs:{perm:h}}),d.push(p),l=t.backend_util.getInnerMostAxes(1,u)[0]);const c=t.backend_util.segment_util.computeOutShape(p.shape,l,o),f=t.util.sizeFromShape([p.shape[l]]),m=oe({inputs:{x:p},backend:i,attrs:{shape:[-1,f]}});d.push(m);const g=r.dtype,x=[m.shape[0],o],y=re({backend:i,attrs:{shape:x,value:0,dtype:g}}),b=new _o(m.shape,x,g),w=[{type:"int32",data:[o]},{type:"int32",data:[t.util.sizeFromShape(m.shape)]}],S=i.runWebGPUProgram(b,[m,a],g,w,y),k=oe({inputs:{x:S},backend:i,attrs:{shape:c}});d.push(S);let C=k;if(null!=h){d.push(k);const e=t.backend_util.getUndoAxesPermutation(h);C=Zt({inputs:{x:C},backend:i,attrs:{perm:e}})}return d.forEach((e=>i.disposeData(e.dataId))),C}},Zr];for(const e of Eo)t.registerKernel(e);e.WebGPUBackend=B,e.webgpu_util=L}));
//# sourceMappingURL=tf-backend-webgpu.es2017.min.js.map
