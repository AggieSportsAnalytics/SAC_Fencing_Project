{"id":"node_modules/@tensorflow-models/pose-detection/posenet/calculators/build_part_with_score_queue.js","dependencies":[{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\posenet\\calculators\\build_part_with_score_queue.js.map","includedInParent":true,"mtime":1700267040412},{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\package.json","includedInParent":true,"mtime":1702881059798},{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\.babelrc","includedInParent":true,"mtime":1699931790989},{"name":"./max_heap","loc":{"line":4,"column":25,"index":147},"parent":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\posenet\\calculators\\build_part_with_score_queue.js","resolved":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\posenet\\calculators\\max_heap.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.buildPartWithScoreQueue = void 0;\r\nvar max_heap_1 = require(\"./max_heap\");\r\nfunction scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, localMaximumRadius, scores) {\r\n    var _a = scores.shape, height = _a[0], width = _a[1];\r\n    var localMaximum = true;\r\n    var yStart = Math.max(heatmapY - localMaximumRadius, 0);\r\n    var yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);\r\n    for (var yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {\r\n        var xStart = Math.max(heatmapX - localMaximumRadius, 0);\r\n        var xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);\r\n        for (var xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {\r\n            if (scores.get(yCurrent, xCurrent, keypointId) > score) {\r\n                localMaximum = false;\r\n                break;\r\n            }\r\n        }\r\n        if (!localMaximum) {\r\n            break;\r\n        }\r\n    }\r\n    return localMaximum;\r\n}\r\n/**\r\n * Builds a priority queue with part candidate positions for a specific image in\r\n * the batch. For this we find all local maxima in the score maps with score\r\n * values above a threshold. We create a single priority queue across all parts.\r\n */\r\nfunction buildPartWithScoreQueue(scoreThreshold, localMaximumRadius, scores) {\r\n    var _a = scores.shape, height = _a[0], width = _a[1], numKeypoints = _a[2];\r\n    var queue = new max_heap_1.MaxHeap(height * width * numKeypoints, function (_a) {\r\n        var score = _a.score;\r\n        return score;\r\n    });\r\n    for (var heatmapY = 0; heatmapY < height; ++heatmapY) {\r\n        for (var heatmapX = 0; heatmapX < width; ++heatmapX) {\r\n            for (var keypointId = 0; keypointId < numKeypoints; ++keypointId) {\r\n                var score = scores.get(heatmapY, heatmapX, keypointId);\r\n                // Only consider parts with score greater or equal to threshold as\r\n                // root candidates.\r\n                if (score < scoreThreshold) {\r\n                    continue;\r\n                }\r\n                // Only consider keypoints whose score is maximum in a local window.\r\n                if (scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, localMaximumRadius, scores)) {\r\n                    queue.enqueue({ score: score, part: { heatmapY: heatmapY, heatmapX: heatmapX, id: keypointId } });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return queue;\r\n}\r\nexports.buildPartWithScoreQueue = buildPartWithScoreQueue;\r\n"},"sourceMaps":{"js":{"version":3,"file":"build_part_with_score_queue.js","sourceRoot":"","sources":["../../../src/posenet/calculators/build_part_with_score_queue.ts"],"names":[],"mappings":";;;AAmBA,uCAAmC;AAEnC,SAAS,2BAA2B,CAChC,UAAkB,EAAE,KAAa,EAAE,QAAgB,EAAE,QAAgB,EACrE,kBAA0B,EAAE,MAAmC;IAC3D,IAAA,KAAkB,MAAM,CAAC,KAAK,EAA7B,MAAM,QAAA,EAAE,KAAK,QAAgB,CAAC;IAErC,IAAI,YAAY,GAAG,IAAI,CAAC;IACxB,IAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,kBAAkB,EAAE,CAAC,CAAC,CAAC;IAC1D,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,kBAAkB,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;IACjE,KAAK,IAAI,QAAQ,GAAG,MAAM,EAAE,QAAQ,GAAG,IAAI,EAAE,EAAE,QAAQ,EAAE;QACvD,IAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,kBAAkB,EAAE,CAAC,CAAC,CAAC;QAC1D,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,kBAAkB,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;QAChE,KAAK,IAAI,QAAQ,GAAG,MAAM,EAAE,QAAQ,GAAG,IAAI,EAAE,EAAE,QAAQ,EAAE;YACvD,IAAI,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,GAAG,KAAK,EAAE;gBACtD,YAAY,GAAG,KAAK,CAAC;gBACrB,MAAM;aACP;SACF;QACD,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM;SACP;KACF;IAED,OAAO,YAAY,CAAC;AACtB,CAAC;AAED;;;;GAIG;AACH,SAAgB,uBAAuB,CACnC,cAAsB,EAAE,kBAA0B,EAClD,MAAmC;IAC/B,IAAA,KAAgC,MAAM,CAAC,KAAK,EAA3C,MAAM,QAAA,EAAE,KAAK,QAAA,EAAE,YAAY,QAAgB,CAAC;IAEnD,IAAM,KAAK,GAAG,IAAI,kBAAO,CACrB,MAAM,GAAG,KAAK,GAAG,YAAY,EAAE,UAAC,EAAO;YAAN,KAAK,WAAA;QAAM,OAAA,KAAK;IAAL,CAAK,CAAC,CAAC;IAEvD,KAAK,IAAI,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,MAAM,EAAE,EAAE,QAAQ,EAAE;QACpD,KAAK,IAAI,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,KAAK,EAAE,EAAE,QAAQ,EAAE;YACnD,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,YAAY,EAAE,EAAE,UAAU,EAAE;gBAChE,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;gBAEzD,kEAAkE;gBAClE,mBAAmB;gBACnB,IAAI,KAAK,GAAG,cAAc,EAAE;oBAC1B,SAAS;iBACV;gBAED,oEAAoE;gBACpE,IAAI,2BAA2B,CACvB,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,kBAAkB,EACzD,MAAM,CAAC,EAAE;oBACf,KAAK,CAAC,OAAO,CAAC,EAAC,KAAK,OAAA,EAAE,IAAI,EAAE,EAAC,QAAQ,UAAA,EAAE,QAAQ,UAAA,EAAE,EAAE,EAAE,UAAU,EAAC,EAAC,CAAC,CAAC;iBACpE;aACF;SACF;KACF;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AA9BD,0DA8BC","sourcesContent":[null]}},"error":null,"hash":"3923219ffc9d018be8e05ab922dead06","cacheData":{"env":{}}}