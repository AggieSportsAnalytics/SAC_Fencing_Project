{"id":"node_modules/@tensorflow-models/pose-detection/calculators/tracker.js","dependencies":[{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\calculators\\tracker.js.map","includedInParent":true,"mtime":1705282595546},{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\package.json","includedInParent":true,"mtime":1707452023465},{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\.babelrc","includedInParent":true,"mtime":1699931790989},{"name":"./tracker_utils","loc":{"line":40,"column":30},"parent":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\calculators\\tracker.js","resolved":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\calculators\\tracker_utils.js"}],"generated":{"js":"\"use strict\";\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Tracker = void 0;\r\nvar tracker_utils_1 = require(\"./tracker_utils\");\r\n/**\r\n * A stateful tracker for associating detections between frames. This is an\r\n * abstract base class that performs generic mechanics. Implementations must\r\n * inherit from this class.\r\n */\r\nvar Tracker = /** @class */ (function () {\r\n    function Tracker(config) {\r\n        (0, tracker_utils_1.validateTrackerConfig)(config);\r\n        this.tracks = [];\r\n        this.maxTracks = config.maxTracks;\r\n        this.maxAge = config.maxAge * 1000; // Convert msec to usec.\r\n        this.minSimilarity = config.minSimilarity;\r\n        this.nextID = 1;\r\n    }\r\n    /**\r\n     * Tracks person instances across frames based on detections.\r\n     * @param poses An array of detected `Pose`s.\r\n     * @param timestamp The timestamp associated with the incoming poses, in\r\n     * microseconds.\r\n     * @returns An updated array of `Pose`s with tracking id properties.\r\n     */\r\n    Tracker.prototype.apply = function (poses, timestamp) {\r\n        this.filterOldTracks(timestamp);\r\n        var simMatrix = this.computeSimilarity(poses);\r\n        this.assignTracks(poses, simMatrix, timestamp);\r\n        this.updateTracks(timestamp);\r\n        return poses;\r\n    };\r\n    /**\r\n     * Returns a copy of the stored tracks.\r\n     */\r\n    Tracker.prototype.getTracks = function () {\r\n        return this.tracks.slice();\r\n    };\r\n    /**\r\n     * Returns a Set of active track IDs.\r\n     */\r\n    Tracker.prototype.getTrackIDs = function () {\r\n        return new Set(this.tracks.map(function (track) { return track.id; }));\r\n    };\r\n    /**\r\n     * Filters tracks based on their age.\r\n     * @param timestamp The current timestamp in microseconds.\r\n     */\r\n    Tracker.prototype.filterOldTracks = function (timestamp) {\r\n        var _this = this;\r\n        this.tracks = this.tracks.filter(function (track) {\r\n            return timestamp - track.lastTimestamp <= _this.maxAge;\r\n        });\r\n    };\r\n    /**\r\n     * Performs a greedy optimization to link detections with tracks. The `poses`\r\n     * array is updated in place by providing an `id` property. If incoming\r\n     * detections are not linked with existing tracks, new tracks will be created.\r\n     * @param poses An array of detected `Pose`s. It's assumed that poses are\r\n     * sorted from most confident to least confident.\r\n     * @param simMatrix A 2D array of shape [num_det, num_tracks] with pairwise\r\n     * similarity scores between detections and tracks.\r\n     * @param timestamp The current timestamp in microseconds.\r\n     */\r\n    Tracker.prototype.assignTracks = function (poses, simMatrix, timestamp) {\r\n        var unmatchedTrackIndices = Array.from(Array(simMatrix[0].length).keys());\r\n        var detectionIndices = Array.from(Array(poses.length).keys());\r\n        var unmatchedDetectionIndices = [];\r\n        for (var _i = 0, detectionIndices_1 = detectionIndices; _i < detectionIndices_1.length; _i++) {\r\n            var detectionIndex = detectionIndices_1[_i];\r\n            if (unmatchedTrackIndices.length === 0) {\r\n                unmatchedDetectionIndices.push(detectionIndex);\r\n                continue;\r\n            }\r\n            // Assign the detection to the track which produces the highest pairwise\r\n            // similarity score, assuming the score exceeds the minimum similarity\r\n            // threshold.\r\n            var maxTrackIndex = -1;\r\n            var maxSimilarity = -1;\r\n            for (var _a = 0, unmatchedTrackIndices_1 = unmatchedTrackIndices; _a < unmatchedTrackIndices_1.length; _a++) {\r\n                var trackIndex = unmatchedTrackIndices_1[_a];\r\n                var similarity = simMatrix[detectionIndex][trackIndex];\r\n                if (similarity >= this.minSimilarity && similarity > maxSimilarity) {\r\n                    maxTrackIndex = trackIndex;\r\n                    maxSimilarity = similarity;\r\n                }\r\n            }\r\n            if (maxTrackIndex >= 0) {\r\n                // Link the detection with the highest scoring track.\r\n                var linkedTrack = this.tracks[maxTrackIndex];\r\n                linkedTrack = Object.assign(linkedTrack, this.createTrack(poses[detectionIndex], timestamp, linkedTrack.id));\r\n                poses[detectionIndex].id = linkedTrack.id;\r\n                var index = unmatchedTrackIndices.indexOf(maxTrackIndex);\r\n                unmatchedTrackIndices.splice(index, 1);\r\n            }\r\n            else {\r\n                unmatchedDetectionIndices.push(detectionIndex);\r\n            }\r\n        }\r\n        // Spawn new tracks for all unmatched detections.\r\n        for (var _b = 0, unmatchedDetectionIndices_1 = unmatchedDetectionIndices; _b < unmatchedDetectionIndices_1.length; _b++) {\r\n            var detectionIndex = unmatchedDetectionIndices_1[_b];\r\n            var newTrack = this.createTrack(poses[detectionIndex], timestamp);\r\n            this.tracks.push(newTrack);\r\n            poses[detectionIndex].id = newTrack.id;\r\n        }\r\n    };\r\n    /**\r\n     * Updates the stored tracks in the tracker. Specifically, the following\r\n     * operations are applied in order:\r\n     * 1. Tracks are sorted based on freshness (i.e. the most recently linked\r\n     *    tracks are placed at the beginning of the array and the most stale are\r\n     *    at the end).\r\n     * 2. The tracks array is sliced to only contain `maxTracks` tracks (i.e. the\r\n     *    most fresh tracks).\r\n     * @param timestamp The current timestamp in microseconds.\r\n     */\r\n    Tracker.prototype.updateTracks = function (timestamp) {\r\n        // Sort tracks from most recent to most stale, and then only keep the top\r\n        // `maxTracks` tracks.\r\n        this.tracks.sort(function (ta, tb) { return tb.lastTimestamp - ta.lastTimestamp; });\r\n        this.tracks = this.tracks.slice(0, this.maxTracks);\r\n    };\r\n    /**\r\n     * Creates a track from information in a pose.\r\n     * @param pose A `Pose`.\r\n     * @param timestamp The current timestamp in microseconds.\r\n     * @param trackID The id to assign to the new track. If not provided,\r\n     * will assign the next available id.\r\n     * @returns A `Track`.\r\n     */\r\n    Tracker.prototype.createTrack = function (pose, timestamp, trackID) {\r\n        var track = {\r\n            id: trackID || this.nextTrackID(),\r\n            lastTimestamp: timestamp,\r\n            keypoints: __spreadArray([], pose.keypoints, true).map(function (keypoint) { return (__assign({}, keypoint)); })\r\n        };\r\n        if (pose.box !== undefined) {\r\n            track.box = __assign({}, pose.box);\r\n        }\r\n        return track;\r\n    };\r\n    /**\r\n     * Returns the next free track ID.\r\n     */\r\n    Tracker.prototype.nextTrackID = function () {\r\n        var nextID = this.nextID;\r\n        this.nextID += 1;\r\n        return nextID;\r\n    };\r\n    /**\r\n     * Removes specific tracks, based on their ids.\r\n     */\r\n    Tracker.prototype.remove = function () {\r\n        var ids = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            ids[_i] = arguments[_i];\r\n        }\r\n        this.tracks = this.tracks.filter(function (track) { return !ids.includes(track.id); });\r\n    };\r\n    /**\r\n     * Resets tracks.\r\n     */\r\n    Tracker.prototype.reset = function () {\r\n        this.tracks = [];\r\n    };\r\n    return Tracker;\r\n}());\r\nexports.Tracker = Tracker;\r\n"},"sourceMaps":{"js":{"version":3,"file":"tracker.js","sourceRoot":"","sources":["../../src/calculators/tracker.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;;;;;;;;;;;;;;;;;;;;;;AAMH,iDAAsD;AAEtD;;;;GAIG;AACH;IAOE,iBAAY,MAAqB;QAC/B,IAAA,qCAAqB,EAAC,MAAM,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAClC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,CAAE,wBAAwB;QAC7D,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IAClB,CAAC;IAED;;;;;;OAMG;IACH,uBAAK,GAAL,UAAM,KAAa,EAAE,SAAiB;QACpC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAChC,IAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAChD,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QAC/C,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAC7B,OAAO,KAAK,CAAC;IACf,CAAC;IAWD;;OAEG;IACH,2BAAS,GAAT;QACE,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,6BAAW,GAAX;QACE,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,EAAE,EAAR,CAAQ,CAAC,CAAC,CAAC;IACrD,CAAC;IAED;;;OAGG;IACH,iCAAe,GAAf,UAAgB,SAAiB;QAAjC,iBAIC;QAHC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,KAAK;YACpC,OAAO,SAAS,GAAG,KAAK,CAAC,aAAa,IAAI,KAAI,CAAC,MAAM,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;;OASG;IACH,8BAAY,GAAZ,UAAa,KAAa,EAAE,SAAqB,EAAE,SAAiB;QAClE,IAAM,qBAAqB,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAC5E,IAAM,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAChE,IAAM,yBAAyB,GAAa,EAAE,CAAC;QAE/C,KAA6B,UAAgB,EAAhB,qCAAgB,EAAhB,8BAAgB,EAAhB,IAAgB,EAAE;YAA1C,IAAM,cAAc,yBAAA;YACvB,IAAI,qBAAqB,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtC,yBAAyB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC/C,SAAS;aACV;YAED,wEAAwE;YACxE,sEAAsE;YACtE,aAAa;YACb,IAAI,aAAa,GAAG,CAAC,CAAC,CAAC;YACvB,IAAI,aAAa,GAAG,CAAC,CAAC,CAAC;YACvB,KAAyB,UAAqB,EAArB,+CAAqB,EAArB,mCAAqB,EAArB,IAAqB,EAAE;gBAA3C,IAAM,UAAU,8BAAA;gBACnB,IAAM,UAAU,GAAG,SAAS,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC,CAAC;gBACzD,IAAI,UAAU,IAAI,IAAI,CAAC,aAAa,IAAI,UAAU,GAAG,aAAa,EAAE;oBAClE,aAAa,GAAG,UAAU,CAAC;oBAC3B,aAAa,GAAG,UAAU,CAAC;iBAC5B;aACF;YACD,IAAI,aAAa,IAAI,CAAC,EAAE;gBACtB,qDAAqD;gBACrD,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;gBAC7C,WAAW,GAAG,MAAM,CAAC,MAAM,CACvB,WAAW,EACX,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;gBACxE,KAAK,CAAC,cAAc,CAAC,CAAC,EAAE,GAAG,WAAW,CAAC,EAAE,CAAC;gBAC1C,IAAM,KAAK,GAAG,qBAAqB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;gBAC3D,qBAAqB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aACxC;iBAAM;gBACL,yBAAyB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;aAChD;SACF;QAED,iDAAiD;QACjD,KAA6B,UAAyB,EAAzB,uDAAyB,EAAzB,uCAAyB,EAAzB,IAAyB,EAAE;YAAnD,IAAM,cAAc,kCAAA;YACvB,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE,SAAS,CAAC,CAAC;YACpE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC3B,KAAK,CAAC,cAAc,CAAC,CAAC,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC;SACxC;IACH,CAAC;IAED;;;;;;;;;OASG;IACH,8BAAY,GAAZ,UAAa,SAAiB;QAC5B,yEAAyE;QACzE,sBAAsB;QACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAC,EAAE,EAAE,EAAE,IAAK,OAAA,EAAE,CAAC,aAAa,GAAG,EAAE,CAAC,aAAa,EAAnC,CAAmC,CAAC,CAAC;QAClE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC;IAED;;;;;;;OAOG;IACH,6BAAW,GAAX,UAAY,IAAU,EAAE,SAAiB,EAAE,OAAgB;QACzD,IAAM,KAAK,GAAU;YACnB,EAAE,EAAE,OAAO,IAAI,IAAI,CAAC,WAAW,EAAE;YACjC,aAAa,EAAE,SAAS;YACxB,SAAS,EAAE,kBAAI,IAAI,CAAC,SAAS,QAAE,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,cAAK,QAAQ,EAAE,EAAf,CAAe,CAAC;SAChE,CAAC;QACF,IAAI,IAAI,CAAC,GAAG,KAAK,SAAS,EAAE;YAC1B,KAAK,CAAC,GAAG,gBAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SAC3B;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACH,6BAAW,GAAX;QACE,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC;QACjB,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,wBAAM,GAAN;QAAO,aAAgB;aAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;YAAhB,wBAAgB;;QACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,EAAvB,CAAuB,CAAC,CAAC;IACrE,CAAC;IAED;;OAEG;IACH,uBAAK,GAAL;QACE,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACnB,CAAC;IACH,cAAC;AAAD,CAAC,AAlLD,IAkLC;AAlLqB,0BAAO","sourcesContent":[null]}},"error":null,"hash":"7520165ac9ee35bfe4605ff25a4ec1b5","cacheData":{"env":{}}}