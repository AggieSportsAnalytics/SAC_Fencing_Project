{"id":"node_modules/@tensorflow-models/pose-detection/shared/calculators/convert_image_to_tensor.js","dependencies":[{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\convert_image_to_tensor.js.map","includedInParent":true,"mtime":1694704590638},{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\package.json","includedInParent":true,"mtime":1694684692056},{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\.babelrc","includedInParent":true,"mtime":1694684692055},{"name":"@tensorflow/tfjs-core","loc":{"line":20,"column":17},"parent":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\convert_image_to_tensor.js","resolved":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\index.js"},{"name":"./get_rotated_sub_rect_to_rect_transformation_matrix","loc":{"line":21,"column":67},"parent":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\convert_image_to_tensor.js","resolved":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\get_rotated_sub_rect_to_rect_transformation_matrix.js"},{"name":"./image_utils","loc":{"line":22,"column":28},"parent":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\convert_image_to_tensor.js","resolved":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\image_utils.js"},{"name":"./shift_image_value","loc":{"line":23,"column":34},"parent":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\convert_image_to_tensor.js","resolved":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\shift_image_value.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertImageToTensor = void 0;\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\nvar get_rotated_sub_rect_to_rect_transformation_matrix_1 = require(\"./get_rotated_sub_rect_to_rect_transformation_matrix\");\r\nvar image_utils_1 = require(\"./image_utils\");\r\nvar shift_image_value_1 = require(\"./shift_image_value\");\r\n/**\r\n * Convert an image or part of it to an image tensor.\r\n *\r\n * @param image An image, video frame or image tensor.\r\n * @param config\r\n *      inputResolution: The target height and width.\r\n *      keepAspectRatio?: Whether target tensor should keep aspect ratio.\r\n * @param normRect A normalized rectangle, representing the subarea to crop from\r\n *      the image. If normRect is provided, the returned image tensor represents\r\n *      the subarea.\r\n * @returns A map with the following properties:\r\n *     - imageTensor\r\n *     - padding: Padding ratio of left, top, right, bottom, based on the output\r\n * dimensions.\r\n *     - transformationMatrix: Projective transform matrix used to transform\r\n * input image to transformed image.\r\n */\r\nfunction convertImageToTensor(image, config, normRect) {\r\n    var outputTensorSize = config.outputTensorSize, keepAspectRatio = config.keepAspectRatio, borderMode = config.borderMode, outputTensorFloatRange = config.outputTensorFloatRange;\r\n    // Ref:\r\n    // https://github.com/google/mediapipe/blob/master/mediapipe/calculators/tensor/image_to_tensor_calculator.cc\r\n    var imageSize = (0, image_utils_1.getImageSize)(image);\r\n    var roi = (0, image_utils_1.getRoi)(imageSize, normRect);\r\n    var padding = (0, image_utils_1.padRoi)(roi, outputTensorSize, keepAspectRatio);\r\n    var transformationMatrix = (0, get_rotated_sub_rect_to_rect_transformation_matrix_1.getRotatedSubRectToRectTransformMatrix)(roi, imageSize.width, imageSize.height, false);\r\n    var imageTensor = tf.tidy(function () {\r\n        var $image = (0, image_utils_1.toImageTensor)(image);\r\n        var transformMatrix = tf.tensor2d((0, image_utils_1.getProjectiveTransformMatrix)(transformationMatrix, imageSize, outputTensorSize), [1, 8]);\r\n        var fillMode = borderMode === 'zero' ? 'constant' : 'nearest';\r\n        var imageTransformed = tf.image.transform(\r\n        // tslint:disable-next-line: no-unnecessary-type-assertion\r\n        tf.expandDims(tf.cast($image, 'float32')), transformMatrix, 'bilinear', fillMode, 0, [outputTensorSize.height, outputTensorSize.width]);\r\n        var imageShifted = outputTensorFloatRange != null ?\r\n            (0, shift_image_value_1.shiftImageValue)(imageTransformed, outputTensorFloatRange) :\r\n            imageTransformed;\r\n        return imageShifted;\r\n    });\r\n    return { imageTensor: imageTensor, padding: padding, transformationMatrix: transformationMatrix };\r\n}\r\nexports.convertImageToTensor = convertImageToTensor;\r\n"},"sourceMaps":{"js":{"version":3,"file":"convert_image_to_tensor.js","sourceRoot":"","sources":["../../../src/shared/calculators/convert_image_to_tensor.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;GAeG;AACH,0CAA4C;AAG5C,2HAA4G;AAC5G,6CAAwG;AAIxG,yDAAoD;AAEpD;;;;;;;;;;;;;;;;GAgBG;AACH,SAAgB,oBAAoB,CAChC,KAAiB,EAAE,MAA2B,EAAE,QAAe;IAM/D,IAAA,gBAAgB,GAId,MAAM,iBAJQ,EAChB,eAAe,GAGb,MAAM,gBAHO,EACf,UAAU,GAER,MAAM,WAFE,EACV,sBAAsB,GACpB,MAAM,uBADc,CACb;IAEX,OAAO;IACP,6GAA6G;IAC7G,IAAM,SAAS,GAAG,IAAA,0BAAY,EAAC,KAAK,CAAC,CAAC;IACtC,IAAM,GAAG,GAAG,IAAA,oBAAM,EAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACxC,IAAM,OAAO,GAAG,IAAA,oBAAM,EAAC,GAAG,EAAE,gBAAgB,EAAE,eAAe,CAAC,CAAC;IAC/D,IAAM,oBAAoB,GAAG,IAAA,2FAAsC,EAC/D,GAAG,EAAE,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAEnD,IAAM,WAAW,GAAG,EAAE,CAAC,IAAI,CAAC;QAC1B,IAAM,MAAM,GAAG,IAAA,2BAAa,EAAC,KAAK,CAAC,CAAC;QAEpC,IAAM,eAAe,GAAG,EAAE,CAAC,QAAQ,CAC/B,IAAA,0CAA4B,EACxB,oBAAoB,EAAE,SAAS,EAAE,gBAAgB,CAAC,EACtD,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAEZ,IAAM,QAAQ,GAAG,UAAU,KAAK,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC;QAEhE,IAAM,gBAAgB,GAAG,EAAE,CAAC,KAAK,CAAC,SAAS;QACvC,0DAA0D;QAC1D,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAgB,EACxD,eAAe,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,EACxC,CAAC,gBAAgB,CAAC,MAAM,EAAE,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;QAEvD,IAAM,YAAY,GAAG,sBAAsB,IAAI,IAAI,CAAC,CAAC;YACjD,IAAA,mCAAe,EAAC,gBAAgB,EAAE,sBAAsB,CAAC,CAAC,CAAC;YAC3D,gBAAgB,CAAC;QAErB,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,OAAO,EAAC,WAAW,aAAA,EAAE,OAAO,SAAA,EAAE,oBAAoB,sBAAA,EAAC,CAAC;AACtD,CAAC;AA7CD,oDA6CC","sourcesContent":[null]}},"error":null,"hash":"a0acd9879dec051ca7ce92c26df5277a","cacheData":{"env":{}}}