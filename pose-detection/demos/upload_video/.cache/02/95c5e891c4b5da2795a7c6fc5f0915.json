{"id":"node_modules/@tensorflow/tfjs-core/dist/ops/ragged_tensor_to_tensor.js","dependencies":[{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\package.json","includedInParent":true,"mtime":1702881059798},{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\.babelrc","includedInParent":true,"mtime":1699931790989},{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\package.json","includedInParent":true,"mtime":1703654060392},{"name":"../engine","loc":{"line":17,"column":23,"index":742},"parent":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\ragged_tensor_to_tensor.js","resolved":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\engine.js"},{"name":"../kernel_names","loc":{"line":18,"column":37,"index":793},"parent":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\ragged_tensor_to_tensor.js","resolved":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\kernel_names.js"},{"name":"../tensor_util_env","loc":{"line":19,"column":32,"index":845},"parent":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\ragged_tensor_to_tensor.js","resolved":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\tensor_util_env.js"},{"name":"./operation","loc":{"line":20,"column":19,"index":887},"parent":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\ragged_tensor_to_tensor.js","resolved":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\operation.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.raggedTensorToTensor = void 0;\nvar _engine = require(\"../engine\");\nvar _kernel_names = require(\"../kernel_names\");\nvar _tensor_util_env = require(\"../tensor_util_env\");\nvar _operation = require(\"./operation\");\n/**\r\n * @license\r\n * Copyright 2022 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n\n/**\r\n * Create a dense tensor from a ragged tensor, possibly altering its shape.\r\n *\r\n * The raggedTensorToTensor op creates a dense tensor from am array of row\r\n * partition tensors, a value vector, and default values. If the shape is\r\n * unspecified, the minimal shape required to contain all the elements in the\r\n * ragged tensor (the natural shape) will be used. If some dimensions are left\r\n * unspecified, then the size of the natural shape is used in that dimension.\r\n *\r\n * The defaultValue will be broadcast to the output shape. After that, the\r\n * values from the ragged tensor overwrite the default values. Note that the\r\n * defaultValue must have less dimensions than the value.\r\n *\r\n * The row partition tensors are in the order of the dimensions. At present, the\r\n * types can be: \"ROW_SPLITS\": the row_splits tensor from the ragged tensor.\r\n *   \"VALUE_ROWIDS\": the value_rowids tensor from the ragged tensor.\r\n *   \"FIRST_DIM_SIZE\": if value_rowids is used for the first dimension, then it\r\n * is preceded by \"FIRST_DIM_SIZE\".\r\n * ```\r\n * @param shape: A Tensor. Must be one of the following types: 'int32'. The\r\n *     desired shape of the output tensor. If left unspecified (empty), the\r\n *     minimal shape required to contain all the elements in the ragged tensor\r\n *     (the natural shape) will be used. If some dimensions are left\r\n *     unspecified, then the size of the natural shape is used in that\r\n *     dimension.\r\n *\r\n *     Note that dense dimensions cannot be modified by the shape argument.\r\n *     Trying to change the size of a dense dimension will cause the op to fail.\r\n *     Examples: natural shape: [4, 5, 6] shape: -1 output shape: [4, 5, 6]\r\n *\r\n *     natural shape: [4, 5, 6] shape: [3, -1, 2] output shape: [3, 5, 2]\r\n *\r\n *     natural shape: [4, 5, 6] shape: [3, 7, 2] output shape: [3, 7, 2]\r\n * @param values: A Tensor. A 1D tensor representing the values of the ragged\r\n *     tensor.\r\n * @param defaultValue: A Tensor. Must have the same type as values. The\r\n *     defaultValue when the shape is larger than the ragged tensor. The\r\n *     defaultValue is broadcast until it is the shape of the output tensor,\r\n *     and then overwritten by values in the ragged tensor. The default value\r\n *     must be compatible with this broadcast operation, and must have fewer\r\n *     dimensions than the value tensor.\r\n * @param rowPartitionTensors: A list of at least 1 Tensor objects with the same\r\n *     type in: 'int32'.\r\n * @param rowPartitionTypes: A list of strings. The types of the row partition\r\n *     tensors. At present, these can be:\r\n *     \"ROW_SPLITS\": the row_splits tensor from the ragged tensor.\r\n *     \"VALUE_ROWIDS\": the value_rowids tensor from the ragged tensor.\r\n *     \"FIRST_DIM_SIZE\": if value_rowids is used for the first dimension, then\r\n *         it is preceeded by \"FIRST_DIM_SIZE\". The tensors are in the order of\r\n *         the dimensions.\r\n * @return A Tensor. Has the same type as values.\r\n * @doc {heading: 'Operations', subheading: 'Ragged'}\r\n */\nfunction raggedTensorToTensor_(shape, values, defaultValue, rowPartitionTensors, rowPartitionTypes) {\n  const $shape = (0, _tensor_util_env.convertToTensor)(shape, 'shape', 'raggedTensorToTensor', 'int32');\n  const $values = (0, _tensor_util_env.convertToTensor)(values, 'values', 'raggedTensorToTensor');\n  const $defaultValue = (0, _tensor_util_env.convertToTensor)(defaultValue, 'defaultValue', 'raggedTensorToTensor', $values.dtype);\n  const $rowPartitionTensors = rowPartitionTensors.map((t, i) => (0, _tensor_util_env.convertToTensor)(t, `tensors${i}`, 'raggedTensorToTensor', 'int32'));\n  const inputs = {\n    shape: $shape,\n    values: $values,\n    defaultValue: $defaultValue,\n    rowPartitionTensors: $rowPartitionTensors\n  };\n  const attrs = {\n    rowPartitionTypes\n  };\n  return _engine.ENGINE.runKernel(_kernel_names.RaggedTensorToTensor, inputs, attrs);\n}\nconst raggedTensorToTensor = exports.raggedTensorToTensor = /* @__PURE__ */(0, _operation.op)({\n  raggedTensorToTensor_\n});"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":7,"column":11}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":7,"column":14}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":7,"column":21}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":8,"column":4}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":8,"column":17}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":8,"column":20}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":8,"column":27}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":9,"column":4}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":9,"column":20}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":9,"column":23}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":9,"column":30}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":10,"column":4}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":10,"column":14}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":10,"column":17}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":10,"column":24}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":28,"column":0}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":78,"column":0},"generated":{"line":81,"column":0}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":78,"column":9},"generated":{"line":81,"column":9}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":78,"column":30},"generated":{"line":81,"column":30}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":79,"column":4},"generated":{"line":81,"column":31}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":79,"column":28},"generated":{"line":81,"column":36}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":79,"column":30},"generated":{"line":81,"column":38}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":79,"column":55},"generated":{"line":81,"column":44}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":80,"column":4},"generated":{"line":81,"column":46}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":80,"column":35},"generated":{"line":81,"column":58}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":80,"column":37},"generated":{"line":81,"column":60}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":80,"column":66},"generated":{"line":81,"column":79}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":81,"column":4},"generated":{"line":81,"column":81}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":81,"column":31},"generated":{"line":81,"column":98}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":81,"column":31},"generated":{"line":81,"column":100}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":82,"column":2},"generated":{"line":82,"column":2}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":82,"column":8},"generated":{"line":82,"column":8}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":82,"column":14},"generated":{"line":82,"column":14}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":83,"column":6},"generated":{"line":82,"column":17}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":83,"column":6},"generated":{"line":82,"column":21}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":83,"column":21},"generated":{"line":82,"column":53}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":83,"column":22},"generated":{"line":82,"column":55}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":83,"column":27},"generated":{"line":82,"column":60}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":83,"column":29},"generated":{"line":82,"column":62}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":83,"column":36},"generated":{"line":82,"column":69}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":83,"column":38},"generated":{"line":82,"column":71}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":83,"column":60},"generated":{"line":82,"column":93}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":83,"column":62},"generated":{"line":82,"column":95}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":83,"column":69},"generated":{"line":82,"column":102}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":83,"column":70},"generated":{"line":82,"column":103}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":84,"column":2},"generated":{"line":83,"column":2}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":84,"column":8},"generated":{"line":83,"column":8}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":84,"column":15},"generated":{"line":83,"column":15}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":84,"column":18},"generated":{"line":83,"column":18}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":84,"column":18},"generated":{"line":83,"column":22}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":84,"column":33},"generated":{"line":83,"column":54}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":84,"column":34},"generated":{"line":83,"column":56}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":84,"column":40},"generated":{"line":83,"column":62}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":84,"column":42},"generated":{"line":83,"column":64}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":84,"column":50},"generated":{"line":83,"column":72}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":84,"column":52},"generated":{"line":83,"column":74}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":84,"column":74},"generated":{"line":83,"column":96}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":84,"column":75},"generated":{"line":83,"column":97}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":85,"column":2},"generated":{"line":84,"column":2}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":85,"column":8},"generated":{"line":84,"column":8}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":85,"column":21},"generated":{"line":84,"column":21}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":85,"column":24},"generated":{"line":84,"column":24}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":85,"column":24},"generated":{"line":84,"column":28}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":85,"column":39},"generated":{"line":84,"column":60}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":86,"column":6},"generated":{"line":84,"column":62}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":86,"column":18},"generated":{"line":84,"column":74}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":86,"column":20},"generated":{"line":84,"column":76}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":86,"column":34},"generated":{"line":84,"column":90}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":86,"column":36},"generated":{"line":84,"column":92}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":86,"column":58},"generated":{"line":84,"column":114}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":86,"column":60},"generated":{"line":84,"column":116}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":86,"column":67},"generated":{"line":84,"column":123}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":86,"column":68},"generated":{"line":84,"column":124}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":86,"column":73},"generated":{"line":84,"column":129}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":86,"column":74},"generated":{"line":84,"column":130}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":87,"column":2},"generated":{"line":85,"column":2}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":87,"column":8},"generated":{"line":85,"column":8}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":87,"column":28},"generated":{"line":85,"column":28}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":87,"column":31},"generated":{"line":85,"column":31}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":87,"column":50},"generated":{"line":85,"column":50}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":87,"column":51},"generated":{"line":85,"column":51}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":87,"column":54},"generated":{"line":85,"column":54}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":88,"column":6},"generated":{"line":85,"column":55}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":88,"column":7},"generated":{"line":85,"column":56}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":88,"column":8},"generated":{"line":85,"column":57}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":88,"column":10},"generated":{"line":85,"column":59}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":88,"column":11},"generated":{"line":85,"column":60}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":10},"generated":{"line":85,"column":65}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":10},"generated":{"line":85,"column":69}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":25},"generated":{"line":85,"column":101}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":26},"generated":{"line":85,"column":103}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":27},"generated":{"line":85,"column":104}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":29},"generated":{"line":85,"column":106}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":39},"generated":{"line":85,"column":116}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":40},"generated":{"line":85,"column":117}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":42},"generated":{"line":85,"column":119}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":44},"generated":{"line":85,"column":121}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":66},"generated":{"line":85,"column":143}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":68},"generated":{"line":85,"column":145}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":75},"generated":{"line":85,"column":152}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":76},"generated":{"line":85,"column":153}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":89,"column":77},"generated":{"line":85,"column":154}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":91,"column":2},"generated":{"line":86,"column":2}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":91,"column":8},"generated":{"line":86,"column":8}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":91,"column":14},"generated":{"line":86,"column":14}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":91,"column":45},"generated":{"line":86,"column":17}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":92,"column":4},"generated":{"line":87,"column":4}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":92,"column":9},"generated":{"line":87,"column":9}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":92,"column":11},"generated":{"line":87,"column":11}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":92,"column":17},"generated":{"line":87,"column":17}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":93,"column":4},"generated":{"line":88,"column":4}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":93,"column":10},"generated":{"line":88,"column":10}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":93,"column":12},"generated":{"line":88,"column":12}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":93,"column":19},"generated":{"line":88,"column":19}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":94,"column":4},"generated":{"line":89,"column":4}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":94,"column":16},"generated":{"line":89,"column":16}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":94,"column":18},"generated":{"line":89,"column":18}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":94,"column":31},"generated":{"line":89,"column":31}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":95,"column":4},"generated":{"line":90,"column":4}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":95,"column":23},"generated":{"line":90,"column":23}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":95,"column":25},"generated":{"line":90,"column":25}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":96,"column":3},"generated":{"line":91,"column":3}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":92,"column":2}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":97,"column":8},"generated":{"line":92,"column":8}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":97,"column":13},"generated":{"line":92,"column":13}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":97,"column":43},"generated":{"line":92,"column":16}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":97,"column":44},"generated":{"line":93,"column":4}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":97,"column":61},"generated":{"line":94,"column":2}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":97,"column":62},"generated":{"line":94,"column":3}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":99,"column":2},"generated":{"line":95,"column":2}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":99,"column":9},"generated":{"line":95,"column":9}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":99,"column":15},"generated":{"line":95,"column":23}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":99,"column":16},"generated":{"line":95,"column":24}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":99,"column":25},"generated":{"line":95,"column":33}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":99,"column":26},"generated":{"line":95,"column":34}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":99,"column":46},"generated":{"line":95,"column":68}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":99,"column":48},"generated":{"line":95,"column":70}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":99,"column":60},"generated":{"line":95,"column":76}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":99,"column":62},"generated":{"line":95,"column":78}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":99,"column":73},"generated":{"line":95,"column":83}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":99,"column":74},"generated":{"line":95,"column":84}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":100,"column":0},"generated":{"line":96,"column":0}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":7},"generated":{"line":97,"column":0}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":13},"generated":{"line":97,"column":6}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":33},"generated":{"line":97,"column":26}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":33},"generated":{"line":97,"column":29}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":33},"generated":{"line":97,"column":36}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":33},"generated":{"line":97,"column":37}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":33},"generated":{"line":97,"column":57}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":36},"generated":{"line":97,"column":60}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":52},"generated":{"line":97,"column":75}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":52},"generated":{"line":97,"column":79}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":54},"generated":{"line":97,"column":92}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":55},"generated":{"line":97,"column":94}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":56},"generated":{"line":98,"column":2}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":77},"generated":{"line":99,"column":0}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":78},"generated":{"line":99,"column":1}},{"source":"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","name":null,"original":{"line":102,"column":79},"generated":{"line":99,"column":2}}],"sources":{"../../../../../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Create a dense tensor from a ragged tensor, possibly altering its shape.\n *\n * The raggedTensorToTensor op creates a dense tensor from am array of row\n * partition tensors, a value vector, and default values. If the shape is\n * unspecified, the minimal shape required to contain all the elements in the\n * ragged tensor (the natural shape) will be used. If some dimensions are left\n * unspecified, then the size of the natural shape is used in that dimension.\n *\n * The defaultValue will be broadcast to the output shape. After that, the\n * values from the ragged tensor overwrite the default values. Note that the\n * defaultValue must have less dimensions than the value.\n *\n * The row partition tensors are in the order of the dimensions. At present, the\n * types can be: \"ROW_SPLITS\": the row_splits tensor from the ragged tensor.\n *   \"VALUE_ROWIDS\": the value_rowids tensor from the ragged tensor.\n *   \"FIRST_DIM_SIZE\": if value_rowids is used for the first dimension, then it\n * is preceded by \"FIRST_DIM_SIZE\".\n * ```\n * @param shape: A Tensor. Must be one of the following types: 'int32'. The\n *     desired shape of the output tensor. If left unspecified (empty), the\n *     minimal shape required to contain all the elements in the ragged tensor\n *     (the natural shape) will be used. If some dimensions are left\n *     unspecified, then the size of the natural shape is used in that\n *     dimension.\n *\n *     Note that dense dimensions cannot be modified by the shape argument.\n *     Trying to change the size of a dense dimension will cause the op to fail.\n *     Examples: natural shape: [4, 5, 6] shape: -1 output shape: [4, 5, 6]\n *\n *     natural shape: [4, 5, 6] shape: [3, -1, 2] output shape: [3, 5, 2]\n *\n *     natural shape: [4, 5, 6] shape: [3, 7, 2] output shape: [3, 7, 2]\n * @param values: A Tensor. A 1D tensor representing the values of the ragged\n *     tensor.\n * @param defaultValue: A Tensor. Must have the same type as values. The\n *     defaultValue when the shape is larger than the ragged tensor. The\n *     defaultValue is broadcast until it is the shape of the output tensor,\n *     and then overwritten by values in the ragged tensor. The default value\n *     must be compatible with this broadcast operation, and must have fewer\n *     dimensions than the value tensor.\n * @param rowPartitionTensors: A list of at least 1 Tensor objects with the same\n *     type in: 'int32'.\n * @param rowPartitionTypes: A list of strings. The types of the row partition\n *     tensors. At present, these can be:\n *     \"ROW_SPLITS\": the row_splits tensor from the ragged tensor.\n *     \"VALUE_ROWIDS\": the value_rowids tensor from the ragged tensor.\n *     \"FIRST_DIM_SIZE\": if value_rowids is used for the first dimension, then\n *         it is preceeded by \"FIRST_DIM_SIZE\". The tensors are in the order of\n *         the dimensions.\n * @return A Tensor. Has the same type as values.\n * @doc {heading: 'Operations', subheading: 'Ragged'}\n */\nfunction raggedTensorToTensor_(\n    shape: Tensor|TensorLike, values: Tensor|TensorLike,\n    defaultValue: Tensor|TensorLike, rowPartitionTensors: Tensor[],\n    rowPartitionTypes: string[]): Tensor {\n  const $shape =\n      convertToTensor(shape, 'shape', 'raggedTensorToTensor', 'int32');\n  const $values = convertToTensor(values, 'values', 'raggedTensorToTensor');\n  const $defaultValue = convertToTensor(\n      defaultValue, 'defaultValue', 'raggedTensorToTensor', $values.dtype);\n  const $rowPartitionTensors = rowPartitionTensors.map(\n      (t, i) =>\n          convertToTensor(t, `tensors${i}`, 'raggedTensorToTensor', 'int32'));\n\n  const inputs: RaggedTensorToTensorInputs = {\n    shape: $shape,\n    values: $values,\n    defaultValue: $defaultValue,\n    rowPartitionTensors: $rowPartitionTensors\n  };\n  const attrs: RaggedTensorToTensorAttrs = {rowPartitionTypes};\n\n  return ENGINE.runKernel(RaggedTensorToTensor, inputs as {}, attrs as {});\n}\n\nexport const raggedTensorToTensor = /* @__PURE__ */ op({raggedTensorToTensor_});\n"},"lineCount":null}},"error":null,"hash":"16cf305bf85c97f9bd118317e79afe64","cacheData":{"env":{}}}