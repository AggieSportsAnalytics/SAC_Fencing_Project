{"id":"node_modules/@tensorflow-models/pose-detection/movenet/crop_utils.js","dependencies":[{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\crop_utils.js.map","includedInParent":true,"mtime":1694704590963},{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\package.json","includedInParent":true,"mtime":1694684692056},{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\.babelrc","includedInParent":true,"mtime":1694684692055},{"name":"../constants","loc":{"line":20,"column":26},"parent":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\crop_utils.js","resolved":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\constants.js"},{"name":"./constants","loc":{"line":21,"column":26},"parent":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\crop_utils.js","resolved":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\movenet\\constants.js"}],"generated":{"js":"\"use strict\";\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.initCropRegion = exports.determineNextCropRegion = exports.torsoVisible = void 0;\r\nvar constants_1 = require(\"../constants\");\r\nvar constants_2 = require(\"./constants\");\r\n/**\r\n * Determines whether the torso of a person is visible.\r\n *\r\n * @param keypoints An array of `Keypoint`s associated with a person.\r\n * @param keypointIndexByName A map from keypoint name to index in the keypoints\r\n *     array.\r\n * @return A boolean indicating whether the torso is visible.\r\n */\r\nfunction torsoVisible(keypoints, keypointIndexByName) {\r\n    return ((keypoints[keypointIndexByName['left_hip']].score >\r\n        constants_2.MIN_CROP_KEYPOINT_SCORE ||\r\n        keypoints[keypointIndexByName['right_hip']].score >\r\n            constants_2.MIN_CROP_KEYPOINT_SCORE) &&\r\n        (keypoints[keypointIndexByName['left_shoulder']].score >\r\n            constants_2.MIN_CROP_KEYPOINT_SCORE ||\r\n            keypoints[keypointIndexByName['right_shoulder']].score >\r\n                constants_2.MIN_CROP_KEYPOINT_SCORE));\r\n}\r\nexports.torsoVisible = torsoVisible;\r\n/**\r\n * Calculates the maximum distance from each keypoint to the center location.\r\n * The function returns the maximum distances from the two sets of keypoints:\r\n * full 17 keypoints and 4 torso keypoints. The returned information will be\r\n * used to determine the crop size. See determineCropRegion for more detail.\r\n *\r\n * @param keypoints An array of `Keypoint`s associated with a person.\r\n * @param keypointIndexByName A map from keypoint name to index in the keypoints\r\n *     array.\r\n * @param targetKeypoints Maps from joint names to coordinates.\r\n * @param centerY The Y coordinate of the center of the person.\r\n * @param centerX The X coordinate of the center of the person.\r\n * @return An array containing information about the torso and body range in the\r\n *     image: [maxTorsoYrange, maxTorsoXrange, maxBodyYrange, maxBodyXrange].\r\n */\r\nfunction determineTorsoAndBodyRange(keypoints, keypointIndexByName, targetKeypoints, centerY, centerX) {\r\n    var torsoJoints = ['left_shoulder', 'right_shoulder', 'left_hip', 'right_hip'];\r\n    var maxTorsoYrange = 0.0;\r\n    var maxTorsoXrange = 0.0;\r\n    for (var i = 0; i < torsoJoints.length; i++) {\r\n        var distY = Math.abs(centerY - targetKeypoints[torsoJoints[i]][0]);\r\n        var distX = Math.abs(centerX - targetKeypoints[torsoJoints[i]][1]);\r\n        if (distY > maxTorsoYrange) {\r\n            maxTorsoYrange = distY;\r\n        }\r\n        if (distX > maxTorsoXrange) {\r\n            maxTorsoXrange = distX;\r\n        }\r\n    }\r\n    var maxBodyYrange = 0.0;\r\n    var maxBodyXrange = 0.0;\r\n    for (var _i = 0, _a = Object.keys(targetKeypoints); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        if (keypoints[keypointIndexByName[key]].score < constants_2.MIN_CROP_KEYPOINT_SCORE) {\r\n            continue;\r\n        }\r\n        var distY = Math.abs(centerY - targetKeypoints[key][0]);\r\n        var distX = Math.abs(centerX - targetKeypoints[key][1]);\r\n        if (distY > maxBodyYrange) {\r\n            maxBodyYrange = distY;\r\n        }\r\n        if (distX > maxBodyXrange) {\r\n            maxBodyXrange = distX;\r\n        }\r\n    }\r\n    return [maxTorsoYrange, maxTorsoXrange, maxBodyYrange, maxBodyXrange];\r\n}\r\n/**\r\n * Determines the region to crop the image for the model to run inference on.\r\n * The algorithm uses the detected joints from the previous frame to estimate\r\n * the square region that encloses the full body of the target person and\r\n * centers at the midpoint of two hip joints. The crop size is determined by\r\n * the distances between each joint and the center point.\r\n * When the model is not confident with the four torso joint predictions, the\r\n * function returns a default crop which is the full image padded to square.\r\n *\r\n * @param currentCropRegion The crop region that was used for the current frame.\r\n *     Can be null for the very first frame that is handled by the detector.\r\n * @param keypoints An array of `Keypoint`s associated with a person.\r\n * @param keypointIndexByName A map from keypoint name to index in the keypoints\r\n *     array.\r\n * @param imageSize The size of the image that is being processed.\r\n * @return A `BoundingBox` that contains the new crop region.\r\n */\r\nfunction determineNextCropRegion(currentCropRegion, keypoints, keypointIndexByName, imageSize) {\r\n    var targetKeypoints = {};\r\n    for (var _i = 0, COCO_KEYPOINTS_1 = constants_1.COCO_KEYPOINTS; _i < COCO_KEYPOINTS_1.length; _i++) {\r\n        var key = COCO_KEYPOINTS_1[_i];\r\n        targetKeypoints[key] = [\r\n            keypoints[keypointIndexByName[key]].y * imageSize.height,\r\n            keypoints[keypointIndexByName[key]].x * imageSize.width\r\n        ];\r\n    }\r\n    if (torsoVisible(keypoints, keypointIndexByName)) {\r\n        var centerY = (targetKeypoints['left_hip'][0] + targetKeypoints['right_hip'][0]) / 2;\r\n        var centerX = (targetKeypoints['left_hip'][1] + targetKeypoints['right_hip'][1]) / 2;\r\n        var _a = determineTorsoAndBodyRange(keypoints, keypointIndexByName, targetKeypoints, centerY, centerX), maxTorsoYrange = _a[0], maxTorsoXrange = _a[1], maxBodyYrange = _a[2], maxBodyXrange = _a[3];\r\n        var cropLengthHalf = Math.max(maxTorsoXrange * 1.9, maxTorsoYrange * 1.9, maxBodyYrange * 1.2, maxBodyXrange * 1.2);\r\n        cropLengthHalf = Math.min(cropLengthHalf, Math.max(centerX, imageSize.width - centerX, centerY, imageSize.height - centerY));\r\n        var cropCorner = [centerY - cropLengthHalf, centerX - cropLengthHalf];\r\n        if (cropLengthHalf > Math.max(imageSize.width, imageSize.height) / 2) {\r\n            return initCropRegion(currentCropRegion == null, imageSize);\r\n        }\r\n        else {\r\n            var cropLength = cropLengthHalf * 2;\r\n            return {\r\n                yMin: cropCorner[0] / imageSize.height,\r\n                xMin: cropCorner[1] / imageSize.width,\r\n                yMax: (cropCorner[0] + cropLength) / imageSize.height,\r\n                xMax: (cropCorner[1] + cropLength) / imageSize.width,\r\n                height: (cropCorner[0] + cropLength) / imageSize.height -\r\n                    cropCorner[0] / imageSize.height,\r\n                width: (cropCorner[1] + cropLength) / imageSize.width -\r\n                    cropCorner[1] / imageSize.width\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        return initCropRegion(currentCropRegion == null, imageSize);\r\n    }\r\n}\r\nexports.determineNextCropRegion = determineNextCropRegion;\r\n/**\r\n * Provides initial crop region.\r\n *\r\n * The function provides the initial crop region when the algorithm cannot\r\n * reliably determine the crop region from the previous frame. There are two\r\n * scenarios:\r\n *   1) The very first frame: the function returns the best guess by cropping\r\n *      a square in the middle of the image.\r\n *   2) Not enough reliable keypoints detected from the previous frame: the\r\n *      function pads the full image from both sides to make it a square\r\n *      image.\r\n *\r\n * @param firstFrame A boolean indicating whether we are initializing a crop\r\n *     region for the very first frame.\r\n * @param imageSize The size of the image that is being processed.\r\n * @return A `BoundingBox` that contains the initial crop region.\r\n */\r\nfunction initCropRegion(firstFrame, imageSize) {\r\n    var boxHeight, boxWidth, yMin, xMin;\r\n    if (firstFrame) {\r\n        // If it is the first frame, perform a best guess by making the square\r\n        // crop at the image center to better utilize the image pixels and\r\n        // create higher chance to enter the cropping loop.\r\n        if (imageSize.width > imageSize.height) {\r\n            boxHeight = 1.0;\r\n            boxWidth = imageSize.height / imageSize.width;\r\n            yMin = 0.0;\r\n            xMin = (imageSize.width / 2 - imageSize.height / 2) / imageSize.width;\r\n        }\r\n        else {\r\n            boxHeight = imageSize.width / imageSize.height;\r\n            boxWidth = 1.0;\r\n            yMin = (imageSize.height / 2 - imageSize.width / 2) / imageSize.height;\r\n            xMin = 0.0;\r\n        }\r\n    }\r\n    else {\r\n        // No cropRegion was available from a previous estimatePoses() call, so\r\n        // run the model on the full image with padding on both sides.\r\n        if (imageSize.width > imageSize.height) {\r\n            boxHeight = imageSize.width / imageSize.height;\r\n            boxWidth = 1.0;\r\n            yMin = (imageSize.height / 2 - imageSize.width / 2) / imageSize.height;\r\n            xMin = 0.0;\r\n        }\r\n        else {\r\n            boxHeight = 1.0;\r\n            boxWidth = imageSize.height / imageSize.width;\r\n            yMin = 0.0;\r\n            xMin = (imageSize.width / 2 - imageSize.height / 2) / imageSize.width;\r\n        }\r\n    }\r\n    return {\r\n        yMin: yMin,\r\n        xMin: xMin,\r\n        yMax: yMin + boxHeight,\r\n        xMax: xMin + boxWidth,\r\n        height: boxHeight,\r\n        width: boxWidth\r\n    };\r\n}\r\nexports.initCropRegion = initCropRegion;\r\n"},"sourceMaps":{"js":{"version":3,"file":"crop_utils.js","sourceRoot":"","sources":["../../src/movenet/crop_utils.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"5ebc785f0df62218d0c7e3f4b265733a","cacheData":{"env":{}}}