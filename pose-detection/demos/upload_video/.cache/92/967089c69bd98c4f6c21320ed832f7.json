{"id":"node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","dependencies":[{"name":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js.map","includedInParent":true,"mtime":1701727604749},{"name":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/package.json","includedInParent":true,"mtime":1701727604726},{"name":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/.babelrc","includedInParent":true,"mtime":1701727604305},{"name":"@tensorflow/tfjs-core","loc":{"line":4,"column":17},"parent":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/@tensorflow-models/pose-detection/shared/calculators/segmentation_smoothing.js","resolved":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/@tensorflow/tfjs-core/dist/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.smoothSegmentation = void 0;\nvar tf = require(\"@tensorflow/tfjs-core\");\n/**\n * A calculator for mixing two segmentation masks together, based on an\n * uncertantity probability estimate.\n * @param prevMaks Segmentation mask from previous image.\n * @param newMask Segmentation mask of current image.\n * @param config Contains ratio of amount of previous mask to blend with\n *     current.\n *\n * @returns Image mask.\n */\n// ref:\n// https://github.com/google/mediapipe/blob/master/mediapipe/calculators/image/segmentation_smoothing_calculator.cc\nfunction smoothSegmentation(prevMask, newMask, config) {\n    if (tf.getBackend() === 'webgl') {\n        // Same as implementation in the else case but reduces number of shader\n        // calls to 1 instead of 17.\n        return smoothSegmentationWebGL(prevMask, newMask, config);\n    }\n    return tf.tidy(function () {\n        /*\n         * Assume p := newMaskValue\n         * H(p) := 1 + (p * log(p) + (1-p) * log(1-p)) / log(2)\n         * uncertainty alpha(p) =\n         *   Clamp(1 - (1 - H(p)) * (1 - H(p)), 0, 1) [squaring the\n         * uncertainty]\n         *\n         * The following polynomial approximates uncertainty alpha as a\n         * function of (p + 0.5):\n         */\n        var c1 = 5.68842;\n        var c2 = -0.748699;\n        var c3 = -57.8051;\n        var c4 = 291.309;\n        var c5 = -624.717;\n        var t = tf.sub(newMask, 0.5);\n        var x = tf.square(t);\n        // Per element calculation is: 1.0 - Math.min(1.0, x * (c1 + x * (c2 + x\n        // * (c3 + x * (c4 + x * c5))))).\n        var uncertainty = tf.sub(1, tf.minimum(1, tf.mul(x, tf.add(c1, tf.mul(x, tf.add(c2, tf.mul(x, tf.add(c3, tf.mul(x, tf.add(c4, tf.mul(x, c5)))))))))));\n        // Per element calculation is: newMaskValue + (prevMaskValue -\n        // newMaskValue) * (uncertainty * combineWithPreviousRatio).\n        return tf.add(newMask, tf.mul(tf.sub(prevMask, newMask), tf.mul(uncertainty, config.combineWithPreviousRatio)));\n    });\n}\nexports.smoothSegmentation = smoothSegmentation;\nfunction smoothSegmentationWebGL(prevMask, newMask, config) {\n    var ratio = config.combineWithPreviousRatio.toFixed(2);\n    var program = {\n        variableNames: ['prevMask', 'newMask'],\n        outputShape: prevMask.shape,\n        userCode: \"\\n  void main() {\\n      ivec2 coords = getOutputCoords();\\n      int height = coords[0];\\n      int width = coords[1];\\n\\n      float prevMaskValue = getPrevMask(height, width);\\n      float newMaskValue = getNewMask(height, width);\\n\\n      /*\\n      * Assume p := newMaskValue\\n      * H(p) := 1 + (p * log(p) + (1-p) * log(1-p)) / log(2)\\n      * uncertainty alpha(p) =\\n      *   Clamp(1 - (1 - H(p)) * (1 - H(p)), 0, 1) [squaring the\\n      * uncertainty]\\n      *\\n      * The following polynomial approximates uncertainty alpha as a\\n      * function of (p + 0.5):\\n      */\\n      const float c1 = 5.68842;\\n      const float c2 = -0.748699;\\n      const float c3 = -57.8051;\\n      const float c4 = 291.309;\\n      const float c5 = -624.717;\\n      float t = newMaskValue - 0.5;\\n      float x = t * t;\\n\\n      float uncertainty =\\n        1.0 - min(1.0, x * (c1 + x * (c2 + x * (c3 + x * (c4 + x * c5)))));\\n\\n      float outputValue = newMaskValue + (prevMaskValue - newMaskValue) *\\n                             (uncertainty * \".concat(ratio, \");\\n\\n      setOutput(outputValue);\\n    }\\n\")\n    };\n    var webglBackend = tf.backend();\n    return tf.tidy(function () {\n        var outputTensorInfo = webglBackend.compileAndRun(program, [prevMask, newMask]);\n        return tf.engine().makeTensorFromDataId(outputTensorInfo.dataId, outputTensorInfo.shape, outputTensorInfo.dtype);\n    });\n}\n"},"sourceMaps":{"js":{"version":3,"file":"segmentation_smoothing.js","sourceRoot":"","sources":["../../../src/shared/calculators/segmentation_smoothing.ts"],"names":[],"mappings":";;;AAiBA,0CAA4C;AAI5C;;;;;;;;;GASG;AACH,OAAO;AACP,mHAAmH;AACnH,SAAgB,kBAAkB,CAC9B,QAAqB,EAAE,OAAoB,EAC3C,MAAmC;IACrC,IAAI,EAAE,CAAC,UAAU,EAAE,KAAK,OAAO,EAAE;QAC/B,uEAAuE;QACvE,4BAA4B;QAC5B,OAAO,uBAAuB,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;KAC3D;IACD,OAAO,EAAE,CAAC,IAAI,CAAC;QACb;;;;;;;;;WASG;QACH,IAAM,EAAE,GAAG,OAAO,CAAC;QACnB,IAAM,EAAE,GAAG,CAAC,QAAQ,CAAC;QACrB,IAAM,EAAE,GAAG,CAAC,OAAO,CAAC;QACpB,IAAM,EAAE,GAAG,OAAO,CAAC;QACnB,IAAM,EAAE,GAAG,CAAC,OAAO,CAAC;QACpB,IAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QAC/B,IAAM,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEvB,wEAAwE;QACxE,iCAAiC;QAEjC,IAAM,WAAW,GAAG,EAAE,CAAC,GAAG,CACtB,CAAC,EACD,EAAE,CAAC,OAAO,CACN,CAAC,EACD,EAAE,CAAC,GAAG,CACF,CAAC,EACD,EAAE,CAAC,GAAG,CACF,EAAE,EACF,EAAE,CAAC,GAAG,CACF,CAAC,EACD,EAAE,CAAC,GAAG,CACF,EAAE,EACF,EAAE,CAAC,GAAG,CACF,CAAC,EACD,EAAE,CAAC,GAAG,CACF,EAAE,EACF,EAAE,CAAC,GAAG,CACF,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAE1E,8DAA8D;QAC9D,4DAA4D;QAC5D,OAAO,EAAE,CAAC,GAAG,CACT,OAAO,EACP,EAAE,CAAC,GAAG,CACF,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,EACzB,EAAE,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;AACL,CAAC;AAzDD,gDAyDC;AAED,SAAS,uBAAuB,CAC5B,QAAqB,EAAE,OAAoB,EAC3C,MAAmC;IACrC,IAAM,KAAK,GAAG,MAAM,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACzD,IAAM,OAAO,GAAiB;QAC5B,aAAa,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC;QACtC,WAAW,EAAE,QAAQ,CAAC,KAAK;QAC3B,QAAQ,EAAE,2hCA+BgC,KAAK,iDAIlD;KACE,CAAC;IACF,IAAM,YAAY,GAAG,EAAE,CAAC,OAAO,EAAsB,CAAC;IAEtD,OAAO,EAAE,CAAC,IAAI,CAAC;QACb,IAAM,gBAAgB,GAClB,YAAY,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;QAC7D,OAAO,EAAE,CAAC,MAAM,EAAE,CAAC,oBAAoB,CAC5B,gBAAgB,CAAC,MAAM,EAAE,gBAAgB,CAAC,KAAK,EAC/C,gBAAgB,CAAC,KAAK,CAAgB,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":[null]}},"error":null,"hash":"af5b6cc79c531c47d2a7f73155d94f66","cacheData":{"env":{}}}