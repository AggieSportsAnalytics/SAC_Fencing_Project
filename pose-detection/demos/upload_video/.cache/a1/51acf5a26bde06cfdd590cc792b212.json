{"id":"node_modules/sparse-bitfield/index.js","dependencies":[{"name":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/package.json","includedInParent":true,"mtime":1705185626996},{"name":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/.babelrc","includedInParent":true,"mtime":1701727604305},{"name":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/sparse-bitfield/package.json","includedInParent":true,"mtime":1703711711198},{"name":"memory-pager","loc":{"line":1,"column":20,"index":20},"parent":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/sparse-bitfield/index.js","resolved":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/memory-pager/index.js"},{"name":"buffer","parent":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/sparse-bitfield/index.js","resolved":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nvar pager = require('memory-pager')\n\nmodule.exports = Bitfield\n\nfunction Bitfield (opts) {\n  if (!(this instanceof Bitfield)) return new Bitfield(opts)\n  if (!opts) opts = {}\n  if (Buffer.isBuffer(opts)) opts = {buffer: opts}\n\n  this.pageOffset = opts.pageOffset || 0\n  this.pageSize = opts.pageSize || 1024\n  this.pages = opts.pages || pager(this.pageSize)\n\n  this.byteLength = this.pages.length * this.pageSize\n  this.length = 8 * this.byteLength\n\n  if (!powerOfTwo(this.pageSize)) throw new Error('The page size should be a power of two')\n\n  this._trackUpdates = !!opts.trackUpdates\n  this._pageMask = this.pageSize - 1\n\n  if (opts.buffer) {\n    for (var i = 0; i < opts.buffer.length; i += this.pageSize) {\n      this.pages.set(i / this.pageSize, opts.buffer.slice(i, i + this.pageSize))\n    }\n    this.byteLength = opts.buffer.length\n    this.length = 8 * this.byteLength\n  }\n}\n\nBitfield.prototype.get = function (i) {\n  var o = i & 7\n  var j = (i - o) / 8\n\n  return !!(this.getByte(j) & (128 >> o))\n}\n\nBitfield.prototype.getByte = function (i) {\n  var o = i & this._pageMask\n  var j = (i - o) / this.pageSize\n  var page = this.pages.get(j, true)\n\n  return page ? page.buffer[o + this.pageOffset] : 0\n}\n\nBitfield.prototype.set = function (i, v) {\n  var o = i & 7\n  var j = (i - o) / 8\n  var b = this.getByte(j)\n\n  return this.setByte(j, v ? b | (128 >> o) : b & (255 ^ (128 >> o)))\n}\n\nBitfield.prototype.toBuffer = function () {\n  var all = alloc(this.pages.length * this.pageSize)\n\n  for (var i = 0; i < this.pages.length; i++) {\n    var next = this.pages.get(i, true)\n    var allOffset = i * this.pageSize\n    if (next) next.buffer.copy(all, allOffset, this.pageOffset, this.pageOffset + this.pageSize)\n  }\n\n  return all\n}\n\nBitfield.prototype.setByte = function (i, b) {\n  var o = i & this._pageMask\n  var j = (i - o) / this.pageSize\n  var page = this.pages.get(j, false)\n\n  o += this.pageOffset\n\n  if (page.buffer[o] === b) return false\n  page.buffer[o] = b\n\n  if (i >= this.byteLength) {\n    this.byteLength = i + 1\n    this.length = this.byteLength * 8\n  }\n\n  if (this._trackUpdates) this.pages.updated(page)\n\n  return true\n}\n\nfunction alloc (n) {\n  if (Buffer.alloc) return Buffer.alloc(n)\n  var b = new Buffer(n)\n  b.fill(0)\n  return b\n}\n\nfunction powerOfTwo (x) {\n  return !(x & (x - 1))\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/sparse-bitfield/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/sparse-bitfield/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}}],"sources":{"node_modules/sparse-bitfield/index.js":"var pager = require('memory-pager')\n\nmodule.exports = Bitfield\n\nfunction Bitfield (opts) {\n  if (!(this instanceof Bitfield)) return new Bitfield(opts)\n  if (!opts) opts = {}\n  if (Buffer.isBuffer(opts)) opts = {buffer: opts}\n\n  this.pageOffset = opts.pageOffset || 0\n  this.pageSize = opts.pageSize || 1024\n  this.pages = opts.pages || pager(this.pageSize)\n\n  this.byteLength = this.pages.length * this.pageSize\n  this.length = 8 * this.byteLength\n\n  if (!powerOfTwo(this.pageSize)) throw new Error('The page size should be a power of two')\n\n  this._trackUpdates = !!opts.trackUpdates\n  this._pageMask = this.pageSize - 1\n\n  if (opts.buffer) {\n    for (var i = 0; i < opts.buffer.length; i += this.pageSize) {\n      this.pages.set(i / this.pageSize, opts.buffer.slice(i, i + this.pageSize))\n    }\n    this.byteLength = opts.buffer.length\n    this.length = 8 * this.byteLength\n  }\n}\n\nBitfield.prototype.get = function (i) {\n  var o = i & 7\n  var j = (i - o) / 8\n\n  return !!(this.getByte(j) & (128 >> o))\n}\n\nBitfield.prototype.getByte = function (i) {\n  var o = i & this._pageMask\n  var j = (i - o) / this.pageSize\n  var page = this.pages.get(j, true)\n\n  return page ? page.buffer[o + this.pageOffset] : 0\n}\n\nBitfield.prototype.set = function (i, v) {\n  var o = i & 7\n  var j = (i - o) / 8\n  var b = this.getByte(j)\n\n  return this.setByte(j, v ? b | (128 >> o) : b & (255 ^ (128 >> o)))\n}\n\nBitfield.prototype.toBuffer = function () {\n  var all = alloc(this.pages.length * this.pageSize)\n\n  for (var i = 0; i < this.pages.length; i++) {\n    var next = this.pages.get(i, true)\n    var allOffset = i * this.pageSize\n    if (next) next.buffer.copy(all, allOffset, this.pageOffset, this.pageOffset + this.pageSize)\n  }\n\n  return all\n}\n\nBitfield.prototype.setByte = function (i, b) {\n  var o = i & this._pageMask\n  var j = (i - o) / this.pageSize\n  var page = this.pages.get(j, false)\n\n  o += this.pageOffset\n\n  if (page.buffer[o] === b) return false\n  page.buffer[o] = b\n\n  if (i >= this.byteLength) {\n    this.byteLength = i + 1\n    this.length = this.byteLength * 8\n  }\n\n  if (this._trackUpdates) this.pages.updated(page)\n\n  return true\n}\n\nfunction alloc (n) {\n  if (Buffer.alloc) return Buffer.alloc(n)\n  var b = new Buffer(n)\n  b.fill(0)\n  return b\n}\n\nfunction powerOfTwo (x) {\n  return !(x & (x - 1))\n}\n"},"lineCount":97}},"error":null,"hash":"fdc52023247f1af63d097e0c6e2e85d8","cacheData":{"env":{}}}