{"id":"node_modules/@tensorflow-models/pose-detection/shared/filters/relative_velocity_filter.js","dependencies":[{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\filters\\relative_velocity_filter.js.map","includedInParent":true,"mtime":1694704590806},{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\package.json","includedInParent":true,"mtime":1694684692056},{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\.babelrc","includedInParent":true,"mtime":1694684692055},{"name":"../calculators/constants","loc":{"line":20,"column":26},"parent":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\filters\\relative_velocity_filter.js","resolved":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\constants.js"},{"name":"./low_pass_filter","loc":{"line":21,"column":32},"parent":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\filters\\relative_velocity_filter.js","resolved":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\filters\\low_pass_filter.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RelativeVelocityFilter = void 0;\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nvar constants_1 = require(\"../calculators/constants\");\r\nvar low_pass_filter_1 = require(\"./low_pass_filter\");\r\n/**\r\n * This filter keeps track (on a window of specified size) of value changes\r\n * over time, which as result gives us velocity of how value changes over time.\r\n * With higher velocity it weights new values higher.\r\n *\r\n * Use `windowSize` and `velocityScale` to tweak this filter for your use case.\r\n */\r\n// ref:\r\n// https://github.com/google/mediapipe/blob/master/mediapipe/util/filtering/relative_velocity_filter.cc\r\nvar RelativeVelocityFilter = /** @class */ (function () {\r\n    /**\r\n     * Constructor of `RelativeVelocityFilter` class.\r\n     * @param config\r\n     *        `windowSize`:  Higher windowSize adds to lag and to stability.\r\n     *        `velocityScale`: Lower velocityScale adds to lag and to stability.\r\n     */\r\n    function RelativeVelocityFilter(config) {\r\n        this.config = config;\r\n        this.window = [];\r\n        this.lowPassFilter = new low_pass_filter_1.LowPassFilter(1.0);\r\n        this.lastValue = 0;\r\n        this.lastValueScale = 1;\r\n        this.lastTimestamp = -1;\r\n    }\r\n    /**\r\n     * Applies filter to the value.\r\n     * @param value valueToFilter.\r\n     * @param microSeconds timestamp associated with the value (for instance,\r\n     *     timestamp of the frame where you got value from).\r\n     * @param valueScale value scale (for instance, if your value is a distance\r\n     *     detected on a frame, it can look same on different devices but have\r\n     *     quite different absolute values due to different resolution, you\r\n     *     should come up with an appropriate parameter for your particular use\r\n     *     case).\r\n     */\r\n    RelativeVelocityFilter.prototype.apply = function (value, microSeconds, valueScale) {\r\n        if (value == null) {\r\n            return value;\r\n        }\r\n        var $microSeconds = Math.trunc(microSeconds);\r\n        if (this.lastTimestamp >= $microSeconds) {\r\n            // Results are unpreditable in this case, so nothing to do but return\r\n            // same value.\r\n            return value;\r\n        }\r\n        var alpha;\r\n        if (this.lastTimestamp === -1) {\r\n            alpha = 1;\r\n        }\r\n        else {\r\n            // Implement the DistanceEstimationMode.kLegacyTransition.\r\n            // TODO(lina128): Change to kForceCurrentScale or at least add an option\r\n            // that can be tweaked with parameter.\r\n            var distance = value * valueScale - this.lastValue * this.lastValueScale;\r\n            var duration = $microSeconds - this.lastTimestamp;\r\n            var cumulativeDistance = distance;\r\n            var cumulativeDuration = duration;\r\n            // Define max cumulative duration assuming 30 frames per second is a good\r\n            // frame rate, so assuming 30 values per second or 1 / 30 of a second is\r\n            // a good duration per window element.\r\n            var assumedMaxDuration = constants_1.SECOND_TO_MICRO_SECONDS / 30;\r\n            var maxCumulativeDuration = (1 + this.window.length) * assumedMaxDuration;\r\n            for (var _i = 0, _a = this.window; _i < _a.length; _i++) {\r\n                var el = _a[_i];\r\n                if (cumulativeDuration + el.duration > maxCumulativeDuration) {\r\n                    // This helps in cases when durations are large and outdated\r\n                    // window elements have bad impact on filtering results.\r\n                    break;\r\n                }\r\n                cumulativeDistance += el.distance;\r\n                cumulativeDuration += el.duration;\r\n            }\r\n            var velocity = cumulativeDistance / (cumulativeDuration * constants_1.MICRO_SECONDS_TO_SECOND);\r\n            alpha = 1 - 1 / (1 + this.config.velocityScale * Math.abs(velocity));\r\n            this.window.unshift({ distance: distance, duration: duration });\r\n            if (this.window.length > this.config.windowSize) {\r\n                this.window.pop();\r\n            }\r\n        }\r\n        this.lastValue = value;\r\n        this.lastValueScale = valueScale;\r\n        this.lastTimestamp = $microSeconds;\r\n        return this.lowPassFilter.applyWithAlpha(value, alpha);\r\n    };\r\n    return RelativeVelocityFilter;\r\n}());\r\nexports.RelativeVelocityFilter = RelativeVelocityFilter;\r\n"},"sourceMaps":{"js":{"version":3,"file":"relative_velocity_filter.js","sourceRoot":"","sources":["../../../src/shared/filters/relative_velocity_filter.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;GAeG;AACH,sDAA0F;AAG1F,qDAAgD;AAEhD;;;;;;GAMG;AACH,OAAO;AACP,uGAAuG;AACvG;IAQE;;;;;OAKG;IACH,gCAA6B,MAA4B;QAA5B,WAAM,GAAN,MAAM,CAAsB;QAbxC,WAAM,GAAoB,EAAE,CAAC;QAC7B,kBAAa,GAAkB,IAAI,+BAAa,CAAC,GAAG,CAAC,CAAC;QAE/D,cAAS,GAAG,CAAC,CAAC;QACd,mBAAc,GAAG,CAAC,CAAC;QACnB,kBAAa,GAAG,CAAC,CAAC,CAAC;IAQiC,CAAC;IAE7D;;;;;;;;;;OAUG;IACH,sCAAK,GAAL,UAAM,KAAa,EAAE,YAAoB,EAAE,UAAkB;QAC3D,IAAI,KAAK,IAAI,IAAI,EAAE;YACjB,OAAO,KAAK,CAAC;SACd;QAED,IAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAC/C,IAAI,IAAI,CAAC,aAAa,IAAI,aAAa,EAAE;YACvC,qEAAqE;YACrE,cAAc;YACd,OAAO,KAAK,CAAC;SACd;QAED,IAAI,KAAK,CAAC;QACV,IAAI,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,EAAE;YAC7B,KAAK,GAAG,CAAC,CAAC;SACX;aAAM;YACL,0DAA0D;YAC1D,wEAAwE;YACxE,sCAAsC;YACtC,IAAM,QAAQ,GACV,KAAK,GAAG,UAAU,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC;YAC9D,IAAM,QAAQ,GAAG,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;YAEpD,IAAI,kBAAkB,GAAG,QAAQ,CAAC;YAClC,IAAI,kBAAkB,GAAG,QAAQ,CAAC;YAElC,yEAAyE;YACzE,wEAAwE;YACxE,sCAAsC;YACtC,IAAM,kBAAkB,GAAG,mCAAuB,GAAG,EAAE,CAAC;YACxD,IAAM,qBAAqB,GACvB,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,kBAAkB,CAAC;YAClD,KAAiB,UAAW,EAAX,KAAA,IAAI,CAAC,MAAM,EAAX,cAAW,EAAX,IAAW,EAAE;gBAAzB,IAAM,EAAE,SAAA;gBACX,IAAI,kBAAkB,GAAG,EAAE,CAAC,QAAQ,GAAG,qBAAqB,EAAE;oBAC5D,4DAA4D;oBAC5D,wDAAwD;oBACxD,MAAM;iBACP;gBACD,kBAAkB,IAAI,EAAE,CAAC,QAAQ,CAAC;gBAClC,kBAAkB,IAAI,EAAE,CAAC,QAAQ,CAAC;aACnC;YAED,IAAM,QAAQ,GACV,kBAAkB,GAAG,CAAC,kBAAkB,GAAG,mCAAuB,CAAC,CAAC;YACxE,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;YACrE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,QAAQ,UAAA,EAAE,QAAQ,UAAA,EAAC,CAAC,CAAC;YAC1C,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;gBAC/C,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;aACnB;SACF;QAED,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QAEnC,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC;IACH,6BAAC;AAAD,CAAC,AApFD,IAoFC;AApFY,wDAAsB","sourcesContent":[null]}},"error":null,"hash":"e2ebae81f1a8c3162930db595a8d8452","cacheData":{"env":{}}}