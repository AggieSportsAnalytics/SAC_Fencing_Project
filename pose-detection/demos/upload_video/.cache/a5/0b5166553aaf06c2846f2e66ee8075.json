{"id":"node_modules/@tensorflow-models/pose-detection/shared/filters/low_pass_filter.js","dependencies":[{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\filters\\low_pass_filter.js.map","includedInParent":true,"mtime":1694704590773},{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\package.json","includedInParent":true,"mtime":1694684692056},{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\.babelrc","includedInParent":true,"mtime":1694684692055}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LowPassFilter = void 0;\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n/**\r\n * A stateful filter that smoothes values overtime.\r\n *\r\n * More specifically, it stores the previous value, and when there's a new\r\n * value, a coefficient 'alpha' is applied to the new value, and `1 - alpha` is\r\n * applied to the previous value. The smaller the alpha is, the smoother result\r\n * and the bigger lag.\r\n */\r\n// ref:\r\n// https://github.com/google/mediapipe/blob/master/mediapipe/util/filtering/low_pass_filter.cc\r\nvar LowPassFilter = /** @class */ (function () {\r\n    function LowPassFilter(alpha) {\r\n        this.alpha = alpha;\r\n        this.initialized = false;\r\n    }\r\n    LowPassFilter.prototype.apply = function (value, threshold) {\r\n        var result;\r\n        if (this.initialized) {\r\n            if (threshold == null) {\r\n                // Regular lowpass filter.\r\n                // result = this.alpha * value + (1 - this.alpha) * this.storedValue;\r\n                result = this.storedValue + this.alpha * (value - this.storedValue);\r\n            }\r\n            else {\r\n                // We need to reformat the formula to be able to conveniently apply\r\n                // another optional non-linear function to the\r\n                // (value - this.storedValue) part.\r\n                // Add additional non-linearity to cap extreme value.\r\n                // More specifically, assume x = (value - this.storedValue), when x is\r\n                // close zero, the derived x is close to x, when x is several magnitudes\r\n                // larger, the drived x grows much slower then x. It behaves like\r\n                // sign(x)log(abs(x)).\r\n                result = this.storedValue +\r\n                    this.alpha * threshold *\r\n                        Math.asinh((value - this.storedValue) / threshold);\r\n            }\r\n        }\r\n        else {\r\n            result = value;\r\n            this.initialized = true;\r\n        }\r\n        this.rawValue = value;\r\n        this.storedValue = result;\r\n        return result;\r\n    };\r\n    LowPassFilter.prototype.applyWithAlpha = function (value, alpha, threshold) {\r\n        this.alpha = alpha;\r\n        return this.apply(value, threshold);\r\n    };\r\n    LowPassFilter.prototype.hasLastRawValue = function () {\r\n        return this.initialized;\r\n    };\r\n    LowPassFilter.prototype.lastRawValue = function () {\r\n        return this.rawValue;\r\n    };\r\n    LowPassFilter.prototype.reset = function () {\r\n        this.initialized = false;\r\n    };\r\n    return LowPassFilter;\r\n}());\r\nexports.LowPassFilter = LowPassFilter;\r\n"},"sourceMaps":{"js":{"version":3,"file":"low_pass_filter.js","sourceRoot":"","sources":["../../../src/shared/filters/low_pass_filter.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;GAeG;AACH;;;;;;;GAOG;AACH,OAAO;AACP,8FAA8F;AAC9F;IAKE,uBAAoB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;QAJzB,gBAAW,GAAG,KAAK,CAAC;IAIQ,CAAC;IAErC,6BAAK,GAAL,UAAM,KAAa,EAAE,SAAkB;QACrC,IAAI,MAAM,CAAC;QACX,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,SAAS,IAAI,IAAI,EAAE;gBACrB,0BAA0B;gBAC1B,qEAAqE;gBACrE,MAAM,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;aACrE;iBAAM;gBACL,mEAAmE;gBACnE,8CAA8C;gBAC9C,mCAAmC;gBACnC,qDAAqD;gBACrD,sEAAsE;gBACtE,wEAAwE;gBACxE,iEAAiE;gBACjE,sBAAsB;gBACtB,MAAM,GAAG,IAAI,CAAC,WAAW;oBACrB,IAAI,CAAC,KAAK,GAAG,SAAS;wBAClB,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC,CAAC;aAC5D;SACF;aAAM;YACL,MAAM,GAAG,KAAK,CAAC;YACf,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SACzB;QACD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;QAE1B,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,sCAAc,GAAd,UAAe,KAAa,EAAE,KAAa,EAAE,SAAkB;QAC7D,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACtC,CAAC;IAED,uCAAe,GAAf;QACE,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,oCAAY,GAAZ;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,6BAAK,GAAL;QACE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC3B,CAAC;IACH,oBAAC;AAAD,CAAC,AArDD,IAqDC;AArDY,sCAAa","sourcesContent":[null]}},"error":null,"hash":"2a13c2d1b0c0d3cf5ed33df36291cd66","cacheData":{"env":{}}}