{"id":"node_modules/@tensorflow/tfjs-backend-webgpu/dist/transform_webgpu.js","dependencies":[{"name":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/package.json","includedInParent":true,"mtime":1699064044040},{"name":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/.babelrc","includedInParent":true,"mtime":1699061165674},{"name":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/@tensorflow/tfjs-backend-webgpu/package.json","includedInParent":true,"mtime":1701484538054},{"name":"./webgpu_program","loc":{"line":17,"column":44},"parent":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/@tensorflow/tfjs-backend-webgpu/dist/transform_webgpu.js","resolved":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/@tensorflow/tfjs-backend-webgpu/dist/webgpu_program.js"},{"name":"./webgpu_util","loc":{"line":18,"column":52},"parent":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/@tensorflow/tfjs-backend-webgpu/dist/transform_webgpu.js","resolved":"/Users/vpenumarti/Desktop/CS/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/@tensorflow/tfjs-backend-webgpu/dist/webgpu_util.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransformProgram = void 0;\n\nvar _webgpu_program = require(\"./webgpu_program\");\n\nvar _webgpu_util = require(\"./webgpu_util\");\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass TransformProgram {\n  constructor(outShape) {\n    this.variableNames = ['Image', 'Transforms'];\n    this.uniforms = 'interpolationModeId : i32, fillModeId : i32, fillValue : f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = outShape;\n    this.dispatchLayout = (0, _webgpu_util.flatDispatchLayout)(this.outputShape);\n    this.dispatch = (0, _webgpu_util.computeDispatch)(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'transform';\n  }\n\n  getUserCode() {\n    const userCode = `\n          fn mapCoord(outCoord : f32, len : f32) -> f32{\n            var inCoord = outCoord;\n            if(uniforms.fillModeId == 2) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  if (inCoord < sz2) {\n                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +\n                    inCoord;\n                  }\n                  if (inCoord < -len) {\n                    inCoord = inCoord + sz2;\n                  } else {\n                    inCoord = -inCoord - 1.0;\n                  }\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));\n                  if (inCoord >= len) {\n                    inCoord = sz2 - inCoord - 1.0;\n                  }\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 3) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 4) {\n              return clamp(outCoord, 0.0, len - 1.0);\n            }\n            return outCoord;\n          }\n          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,\n            channel : i32) -> f32 {\n            var outputValue : f32;\n            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {\n                outputValue = getImage(batch, coordY, coordX, channel);\n            } else {\n              outputValue = uniforms.fillValue;\n            }\n            return outputValue;\n          }\n\n          ${(0, _webgpu_program.getMainHeaderString)('index')} {\n            if (index < uniforms.size) {\n              let coords = getCoordsFromIndex(index);\n              var outputValue : f32;\n              let batch = coords[0];\n              let x = coords[2];\n              let y = coords[1];\n              let channel = coords[3];\n              let xf = f32(x);\n              let yf = f32(y);\n              let a1 = getTransforms(batch, 0);\n              let a2 = getTransforms(batch, 1);\n              let a3 = getTransforms(batch, 2);\n              let b1 = getTransforms(batch, 3);\n              let b2 = getTransforms(batch, 4);\n              let b3 = getTransforms(batch, 5);\n              let c1 = getTransforms(batch, 6);\n              let c2 = getTransforms(batch, 7);\n              let projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = uniforms.fillValue;\n              } else {\n                let inX = (a1 * xf + a2 * yf + a3) / projection;\n                let inY = (b1 * xf + b2 * yf + b3) / projection;\n                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));\n                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));\n\n                if (uniforms.interpolationModeId == 1) {\n                  let coordY = i32(round(mapY));\n                  let coordX = i32(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  let yFloor = floor(mapY);\n                  let xFloor = floor(mapX);\n                  let yCeil = yFloor + 1.0;\n                  let xCeil = xFloor + 1.0;\n                  let valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);\n                  let valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutputAtIndex(index, outputValue);\n            }\n          }\n        `;\n    return userCode;\n  }\n\n}\n\nexports.TransformProgram = TransformProgram;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":21,"column":6},"generated":{"line":28,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":21,"column":13},"generated":{"line":28,"column":6}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":21,"column":6},"generated":{"line":28,"column":22}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":28,"column":23}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":31,"column":2},"generated":{"line":29,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":31,"column":2},"generated":{"line":29,"column":2}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":31,"column":2},"generated":{"line":29,"column":13}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":31,"column":14},"generated":{"line":29,"column":14}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":31,"column":2},"generated":{"line":29,"column":22}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":31,"column":56},"generated":{"line":29,"column":24}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":30,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":30,"column":9}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":30,"column":22}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":22,"column":18},"generated":{"line":30,"column":25}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":22,"column":19},"generated":{"line":30,"column":26}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":22,"column":18},"generated":{"line":30,"column":33}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":22,"column":28},"generated":{"line":30,"column":35}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":22,"column":18},"generated":{"line":30,"column":47}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":30,"column":48}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":31,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":31,"column":9}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":31,"column":17}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":24,"column":13},"generated":{"line":31,"column":20}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":31,"column":83}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":32,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":32,"column":9}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":32,"column":22}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":28,"column":44},"generated":{"line":32,"column":25}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":28,"column":45},"generated":{"line":32,"column":26}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":28,"column":44},"generated":{"line":32,"column":28}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":28,"column":49},"generated":{"line":32,"column":30}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":28,"column":44},"generated":{"line":32,"column":31}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":28,"column":52},"generated":{"line":32,"column":33}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":28,"column":44},"generated":{"line":32,"column":34}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":32,"column":35}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":33,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":33,"column":9}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":33,"column":13}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":29,"column":9},"generated":{"line":33,"column":16}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":33,"column":20}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":34,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":32,"column":9},"generated":{"line":34,"column":9}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":34,"column":20}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":32,"column":23},"generated":{"line":34,"column":23}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":34,"column":31}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":33,"column":4},"generated":{"line":35,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":33,"column":9},"generated":{"line":35,"column":9}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":33,"column":4},"generated":{"line":35,"column":23}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":33,"column":26},"generated":{"line":35,"column":26}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":33,"column":45},"generated":{"line":35,"column":63}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":33,"column":50},"generated":{"line":35,"column":68}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":33,"column":26},"generated":{"line":35,"column":79}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":33,"column":4},"generated":{"line":35,"column":80}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":36,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":34,"column":9},"generated":{"line":36,"column":9}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":36,"column":17}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":34,"column":20},"generated":{"line":36,"column":20}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":35,"column":8},"generated":{"line":36,"column":54}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":35,"column":13},"generated":{"line":36,"column":59}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":34,"column":20},"generated":{"line":36,"column":73}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":35,"column":29},"generated":{"line":36,"column":75}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":35,"column":34},"generated":{"line":36,"column":80}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":34,"column":20},"generated":{"line":36,"column":91}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":35,"column":47},"generated":{"line":36,"column":93}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":35,"column":52},"generated":{"line":36,"column":98}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":34,"column":20},"generated":{"line":36,"column":111}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":36,"column":112}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":36,"column":4},"generated":{"line":37,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":36,"column":9},"generated":{"line":37,"column":9}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":36,"column":4},"generated":{"line":37,"column":18}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":36,"column":21},"generated":{"line":37,"column":21}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":36,"column":4},"generated":{"line":37,"column":32}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":37,"column":3},"generated":{"line":38,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":39,"column":2},"generated":{"line":40,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":39,"column":2},"generated":{"line":40,"column":2}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":39,"column":13},"generated":{"line":40,"column":13}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":39,"column":13},"generated":{"line":40,"column":16}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":40,"column":4},"generated":{"line":41,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":40,"column":10},"generated":{"line":41,"column":10}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":40,"column":18},"generated":{"line":41,"column":18}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":40,"column":21},"generated":{"line":41,"column":21}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":104,"column":12},"generated":{"line":105,"column":12}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":104,"column":17},"generated":{"line":105,"column":53}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":104,"column":12},"generated":{"line":105,"column":60}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":104,"column":25},"generated":{"line":105,"column":61}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":40,"column":4},"generated":{"line":157,"column":9}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":157,"column":4},"generated":{"line":158,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":157,"column":11},"generated":{"line":158,"column":11}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":157,"column":4},"generated":{"line":158,"column":19}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":158,"column":3},"generated":{"line":159,"column":0}},{"source":"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":161,"column":0}}],"sources":{"../../../../../tfjs-backend-webgpu/src/transform_webgpu.ts":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class TransformProgram implements WebGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  uniforms = 'interpolationModeId : i32, fillModeId : i32, fillValue : f32,';\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'transform';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n          fn mapCoord(outCoord : f32, len : f32) -> f32{\n            var inCoord = outCoord;\n            if(uniforms.fillModeId == 2) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  if (inCoord < sz2) {\n                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +\n                    inCoord;\n                  }\n                  if (inCoord < -len) {\n                    inCoord = inCoord + sz2;\n                  } else {\n                    inCoord = -inCoord - 1.0;\n                  }\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));\n                  if (inCoord >= len) {\n                    inCoord = sz2 - inCoord - 1.0;\n                  }\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 3) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 4) {\n              return clamp(outCoord, 0.0, len - 1.0);\n            }\n            return outCoord;\n          }\n          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,\n            channel : i32) -> f32 {\n            var outputValue : f32;\n            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {\n                outputValue = getImage(batch, coordY, coordX, channel);\n            } else {\n              outputValue = uniforms.fillValue;\n            }\n            return outputValue;\n          }\n\n          ${main('index')} {\n            if (index < uniforms.size) {\n              let coords = getCoordsFromIndex(index);\n              var outputValue : f32;\n              let batch = coords[0];\n              let x = coords[2];\n              let y = coords[1];\n              let channel = coords[3];\n              let xf = f32(x);\n              let yf = f32(y);\n              let a1 = getTransforms(batch, 0);\n              let a2 = getTransforms(batch, 1);\n              let a3 = getTransforms(batch, 2);\n              let b1 = getTransforms(batch, 3);\n              let b2 = getTransforms(batch, 4);\n              let b3 = getTransforms(batch, 5);\n              let c1 = getTransforms(batch, 6);\n              let c2 = getTransforms(batch, 7);\n              let projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = uniforms.fillValue;\n              } else {\n                let inX = (a1 * xf + a2 * yf + a3) / projection;\n                let inY = (b1 * xf + b2 * yf + b3) / projection;\n                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));\n                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));\n\n                if (uniforms.interpolationModeId == 1) {\n                  let coordY = i32(round(mapY));\n                  let coordX = i32(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  let yFloor = floor(mapY);\n                  let xFloor = floor(mapX);\n                  let yCeil = yFloor + 1.0;\n                  let xCeil = xFloor + 1.0;\n                  let valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);\n                  let valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutputAtIndex(index, outputValue);\n            }\n          }\n        `;\n    return userCode;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"1a9cebc6fbb7f9dc5054bf6cb1a9412b","cacheData":{"env":{}}}