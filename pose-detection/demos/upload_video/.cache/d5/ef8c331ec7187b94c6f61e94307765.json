{"id":"node_modules/@tensorflow-models/pose-detection/shared/calculators/image_utils.js","dependencies":[{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\image_utils.js.map","includedInParent":true,"mtime":1694704590566},{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\package.json","includedInParent":true,"mtime":1694684692056},{"name":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\.babelrc","includedInParent":true,"mtime":1694684692055},{"name":"@tensorflow/tfjs-core","loc":{"line":20,"column":17},"parent":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\image_utils.js","resolved":"C:\\Users\\Lenovo\\Documents\\SAC Fencing CV\\tfjs-models\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getProjectiveTransformMatrix = exports.getRoi = exports.padRoi = exports.toImageTensor = exports.transformValueRange = exports.normalizeRadians = exports.getImageSize = void 0;\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\nfunction getImageSize(input) {\r\n    if (input instanceof tf.Tensor) {\r\n        return { height: input.shape[0], width: input.shape[1] };\r\n    }\r\n    else {\r\n        return { height: input.height, width: input.width };\r\n    }\r\n}\r\nexports.getImageSize = getImageSize;\r\n/**\r\n * Normalizes the provided angle to the range -pi to pi.\r\n * @param angle The angle in radians to be normalized.\r\n */\r\nfunction normalizeRadians(angle) {\r\n    return angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));\r\n}\r\nexports.normalizeRadians = normalizeRadians;\r\n/**\r\n * Transform value ranges.\r\n * @param fromMin Min of original value range.\r\n * @param fromMax Max of original value range.\r\n * @param toMin New min of transformed value range.\r\n * @param toMax New max of transformed value range.\r\n */\r\nfunction transformValueRange(fromMin, fromMax, toMin, toMax) {\r\n    var fromRange = fromMax - fromMin;\r\n    var toRange = toMax - toMin;\r\n    if (fromRange === 0) {\r\n        throw new Error(\"Original min and max are both \".concat(fromMin, \", range cannot be 0.\"));\r\n    }\r\n    var scale = toRange / fromRange;\r\n    var offset = toMin - fromMin * scale;\r\n    return { scale: scale, offset: offset };\r\n}\r\nexports.transformValueRange = transformValueRange;\r\n/**\r\n * Convert an image to an image tensor representation.\r\n *\r\n * The image tensor has a shape [1, height, width, colorChannel].\r\n *\r\n * @param input An image, video frame, or image tensor.\r\n */\r\nfunction toImageTensor(input) {\r\n    return input instanceof tf.Tensor ? input : tf.browser.fromPixels(input);\r\n}\r\nexports.toImageTensor = toImageTensor;\r\n/**\r\n * Padding ratio of left, top, right, bottom, based on the output dimensions.\r\n *\r\n * The padding values are non-zero only when the \"keep_aspect_ratio\" is true.\r\n *\r\n * For instance, when the input image is 10x10 (width x height) and the\r\n * output dimensions is 20x40 and \"keep_aspect_ratio\" is true, we should scale\r\n * the input image to 20x20 and places it in the middle of the output image with\r\n * an equal padding of 10 pixels at the top and the bottom. The result is\r\n * therefore {left: 0, top: 0.25, right: 0, bottom: 0.25} (10/40 = 0.25f).\r\n * @param roi The original rectangle to pad.\r\n * @param targetSize The target width and height of the result rectangle.\r\n * @param keepAspectRatio Whether keep aspect ratio. Default to false.\r\n */\r\nfunction padRoi(roi, targetSize, keepAspectRatio) {\r\n    if (keepAspectRatio === void 0) { keepAspectRatio = false; }\r\n    if (!keepAspectRatio) {\r\n        return { top: 0, left: 0, right: 0, bottom: 0 };\r\n    }\r\n    var targetH = targetSize.height;\r\n    var targetW = targetSize.width;\r\n    validateSize(targetSize, 'targetSize');\r\n    validateSize(roi, 'roi');\r\n    var tensorAspectRatio = targetH / targetW;\r\n    var roiAspectRatio = roi.height / roi.width;\r\n    var newWidth;\r\n    var newHeight;\r\n    var horizontalPadding = 0;\r\n    var verticalPadding = 0;\r\n    if (tensorAspectRatio > roiAspectRatio) {\r\n        // pad height;\r\n        newWidth = roi.width;\r\n        newHeight = roi.width * tensorAspectRatio;\r\n        verticalPadding = (1 - roiAspectRatio / tensorAspectRatio) / 2;\r\n    }\r\n    else {\r\n        // pad width.\r\n        newWidth = roi.height / tensorAspectRatio;\r\n        newHeight = roi.height;\r\n        horizontalPadding = (1 - tensorAspectRatio / roiAspectRatio) / 2;\r\n    }\r\n    roi.width = newWidth;\r\n    roi.height = newHeight;\r\n    return {\r\n        top: verticalPadding,\r\n        left: horizontalPadding,\r\n        right: horizontalPadding,\r\n        bottom: verticalPadding\r\n    };\r\n}\r\nexports.padRoi = padRoi;\r\n/**\r\n * Get the rectangle information of an image, including xCenter, yCenter, width,\r\n * height and rotation.\r\n *\r\n * @param imageSize imageSize is used to calculate the rectangle.\r\n * @param normRect Optional. If normRect is not null, it will be used to get\r\n *     a subarea rectangle information in the image. `imageSize` is used to\r\n *     calculate the actual non-normalized coordinates.\r\n */\r\nfunction getRoi(imageSize, normRect) {\r\n    if (normRect) {\r\n        return {\r\n            xCenter: normRect.xCenter * imageSize.width,\r\n            yCenter: normRect.yCenter * imageSize.height,\r\n            width: normRect.width * imageSize.width,\r\n            height: normRect.height * imageSize.height,\r\n            rotation: normRect.rotation\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            xCenter: 0.5 * imageSize.width,\r\n            yCenter: 0.5 * imageSize.height,\r\n            width: imageSize.width,\r\n            height: imageSize.height,\r\n            rotation: 0\r\n        };\r\n    }\r\n}\r\nexports.getRoi = getRoi;\r\n/**\r\n * Generate the projective transformation matrix to be used for `tf.transform`.\r\n *\r\n * See more documentation in `tf.transform`.\r\n *\r\n * @param matrix The transformation matrix mapping subRect to rect, can be\r\n *     computed using `getRotatedSubRectToRectTransformMatrix` calculator.\r\n * @param imageSize The original image height and width.\r\n * @param inputResolution The target height and width.\r\n */\r\nfunction getProjectiveTransformMatrix(matrix, imageSize, inputResolution) {\r\n    validateSize(inputResolution, 'inputResolution');\r\n    // To use M with regular x, y coordinates, we need to normalize them first.\r\n    // Because x' = a0 * x + a1 * y + a2, y' = b0 * x + b1 * y + b2,\r\n    // we need to use factor (1/inputResolution.width) to normalize x for a0 and\r\n    // b0, similarly we need to use factor (1/inputResolution.height) to normalize\r\n    // y for a1 and b1.\r\n    // Also at the end, we need to de-normalize x' and y' to regular coordinates.\r\n    // So we need to use factor imageSize.width for a0, a1 and a2, similarly\r\n    // we need to use factor imageSize.height for b0, b1 and b2.\r\n    var a0 = (1 / inputResolution.width) * matrix[0][0] * imageSize.width;\r\n    var a1 = (1 / inputResolution.height) * matrix[0][1] * imageSize.width;\r\n    var a2 = matrix[0][3] * imageSize.width;\r\n    var b0 = (1 / inputResolution.width) * matrix[1][0] * imageSize.height;\r\n    var b1 = (1 / inputResolution.height) * matrix[1][1] * imageSize.height;\r\n    var b2 = matrix[1][3] * imageSize.height;\r\n    return [a0, a1, a2, b0, b1, b2, 0, 0];\r\n}\r\nexports.getProjectiveTransformMatrix = getProjectiveTransformMatrix;\r\nfunction validateSize(size, name) {\r\n    tf.util.assert(size.width !== 0, function () { return \"\".concat(name, \" width cannot be 0.\"); });\r\n    tf.util.assert(size.height !== 0, function () { return \"\".concat(name, \" height cannot be 0.\"); });\r\n}\r\n"},"sourceMaps":{"js":{"version":3,"file":"image_utils.js","sourceRoot":"","sources":["../../../src/shared/calculators/image_utils.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"511940af6807d6d9e365af2b952e215a","cacheData":{"env":{}}}