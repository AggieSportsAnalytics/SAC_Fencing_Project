{"id":"node_modules/nanomorph/index.js","dependencies":[{"name":"/Users/vpenumarti/Desktop/CS/Aggie_Sports_Analytics/SAC_Fencing_Project/pose-detection/demos/upload_video/package.json","includedInParent":true,"mtime":1707533731251},{"name":"/Users/vpenumarti/Desktop/CS/Aggie_Sports_Analytics/SAC_Fencing_Project/pose-detection/demos/upload_video/.babelrc","includedInParent":true,"mtime":1701727604305},{"name":"/Users/vpenumarti/Desktop/CS/Aggie_Sports_Analytics/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/nanomorph/package.json","includedInParent":true,"mtime":1707533896595},{"name":"nanoassert","loc":{"line":1,"column":21,"index":21},"parent":"/Users/vpenumarti/Desktop/CS/Aggie_Sports_Analytics/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/nanomorph/index.js","resolved":"/Users/vpenumarti/Desktop/CS/Aggie_Sports_Analytics/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/nanoassert/index.js"},{"name":"./lib/morph","loc":{"line":2,"column":20,"index":55},"parent":"/Users/vpenumarti/Desktop/CS/Aggie_Sports_Analytics/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/nanomorph/index.js","resolved":"/Users/vpenumarti/Desktop/CS/Aggie_Sports_Analytics/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/nanomorph/lib/morph.js"}],"generated":{"js":"var assert = require('nanoassert')\nvar morph = require('./lib/morph')\n\nvar TEXT_NODE = 3\n// var DEBUG = false\n\nmodule.exports = nanomorph\n\n// Morph one tree into another tree\n//\n// no parent\n//   -> same: diff and walk children\n//   -> not same: replace and return\n// old node doesn't exist\n//   -> insert new node\n// new node doesn't exist\n//   -> delete old node\n// nodes are not the same\n//   -> diff nodes and apply patch to old node\n// nodes are the same\n//   -> walk all child nodes and append to old node\nfunction nanomorph (oldTree, newTree, options) {\n  // if (DEBUG) {\n  //   console.log(\n  //   'nanomorph\\nold\\n  %s\\nnew\\n  %s',\n  //   oldTree && oldTree.outerHTML,\n  //   newTree && newTree.outerHTML\n  // )\n  // }\n  assert.equal(typeof oldTree, 'object', 'nanomorph: oldTree should be an object')\n  assert.equal(typeof newTree, 'object', 'nanomorph: newTree should be an object')\n\n  if (options && options.childrenOnly) {\n    updateChildren(newTree, oldTree)\n    return oldTree\n  }\n\n  assert.notEqual(\n    newTree.nodeType,\n    11,\n    'nanomorph: newTree should have one root node (which is not a DocumentFragment)'\n  )\n\n  return walk(newTree, oldTree)\n}\n\n// Walk and morph a dom tree\nfunction walk (newNode, oldNode) {\n  // if (DEBUG) {\n  //   console.log(\n  //   'walk\\nold\\n  %s\\nnew\\n  %s',\n  //   oldNode && oldNode.outerHTML,\n  //   newNode && newNode.outerHTML\n  // )\n  // }\n  if (!oldNode) {\n    return newNode\n  } else if (!newNode) {\n    return null\n  } else if (newNode.isSameNode && newNode.isSameNode(oldNode)) {\n    return oldNode\n  } else if (newNode.tagName !== oldNode.tagName || getComponentId(newNode) !== getComponentId(oldNode)) {\n    return newNode\n  } else {\n    morph(newNode, oldNode)\n    updateChildren(newNode, oldNode)\n    return oldNode\n  }\n}\n\nfunction getComponentId (node) {\n  return node.dataset ? node.dataset.nanomorphComponentId : undefined\n}\n\n// Update the children of elements\n// (obj, obj) -> null\nfunction updateChildren (newNode, oldNode) {\n  // if (DEBUG) {\n  //   console.log(\n  //   'updateChildren\\nold\\n  %s\\nnew\\n  %s',\n  //   oldNode && oldNode.outerHTML,\n  //   newNode && newNode.outerHTML\n  // )\n  // }\n  var oldChild, newChild, morphed, oldMatch\n\n  // The offset is only ever increased, and used for [i - offset] in the loop\n  var offset = 0\n\n  for (var i = 0; ; i++) {\n    oldChild = oldNode.childNodes[i]\n    newChild = newNode.childNodes[i - offset]\n    // if (DEBUG) {\n    //   console.log(\n    //   '===\\n- old\\n  %s\\n- new\\n  %s',\n    //   oldChild && oldChild.outerHTML,\n    //   newChild && newChild.outerHTML\n    // )\n    // }\n    // Both nodes are empty, do nothing\n    if (!oldChild && !newChild) {\n      break\n\n    // There is no new child, remove old\n    } else if (!newChild) {\n      oldNode.removeChild(oldChild)\n      i--\n\n    // There is no old child, add new\n    } else if (!oldChild) {\n      oldNode.appendChild(newChild)\n      offset++\n\n    // Both nodes are the same, morph\n    } else if (same(newChild, oldChild)) {\n      morphed = walk(newChild, oldChild)\n      if (morphed !== oldChild) {\n        oldNode.replaceChild(morphed, oldChild)\n        offset++\n      }\n\n    // Both nodes do not share an ID or a placeholder, try reorder\n    } else {\n      oldMatch = null\n\n      // Try and find a similar node somewhere in the tree\n      for (var j = i; j < oldNode.childNodes.length; j++) {\n        if (same(oldNode.childNodes[j], newChild)) {\n          oldMatch = oldNode.childNodes[j]\n          break\n        }\n      }\n\n      // If there was a node with the same ID or placeholder in the old list\n      if (oldMatch) {\n        morphed = walk(newChild, oldMatch)\n        if (morphed !== oldMatch) offset++\n        oldNode.insertBefore(morphed, oldChild)\n\n      // It's safe to morph two nodes in-place if neither has an ID\n      } else if (!newChild.id && !oldChild.id) {\n        morphed = walk(newChild, oldChild)\n        if (morphed !== oldChild) {\n          oldNode.replaceChild(morphed, oldChild)\n          offset++\n        }\n\n      // Insert the node at the index if we couldn't morph or find a matching node\n      } else {\n        oldNode.insertBefore(newChild, oldChild)\n        offset++\n      }\n    }\n  }\n}\n\nfunction same (a, b) {\n  if (a.id) return a.id === b.id\n  if (a.isSameNode) return a.isSameNode(b)\n  if (a.tagName !== b.tagName) return false\n  if (a.type === TEXT_NODE) return a.nodeValue === b.nodeValue\n  return false\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/nanomorph/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/nanomorph/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}}],"sources":{"node_modules/nanomorph/index.js":"var assert = require('nanoassert')\nvar morph = require('./lib/morph')\n\nvar TEXT_NODE = 3\n// var DEBUG = false\n\nmodule.exports = nanomorph\n\n// Morph one tree into another tree\n//\n// no parent\n//   -> same: diff and walk children\n//   -> not same: replace and return\n// old node doesn't exist\n//   -> insert new node\n// new node doesn't exist\n//   -> delete old node\n// nodes are not the same\n//   -> diff nodes and apply patch to old node\n// nodes are the same\n//   -> walk all child nodes and append to old node\nfunction nanomorph (oldTree, newTree, options) {\n  // if (DEBUG) {\n  //   console.log(\n  //   'nanomorph\\nold\\n  %s\\nnew\\n  %s',\n  //   oldTree && oldTree.outerHTML,\n  //   newTree && newTree.outerHTML\n  // )\n  // }\n  assert.equal(typeof oldTree, 'object', 'nanomorph: oldTree should be an object')\n  assert.equal(typeof newTree, 'object', 'nanomorph: newTree should be an object')\n\n  if (options && options.childrenOnly) {\n    updateChildren(newTree, oldTree)\n    return oldTree\n  }\n\n  assert.notEqual(\n    newTree.nodeType,\n    11,\n    'nanomorph: newTree should have one root node (which is not a DocumentFragment)'\n  )\n\n  return walk(newTree, oldTree)\n}\n\n// Walk and morph a dom tree\nfunction walk (newNode, oldNode) {\n  // if (DEBUG) {\n  //   console.log(\n  //   'walk\\nold\\n  %s\\nnew\\n  %s',\n  //   oldNode && oldNode.outerHTML,\n  //   newNode && newNode.outerHTML\n  // )\n  // }\n  if (!oldNode) {\n    return newNode\n  } else if (!newNode) {\n    return null\n  } else if (newNode.isSameNode && newNode.isSameNode(oldNode)) {\n    return oldNode\n  } else if (newNode.tagName !== oldNode.tagName || getComponentId(newNode) !== getComponentId(oldNode)) {\n    return newNode\n  } else {\n    morph(newNode, oldNode)\n    updateChildren(newNode, oldNode)\n    return oldNode\n  }\n}\n\nfunction getComponentId (node) {\n  return node.dataset ? node.dataset.nanomorphComponentId : undefined\n}\n\n// Update the children of elements\n// (obj, obj) -> null\nfunction updateChildren (newNode, oldNode) {\n  // if (DEBUG) {\n  //   console.log(\n  //   'updateChildren\\nold\\n  %s\\nnew\\n  %s',\n  //   oldNode && oldNode.outerHTML,\n  //   newNode && newNode.outerHTML\n  // )\n  // }\n  var oldChild, newChild, morphed, oldMatch\n\n  // The offset is only ever increased, and used for [i - offset] in the loop\n  var offset = 0\n\n  for (var i = 0; ; i++) {\n    oldChild = oldNode.childNodes[i]\n    newChild = newNode.childNodes[i - offset]\n    // if (DEBUG) {\n    //   console.log(\n    //   '===\\n- old\\n  %s\\n- new\\n  %s',\n    //   oldChild && oldChild.outerHTML,\n    //   newChild && newChild.outerHTML\n    // )\n    // }\n    // Both nodes are empty, do nothing\n    if (!oldChild && !newChild) {\n      break\n\n    // There is no new child, remove old\n    } else if (!newChild) {\n      oldNode.removeChild(oldChild)\n      i--\n\n    // There is no old child, add new\n    } else if (!oldChild) {\n      oldNode.appendChild(newChild)\n      offset++\n\n    // Both nodes are the same, morph\n    } else if (same(newChild, oldChild)) {\n      morphed = walk(newChild, oldChild)\n      if (morphed !== oldChild) {\n        oldNode.replaceChild(morphed, oldChild)\n        offset++\n      }\n\n    // Both nodes do not share an ID or a placeholder, try reorder\n    } else {\n      oldMatch = null\n\n      // Try and find a similar node somewhere in the tree\n      for (var j = i; j < oldNode.childNodes.length; j++) {\n        if (same(oldNode.childNodes[j], newChild)) {\n          oldMatch = oldNode.childNodes[j]\n          break\n        }\n      }\n\n      // If there was a node with the same ID or placeholder in the old list\n      if (oldMatch) {\n        morphed = walk(newChild, oldMatch)\n        if (morphed !== oldMatch) offset++\n        oldNode.insertBefore(morphed, oldChild)\n\n      // It's safe to morph two nodes in-place if neither has an ID\n      } else if (!newChild.id && !oldChild.id) {\n        morphed = walk(newChild, oldChild)\n        if (morphed !== oldChild) {\n          oldNode.replaceChild(morphed, oldChild)\n          offset++\n        }\n\n      // Insert the node at the index if we couldn't morph or find a matching node\n      } else {\n        oldNode.insertBefore(newChild, oldChild)\n        offset++\n      }\n    }\n  }\n}\n\nfunction same (a, b) {\n  if (a.id) return a.id === b.id\n  if (a.isSameNode) return a.isSameNode(b)\n  if (a.tagName !== b.tagName) return false\n  if (a.type === TEXT_NODE) return a.nodeValue === b.nodeValue\n  return false\n}\n"},"lineCount":164}},"error":null,"hash":"769efe697074b496b178b04b80cf6888","cacheData":{"env":{}}}