{"id":"node_modules/@tensorflow-models/pose-detection/shared/calculators/tensors_to_segmentation.js","dependencies":[{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\tensors_to_segmentation.js.map","includedInParent":true,"mtime":1705282595694},{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\package.json","includedInParent":true,"mtime":1707452023465},{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\.babelrc","includedInParent":true,"mtime":1699931790989},{"name":"@tensorflow/tfjs-core","loc":{"line":20,"column":17},"parent":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\tensors_to_segmentation.js","resolved":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.tensorsToSegmentation = void 0;\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nvar tf = require(\"@tensorflow/tfjs-core\");\r\n/**\r\n * Converts a tensor from a segmentation model to an image mask.\r\n * @param segmentationTensor Output from segmentation model of shape (1, height,\r\n *     width, channels).\r\n * @param config Contains activation to apply.\r\n * @param outputSize Desired dimensions of output image mask.\r\n *\r\n * @returns Image mask.\r\n */\r\nfunction tensorsToSegmentation(segmentationTensor, config, outputSize) {\r\n    return tf.tidy(function () {\r\n        // Remove batch dimension.\r\n        var $segmentationTensor = \r\n        // tslint:disable-next-line: no-unnecessary-type-assertion\r\n        tf.squeeze(segmentationTensor, [0]);\r\n        var tensorChannels = $segmentationTensor.shape[2];\r\n        // Process mask tensor and apply activation function.\r\n        if (tensorChannels === 1) {\r\n            // Create initial working mask.\r\n            var smallMaskMat = $segmentationTensor;\r\n            switch (config.activation) {\r\n                case 'none':\r\n                    break;\r\n                case 'sigmoid':\r\n                    smallMaskMat = tf.sigmoid(smallMaskMat);\r\n                    break;\r\n                case 'softmax':\r\n                    throw new Error('Softmax activation requires two channels.');\r\n                default:\r\n                    throw new Error(\"Activation not supported (\".concat(config.activation, \")\"));\r\n            }\r\n            var outputMat = outputSize ?\r\n                tf.image.resizeBilinear(smallMaskMat, [outputSize.height, outputSize.width]) :\r\n                smallMaskMat;\r\n            // Remove channel dimension.\r\n            return tf.squeeze(outputMat, [2]);\r\n        }\r\n        else {\r\n            throw new Error(\"Unsupported number of tensor channels \".concat(tensorChannels));\r\n        }\r\n    });\r\n}\r\nexports.tensorsToSegmentation = tensorsToSegmentation;\r\n"},"sourceMaps":{"js":{"version":3,"file":"tensors_to_segmentation.js","sourceRoot":"","sources":["../../../src/shared/calculators/tensors_to_segmentation.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;GAeG;AACH,0CAA4C;AAK5C;;;;;;;;GAQG;AACH,SAAgB,qBAAqB,CACjC,kBAA+B,EAAE,MAAmC,EACpE,UAAsB;IACxB,OAAO,EAAE,CAAC,IAAI,CAAC;QACb,0BAA0B;QAC1B,IAAM,mBAAmB;QACrB,0DAA0D;QAC1D,EAAE,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,CAAgB,CAAC;QAEvD,IAAM,cAAc,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACpD,qDAAqD;QACrD,IAAI,cAAc,KAAK,CAAC,EAAE;YACxB,+BAA+B;YAC/B,IAAI,YAAY,GAAG,mBAAmB,CAAC;YACvC,QAAQ,MAAM,CAAC,UAAU,EAAE;gBACzB,KAAK,MAAM;oBACT,MAAM;gBACR,KAAK,SAAS;oBACZ,YAAY,GAAG,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;oBACxC,MAAM;gBACR,KAAK,SAAS;oBACZ,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;gBAC/D;oBACE,MAAM,IAAI,KAAK,CAAC,oCAA6B,MAAM,CAAC,UAAU,MAAG,CAAC,CAAC;aACtE;YAED,IAAM,SAAS,GAAG,UAAU,CAAC,CAAC;gBAC1B,EAAE,CAAC,KAAK,CAAC,cAAc,CACnB,YAAY,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC1D,YAAY,CAAC;YAEjB,4BAA4B;YAC5B,OAAO,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;SACnC;aAAM;YACL,MAAM,IAAI,KAAK,CACX,gDAAyC,cAAc,CAAE,CAAC,CAAC;SAChE;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAtCD,sDAsCC","sourcesContent":[null]}},"error":null,"hash":"c588b51f3310f4dc91f338dfb8c7ad7f","cacheData":{"env":{}}}