{"id":"node_modules/nanocomponent/node_modules/nanoassert/index.js","dependencies":[{"name":"/Users/vpenumarti/Desktop/CS/Aggie_Sports_Analytics/SAC_Fencing_Project/pose-detection/demos/upload_video/package.json","includedInParent":true,"mtime":1707533731251},{"name":"/Users/vpenumarti/Desktop/CS/Aggie_Sports_Analytics/SAC_Fencing_Project/pose-detection/demos/upload_video/.babelrc","includedInParent":true,"mtime":1701727604305},{"name":"/Users/vpenumarti/Desktop/CS/Aggie_Sports_Analytics/SAC_Fencing_Project/pose-detection/demos/upload_video/node_modules/nanocomponent/node_modules/nanoassert/package.json","includedInParent":true,"mtime":1707533896814}],"generated":{"js":"module.exports = assert\n\nclass AssertionError extends Error {}\nAssertionError.prototype.name = 'AssertionError'\n\n/**\n * Minimal assert function\n * @param  {any} t Value to check if falsy\n * @param  {string=} m Optional assertion error message\n * @throws {AssertionError}\n */\nfunction assert (t, m) {\n  if (!t) {\n    var err = new AssertionError(m)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, assert)\n    throw err\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/nanocomponent/node_modules/nanoassert/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}}],"sources":{"node_modules/nanocomponent/node_modules/nanoassert/index.js":"module.exports = assert\n\nclass AssertionError extends Error {}\nAssertionError.prototype.name = 'AssertionError'\n\n/**\n * Minimal assert function\n * @param  {any} t Value to check if falsy\n * @param  {string=} m Optional assertion error message\n * @throws {AssertionError}\n */\nfunction assert (t, m) {\n  if (!t) {\n    var err = new AssertionError(m)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, assert)\n    throw err\n  }\n}\n"},"lineCount":19}},"error":null,"hash":"16f3186f770e0b3038cfea8c4fa5c52c","cacheData":{"env":{}}}