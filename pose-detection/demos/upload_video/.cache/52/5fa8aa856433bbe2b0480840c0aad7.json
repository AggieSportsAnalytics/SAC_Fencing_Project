{"id":"node_modules/@tensorflow/tfjs-core/dist/ops/lower_bound.js","dependencies":[{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\package.json","includedInParent":true,"mtime":1702881059798},{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\.babelrc","includedInParent":true,"mtime":1699931790989},{"name":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\package.json","includedInParent":true,"mtime":1703654060392},{"name":"./search_sorted","loc":{"line":17,"column":29,"index":748},"parent":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\lower_bound.js","resolved":"C:\\Users\\Lenovo\\Documents\\ASA_Fencing_Project\\pose-detection\\demos\\upload_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\search_sorted.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lowerBound = lowerBound;\nvar _search_sorted = require(\"./search_sorted\");\n/**\r\n * @license\r\n * Copyright 2022 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n\n/**\r\n * Searches for where a value would go in a sorted sequence.\r\n *\r\n * This is not a method for checking containment (like javascript in).\r\n *\r\n * The typical use case for this operation is \"binning\", \"bucketing\", or\r\n * \"discretizing\". The values are assigned to bucket-indices based on the edges\r\n * listed in 'sortedSequence'. This operation returns the bucket-index for each\r\n * value.\r\n *\r\n * The index returned corresponds to the first edge greater than or equal to the\r\n * value.\r\n *\r\n * The axis is not settable for this operation. It always operates on the\r\n * innermost dimension (axis=-1). The operation will accept any number of outer\r\n * dimensions.\r\n *\r\n * Note: This operation assumes that 'lowerBound' is sorted along the\r\n * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not\r\n * sorted no error is raised and the content of the returned tensor is not well\r\n * defined.\r\n *\r\n * ```js\r\n * const edges = tf.tensor1d([-1, 3.3, 9.1, 10.0]);\r\n * let values = tf.tensor1d([0.0, 4.1, 12.0]);\r\n * const result1 = tf.lowerBound(edges, values);\r\n * result1.print(); // [1, 2, 4]\r\n *\r\n * const seq = tf.tensor1d([0, 3, 9, 10, 10]);\r\n * values = tf.tensor1d([0, 4, 10]);\r\n * const result2 = tf.lowerBound(seq, values);\r\n * result2.print(); // [0, 2, 3]\r\n *\r\n * const sortedSequence = tf.tensor2d([[0., 3., 8., 9., 10.],\r\n *                                     [1., 2., 3., 4., 5.]]);\r\n * values = tf.tensor2d([[9.8, 2.1, 4.3],\r\n *                       [0.1, 6.6, 4.5, ]]);\r\n * const result3 = tf.lowerBound(sortedSequence, values);\r\n * result3.print(); // [[4, 1, 2], [0, 5, 4]]\r\n * ```\r\n * @param sortedSequence: N-D. Sorted sequence.\r\n * @param values: N-D. Search values.\r\n * @return An N-D int32 tensor the size of values containing the result of\r\n *     applying lower bound to each value. The result is not a global index to\r\n *     the entire Tensor, but the index in the last dimension.\r\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\r\n */\nfunction lowerBound(sortedSequence, values) {\n  return (0, _search_sorted.searchSorted)(sortedSequence, values, 'left');\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":7,"column":4}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":7,"column":18}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":7,"column":21}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":7,"column":28}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":69,"column":6},"generated":{"line":72,"column":0}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":69,"column":16},"generated":{"line":72,"column":9}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":69,"column":26},"generated":{"line":72,"column":19}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":70,"column":4},"generated":{"line":72,"column":20}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":70,"column":37},"generated":{"line":72,"column":34}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":70,"column":39},"generated":{"line":72,"column":36}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":70,"column":64},"generated":{"line":72,"column":42}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":70,"column":64},"generated":{"line":72,"column":44}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":71,"column":2},"generated":{"line":73,"column":2}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":71,"column":9},"generated":{"line":73,"column":9}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":71,"column":9},"generated":{"line":73,"column":13}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":71,"column":21},"generated":{"line":73,"column":40}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":71,"column":22},"generated":{"line":73,"column":42}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":71,"column":36},"generated":{"line":73,"column":56}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":71,"column":38},"generated":{"line":73,"column":58}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":71,"column":44},"generated":{"line":73,"column":64}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":71,"column":46},"generated":{"line":73,"column":66}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":71,"column":52},"generated":{"line":73,"column":72}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":71,"column":53},"generated":{"line":73,"column":73}},{"source":"../../../../../../tfjs-core/src/ops/lower_bound.ts","name":null,"original":{"line":72,"column":0},"generated":{"line":74,"column":0}}],"sources":{"../../../../../../tfjs-core/src/ops/lower_bound.ts":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {TensorLike} from '../types';\nimport {searchSorted} from './search_sorted';\n\n/**\n * Searches for where a value would go in a sorted sequence.\n *\n * This is not a method for checking containment (like javascript in).\n *\n * The typical use case for this operation is \"binning\", \"bucketing\", or\n * \"discretizing\". The values are assigned to bucket-indices based on the edges\n * listed in 'sortedSequence'. This operation returns the bucket-index for each\n * value.\n *\n * The index returned corresponds to the first edge greater than or equal to the\n * value.\n *\n * The axis is not settable for this operation. It always operates on the\n * innermost dimension (axis=-1). The operation will accept any number of outer\n * dimensions.\n *\n * Note: This operation assumes that 'lowerBound' is sorted along the\n * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not\n * sorted no error is raised and the content of the returned tensor is not well\n * defined.\n *\n * ```js\n * const edges = tf.tensor1d([-1, 3.3, 9.1, 10.0]);\n * let values = tf.tensor1d([0.0, 4.1, 12.0]);\n * const result1 = tf.lowerBound(edges, values);\n * result1.print(); // [1, 2, 4]\n *\n * const seq = tf.tensor1d([0, 3, 9, 10, 10]);\n * values = tf.tensor1d([0, 4, 10]);\n * const result2 = tf.lowerBound(seq, values);\n * result2.print(); // [0, 2, 3]\n *\n * const sortedSequence = tf.tensor2d([[0., 3., 8., 9., 10.],\n *                                     [1., 2., 3., 4., 5.]]);\n * values = tf.tensor2d([[9.8, 2.1, 4.3],\n *                       [0.1, 6.6, 4.5, ]]);\n * const result3 = tf.lowerBound(sortedSequence, values);\n * result3.print(); // [[4, 1, 2], [0, 5, 4]]\n * ```\n * @param sortedSequence: N-D. Sorted sequence.\n * @param values: N-D. Search values.\n * @return An N-D int32 tensor the size of values containing the result of\n *     applying lower bound to each value. The result is not a global index to\n *     the entire Tensor, but the index in the last dimension.\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nexport function lowerBound(\n    sortedSequence: Tensor|TensorLike, values: Tensor|TensorLike): Tensor {\n  return searchSorted(sortedSequence, values, 'left');\n}\n"},"lineCount":null}},"error":null,"hash":"5d96d78496e26131875e9c4ef65e367a","cacheData":{"env":{}}}