/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import { env } from '@tensorflow/tfjs-core';
const ENV = env();
/** The batched dispatching calls size in the device queue. */
ENV.registerFlag('WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE', () => 15);
/**
 * Whether we forward execution to the CPU backend if tensors are small and
 * reside on the CPU.
 */
ENV.registerFlag('WEBGPU_CPU_FORWARD', () => true);
/**
 * This flag is used to test different types of matmul programs.
 *
 * See MatMulProgramType in webgpu_util.ts for a list of available values.
 */
ENV.registerFlag('WEBGPU_MATMUL_PROGRAM_TYPE', () => -1);
/**
 * Whether to use conv2dTranspose_naive which directly implement the
 * conv2dTranspose logic rather than using a matmul to simulate.
 */
ENV.registerFlag('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE', () => true);
/**
 * Whether we use low power GPU. Otherwise, a high performance GPU will be
 * requested.
 */
ENV.registerFlag('WEBGPU_USE_LOW_POWER_GPU', () => false);
/**
 * Threshold for input tensor size that determines whether WebGPU backend will
 * delegate computation to CPU.
 *
 * Default value is 1000.
 */
ENV.registerFlag('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD', () => 1000);
/**
 * Whether to use a dummy canvas to make profiling tools like PIX work with
 * TFJS webgpu backend.
 */
ENV.registerFlag('WEBGPU_USE_PROFILE_TOOL', () => false);
/**
 * Whether to use import API.
 */
ENV.registerFlag('WEBGPU_IMPORT_EXTERNAL_TEXTURE', () => true);
/**
 * Whether to use conv2dNaive for debugging.
 */
ENV.registerFlag('WEBGPU_USE_NAIVE_CONV2D_DEBUG', () => false);
/**
 * Threshold to increase dispatched workgroups for matmul. If too few workgroups
 * are dispatched, it means the hardware may be in low occupancy.
 * 0 means it's not set by the user. A default strategy will be applied.
 */
ENV.registerFlag('WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL', () => 0);
/**
 * Whether we will run im2col as a separate shader for convolution.
 */
ENV.registerFlag('WEBGPU_CONV_SEPARATE_IM2COL_SHADER', () => false);
/**
 * A string used to match shader key. If any matches, print the related shader.
 * Seperated by comma. 'all' to print all. 'binary' to print binary(add, mul,
 * etc.). 'unary,conv2d' to print both unary and conv2d.
 */
ENV.registerFlag('WEBGPU_PRINT_SHADER', () => '');
/** Experimental flag, whether enter compile only phase. */
ENV.registerFlag('WEBGPU_ENGINE_COMPILE_ONLY', () => false);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZ3Nfd2ViZ3B1LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdGZqcy1iYWNrZW5kLXdlYmdwdS9zcmMvZmxhZ3Nfd2ViZ3B1LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUUxQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUVsQiw4REFBOEQ7QUFDOUQsR0FBRyxDQUFDLFlBQVksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUVoRTs7O0dBR0c7QUFDSCxHQUFHLENBQUMsWUFBWSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRW5EOzs7O0dBSUc7QUFDSCxHQUFHLENBQUMsWUFBWSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFekQ7OztHQUdHO0FBQ0gsR0FBRyxDQUFDLFlBQVksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUVsRTs7O0dBR0c7QUFDSCxHQUFHLENBQUMsWUFBWSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRTFEOzs7OztHQUtHO0FBQ0gsR0FBRyxDQUFDLFlBQVksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUVsRTs7O0dBR0c7QUFDSCxHQUFHLENBQUMsWUFBWSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXpEOztHQUVHO0FBQ0gsR0FBRyxDQUFDLFlBQVksQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUUvRDs7R0FFRztBQUNILEdBQUcsQ0FBQyxZQUFZLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFL0Q7Ozs7R0FJRztBQUNILEdBQUcsQ0FBQyxZQUFZLENBQUMsb0RBQW9ELEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFaEY7O0dBRUc7QUFDSCxHQUFHLENBQUMsWUFBWSxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXBFOzs7O0dBSUc7QUFDSCxHQUFHLENBQUMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRWxELDJEQUEyRDtBQUMzRCxHQUFHLENBQUMsWUFBWSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge2Vudn0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuY29uc3QgRU5WID0gZW52KCk7XG5cbi8qKiBUaGUgYmF0Y2hlZCBkaXNwYXRjaGluZyBjYWxscyBzaXplIGluIHRoZSBkZXZpY2UgcXVldWUuICovXG5FTlYucmVnaXN0ZXJGbGFnKCdXRUJHUFVfREVGRVJSRURfU1VCTUlUX0JBVENIX1NJWkUnLCAoKSA9PiAxNSk7XG5cbi8qKlxuICogV2hldGhlciB3ZSBmb3J3YXJkIGV4ZWN1dGlvbiB0byB0aGUgQ1BVIGJhY2tlbmQgaWYgdGVuc29ycyBhcmUgc21hbGwgYW5kXG4gKiByZXNpZGUgb24gdGhlIENQVS5cbiAqL1xuRU5WLnJlZ2lzdGVyRmxhZygnV0VCR1BVX0NQVV9GT1JXQVJEJywgKCkgPT4gdHJ1ZSk7XG5cbi8qKlxuICogVGhpcyBmbGFnIGlzIHVzZWQgdG8gdGVzdCBkaWZmZXJlbnQgdHlwZXMgb2YgbWF0bXVsIHByb2dyYW1zLlxuICpcbiAqIFNlZSBNYXRNdWxQcm9ncmFtVHlwZSBpbiB3ZWJncHVfdXRpbC50cyBmb3IgYSBsaXN0IG9mIGF2YWlsYWJsZSB2YWx1ZXMuXG4gKi9cbkVOVi5yZWdpc3RlckZsYWcoJ1dFQkdQVV9NQVRNVUxfUFJPR1JBTV9UWVBFJywgKCkgPT4gLTEpO1xuXG4vKipcbiAqIFdoZXRoZXIgdG8gdXNlIGNvbnYyZFRyYW5zcG9zZV9uYWl2ZSB3aGljaCBkaXJlY3RseSBpbXBsZW1lbnQgdGhlXG4gKiBjb252MmRUcmFuc3Bvc2UgbG9naWMgcmF0aGVyIHRoYW4gdXNpbmcgYSBtYXRtdWwgdG8gc2ltdWxhdGUuXG4gKi9cbkVOVi5yZWdpc3RlckZsYWcoJ1dFQkdQVV9VU0VfTkFJVkVfQ09OVjJEX1RSQU5TUE9TRScsICgpID0+IHRydWUpO1xuXG4vKipcbiAqIFdoZXRoZXIgd2UgdXNlIGxvdyBwb3dlciBHUFUuIE90aGVyd2lzZSwgYSBoaWdoIHBlcmZvcm1hbmNlIEdQVSB3aWxsIGJlXG4gKiByZXF1ZXN0ZWQuXG4gKi9cbkVOVi5yZWdpc3RlckZsYWcoJ1dFQkdQVV9VU0VfTE9XX1BPV0VSX0dQVScsICgpID0+IGZhbHNlKTtcblxuLyoqXG4gKiBUaHJlc2hvbGQgZm9yIGlucHV0IHRlbnNvciBzaXplIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIFdlYkdQVSBiYWNrZW5kIHdpbGxcbiAqIGRlbGVnYXRlIGNvbXB1dGF0aW9uIHRvIENQVS5cbiAqXG4gKiBEZWZhdWx0IHZhbHVlIGlzIDEwMDAuXG4gKi9cbkVOVi5yZWdpc3RlckZsYWcoJ1dFQkdQVV9DUFVfSEFORE9GRl9TSVpFX1RIUkVTSE9MRCcsICgpID0+IDEwMDApO1xuXG4vKipcbiAqIFdoZXRoZXIgdG8gdXNlIGEgZHVtbXkgY2FudmFzIHRvIG1ha2UgcHJvZmlsaW5nIHRvb2xzIGxpa2UgUElYIHdvcmsgd2l0aFxuICogVEZKUyB3ZWJncHUgYmFja2VuZC5cbiAqL1xuRU5WLnJlZ2lzdGVyRmxhZygnV0VCR1BVX1VTRV9QUk9GSUxFX1RPT0wnLCAoKSA9PiBmYWxzZSk7XG5cbi8qKlxuICogV2hldGhlciB0byB1c2UgaW1wb3J0IEFQSS5cbiAqL1xuRU5WLnJlZ2lzdGVyRmxhZygnV0VCR1BVX0lNUE9SVF9FWFRFUk5BTF9URVhUVVJFJywgKCkgPT4gdHJ1ZSk7XG5cbi8qKlxuICogV2hldGhlciB0byB1c2UgY29udjJkTmFpdmUgZm9yIGRlYnVnZ2luZy5cbiAqL1xuRU5WLnJlZ2lzdGVyRmxhZygnV0VCR1BVX1VTRV9OQUlWRV9DT05WMkRfREVCVUcnLCAoKSA9PiBmYWxzZSk7XG5cbi8qKlxuICogVGhyZXNob2xkIHRvIGluY3JlYXNlIGRpc3BhdGNoZWQgd29ya2dyb3VwcyBmb3IgbWF0bXVsLiBJZiB0b28gZmV3IHdvcmtncm91cHNcbiAqIGFyZSBkaXNwYXRjaGVkLCBpdCBtZWFucyB0aGUgaGFyZHdhcmUgbWF5IGJlIGluIGxvdyBvY2N1cGFuY3kuXG4gKiAwIG1lYW5zIGl0J3Mgbm90IHNldCBieSB0aGUgdXNlci4gQSBkZWZhdWx0IHN0cmF0ZWd5IHdpbGwgYmUgYXBwbGllZC5cbiAqL1xuRU5WLnJlZ2lzdGVyRmxhZygnV0VCR1BVX1RIUkVTSE9MRF9UT19JTkNSRUFTRV9XT1JLR1JPVVBTX0ZPUl9NQVRNVUwnLCAoKSA9PiAwKTtcblxuLyoqXG4gKiBXaGV0aGVyIHdlIHdpbGwgcnVuIGltMmNvbCBhcyBhIHNlcGFyYXRlIHNoYWRlciBmb3IgY29udm9sdXRpb24uXG4gKi9cbkVOVi5yZWdpc3RlckZsYWcoJ1dFQkdQVV9DT05WX1NFUEFSQVRFX0lNMkNPTF9TSEFERVInLCAoKSA9PiBmYWxzZSk7XG5cbi8qKlxuICogQSBzdHJpbmcgdXNlZCB0byBtYXRjaCBzaGFkZXIga2V5LiBJZiBhbnkgbWF0Y2hlcywgcHJpbnQgdGhlIHJlbGF0ZWQgc2hhZGVyLlxuICogU2VwZXJhdGVkIGJ5IGNvbW1hLiAnYWxsJyB0byBwcmludCBhbGwuICdiaW5hcnknIHRvIHByaW50IGJpbmFyeShhZGQsIG11bCxcbiAqIGV0Yy4pLiAndW5hcnksY29udjJkJyB0byBwcmludCBib3RoIHVuYXJ5IGFuZCBjb252MmQuXG4gKi9cbkVOVi5yZWdpc3RlckZsYWcoJ1dFQkdQVV9QUklOVF9TSEFERVInLCAoKSA9PiAnJyk7XG5cbi8qKiBFeHBlcmltZW50YWwgZmxhZywgd2hldGhlciBlbnRlciBjb21waWxlIG9ubHkgcGhhc2UuICovXG5FTlYucmVnaXN0ZXJGbGFnKCdXRUJHUFVfRU5HSU5FX0NPTVBJTEVfT05MWScsICgpID0+IGZhbHNlKTtcbiJdfQ==