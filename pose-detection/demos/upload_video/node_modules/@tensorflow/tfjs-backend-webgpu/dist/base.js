/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import './flags_webgpu';
import { env, registerBackend } from '@tensorflow/tfjs-core';
import { WebGPUBackend } from './backend_webgpu';
import { isWebGPUSupported } from './webgpu_util';
if (isWebGPUSupported()) {
    registerBackend('webgpu', async () => {
        const gpuDescriptor = {
            powerPreference: env().get('WEBGPU_USE_LOW_POWER_GPU') ?
                'low-power' :
                'high-performance'
        };
        const adapter = await navigator.gpu.requestAdapter(gpuDescriptor);
        const deviceDescriptor = {};
        const requiredFeatures = [];
        if (adapter.features.has('timestamp-query')) {
            requiredFeatures.push('timestamp-query');
        }
        if (adapter.features.has('bgra8unorm-storage')) {
            requiredFeatures.push(['bgra8unorm-storage']);
        }
        deviceDescriptor.requiredFeatures =
            requiredFeatures;
        const adapterLimits = adapter.limits;
        deviceDescriptor.requiredLimits = {
            'maxComputeWorkgroupStorageSize': adapterLimits.maxComputeWorkgroupStorageSize,
            'maxComputeWorkgroupsPerDimension': adapterLimits.maxComputeWorkgroupsPerDimension,
            'maxStorageBufferBindingSize': adapterLimits.maxStorageBufferBindingSize,
            'maxBufferSize': adapterLimits.maxBufferSize,
            'maxComputeWorkgroupSizeX': adapterLimits.maxComputeWorkgroupSizeX,
            'maxComputeInvocationsPerWorkgroup': adapterLimits.maxComputeInvocationsPerWorkgroup,
        };
        const device = await adapter.requestDevice(deviceDescriptor);
        const adapterInfo = await adapter.requestAdapterInfo();
        return new WebGPUBackend(device, adapterInfo);
    }, 3 /*priority*/);
}
// Export webgpu utilities
export * from './webgpu';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtYmFja2VuZC13ZWJncHUvc3JjL2Jhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEVBQUMsR0FBRyxFQUFFLGVBQWUsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRTNELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFaEQsSUFBSSxpQkFBaUIsRUFBRSxFQUFFO0lBQ3ZCLGVBQWUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbkMsTUFBTSxhQUFhLEdBQTZCO1lBQzlDLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDO2dCQUNwRCxXQUFXLENBQUMsQ0FBQztnQkFDYixrQkFBa0I7U0FDdkIsQ0FBQztRQUVGLE1BQU0sT0FBTyxHQUFHLE1BQU0sU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbEUsTUFBTSxnQkFBZ0IsR0FBd0IsRUFBRSxDQUFDO1FBRWpELE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1FBQzVCLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUMzQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUMxQztRQUNELElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsRUFBRTtZQUM5QyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7U0FDL0M7UUFDRCxnQkFBZ0IsQ0FBQyxnQkFBZ0I7WUFDN0IsZ0JBQTRDLENBQUM7UUFFakQsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNyQyxnQkFBZ0IsQ0FBQyxjQUFjLEdBQUc7WUFDaEMsZ0NBQWdDLEVBQzVCLGFBQWEsQ0FBQyw4QkFBOEI7WUFDaEQsa0NBQWtDLEVBQzlCLGFBQWEsQ0FBQyxnQ0FBZ0M7WUFDbEQsNkJBQTZCLEVBQUUsYUFBYSxDQUFDLDJCQUEyQjtZQUN4RSxlQUFlLEVBQUUsYUFBYSxDQUFDLGFBQWE7WUFDNUMsMEJBQTBCLEVBQUUsYUFBYSxDQUFDLHdCQUF3QjtZQUNsRSxtQ0FBbUMsRUFDL0IsYUFBYSxDQUFDLGlDQUFpQztTQUNwRCxDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQWMsTUFBTSxPQUFPLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDeEUsTUFBTSxXQUFXLEdBQUcsTUFBTSxPQUFPLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUN2RCxPQUFPLElBQUksYUFBYSxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNoRCxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQ3BCO0FBRUQsMEJBQTBCO0FBQzFCLGNBQWMsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQgJy4vZmxhZ3Nfd2ViZ3B1JztcblxuaW1wb3J0IHtlbnYsIHJlZ2lzdGVyQmFja2VuZH0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuaW1wb3J0IHtXZWJHUFVCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmRfd2ViZ3B1JztcbmltcG9ydCB7aXNXZWJHUFVTdXBwb3J0ZWR9IGZyb20gJy4vd2ViZ3B1X3V0aWwnO1xuXG5pZiAoaXNXZWJHUFVTdXBwb3J0ZWQoKSkge1xuICByZWdpc3RlckJhY2tlbmQoJ3dlYmdwdScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBncHVEZXNjcmlwdG9yOiBHUFVSZXF1ZXN0QWRhcHRlck9wdGlvbnMgPSB7XG4gICAgICBwb3dlclByZWZlcmVuY2U6IGVudigpLmdldCgnV0VCR1BVX1VTRV9MT1dfUE9XRVJfR1BVJykgP1xuICAgICAgICAgICdsb3ctcG93ZXInIDpcbiAgICAgICAgICAnaGlnaC1wZXJmb3JtYW5jZSdcbiAgICB9O1xuXG4gICAgY29uc3QgYWRhcHRlciA9IGF3YWl0IG5hdmlnYXRvci5ncHUucmVxdWVzdEFkYXB0ZXIoZ3B1RGVzY3JpcHRvcik7XG4gICAgY29uc3QgZGV2aWNlRGVzY3JpcHRvcjogR1BVRGV2aWNlRGVzY3JpcHRvciA9IHt9O1xuXG4gICAgY29uc3QgcmVxdWlyZWRGZWF0dXJlcyA9IFtdO1xuICAgIGlmIChhZGFwdGVyLmZlYXR1cmVzLmhhcygndGltZXN0YW1wLXF1ZXJ5JykpIHtcbiAgICAgIHJlcXVpcmVkRmVhdHVyZXMucHVzaCgndGltZXN0YW1wLXF1ZXJ5Jyk7XG4gICAgfVxuICAgIGlmIChhZGFwdGVyLmZlYXR1cmVzLmhhcygnYmdyYTh1bm9ybS1zdG9yYWdlJykpIHtcbiAgICAgIHJlcXVpcmVkRmVhdHVyZXMucHVzaChbJ2JncmE4dW5vcm0tc3RvcmFnZSddKTtcbiAgICB9XG4gICAgZGV2aWNlRGVzY3JpcHRvci5yZXF1aXJlZEZlYXR1cmVzID1cbiAgICAgICAgcmVxdWlyZWRGZWF0dXJlcyBhcyBJdGVyYWJsZTxHUFVGZWF0dXJlTmFtZT47XG5cbiAgICBjb25zdCBhZGFwdGVyTGltaXRzID0gYWRhcHRlci5saW1pdHM7XG4gICAgZGV2aWNlRGVzY3JpcHRvci5yZXF1aXJlZExpbWl0cyA9IHtcbiAgICAgICdtYXhDb21wdXRlV29ya2dyb3VwU3RvcmFnZVNpemUnOlxuICAgICAgICAgIGFkYXB0ZXJMaW1pdHMubWF4Q29tcHV0ZVdvcmtncm91cFN0b3JhZ2VTaXplLFxuICAgICAgJ21heENvbXB1dGVXb3JrZ3JvdXBzUGVyRGltZW5zaW9uJzpcbiAgICAgICAgICBhZGFwdGVyTGltaXRzLm1heENvbXB1dGVXb3JrZ3JvdXBzUGVyRGltZW5zaW9uLFxuICAgICAgJ21heFN0b3JhZ2VCdWZmZXJCaW5kaW5nU2l6ZSc6IGFkYXB0ZXJMaW1pdHMubWF4U3RvcmFnZUJ1ZmZlckJpbmRpbmdTaXplLFxuICAgICAgJ21heEJ1ZmZlclNpemUnOiBhZGFwdGVyTGltaXRzLm1heEJ1ZmZlclNpemUsXG4gICAgICAnbWF4Q29tcHV0ZVdvcmtncm91cFNpemVYJzogYWRhcHRlckxpbWl0cy5tYXhDb21wdXRlV29ya2dyb3VwU2l6ZVgsXG4gICAgICAnbWF4Q29tcHV0ZUludm9jYXRpb25zUGVyV29ya2dyb3VwJzpcbiAgICAgICAgICBhZGFwdGVyTGltaXRzLm1heENvbXB1dGVJbnZvY2F0aW9uc1Blcldvcmtncm91cCxcbiAgICB9O1xuXG4gICAgY29uc3QgZGV2aWNlOiBHUFVEZXZpY2UgPSBhd2FpdCBhZGFwdGVyLnJlcXVlc3REZXZpY2UoZGV2aWNlRGVzY3JpcHRvcik7XG4gICAgY29uc3QgYWRhcHRlckluZm8gPSBhd2FpdCBhZGFwdGVyLnJlcXVlc3RBZGFwdGVySW5mbygpO1xuICAgIHJldHVybiBuZXcgV2ViR1BVQmFja2VuZChkZXZpY2UsIGFkYXB0ZXJJbmZvKTtcbiAgfSwgMyAvKnByaW9yaXR5Ki8pO1xufVxuXG4vLyBFeHBvcnQgd2ViZ3B1IHV0aWxpdGllc1xuZXhwb3J0ICogZnJvbSAnLi93ZWJncHUnO1xuIl19