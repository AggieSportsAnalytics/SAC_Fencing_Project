{"version":3,"file":"tf-backend-webgpu.fesm.js","sources":["../../../../tfjs-backend-webgpu/src/flags_webgpu.ts","../../../../tfjs-backend-webgpu/src/adapter_info.ts","../../../../tfjs-backend-webgpu/src/buffer_manager.ts","../../../../tfjs-backend-webgpu/src/texture_manager.ts","../../../../tfjs-backend-webgpu/src/shader_util.ts","../../../../tfjs-backend-webgpu/src/webgpu_program.ts","../../../../tfjs-backend-webgpu/src/webgpu_util.ts","../../../../tfjs-backend-webgpu/src/backend_webgpu.ts","../../../../tfjs-backend-webgpu/src/base.ts","../../../../tfjs-backend-webgpu/src/binary_op_util.ts","../../../../tfjs-backend-webgpu/src/unary_op_util.ts","../../../../tfjs-backend-webgpu/src/activation_util.ts","../../../../tfjs-backend-webgpu/src/matmul_packed_webgpu.ts","../../../../tfjs-backend-webgpu/src/matmul_reduce_webgpu.ts","../../../../tfjs-backend-webgpu/src/matmul_small_output_size_webgpu.ts","../../../../tfjs-backend-webgpu/src/matmul_splitK_webgpu.ts","../../../../tfjs-backend-webgpu/src/fill_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Fill.ts","../../../../tfjs-backend-webgpu/src/kernels/Reshape.ts","../../../../tfjs-backend-webgpu/src/kernels/BatchMatMul_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-webgpu/src/binary_op_complex_webgpu.ts","../../../../tfjs-backend-webgpu/src/binary_op_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Identity.ts","../../../../tfjs-backend-webgpu/src/kernels/Complex.ts","../../../../tfjs-backend-webgpu/src/unary_op_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/kernel_funcs_utils.ts","../../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/BitwiseAnd.ts","../../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../../tfjs-backend-cpu/src/kernels/FloorDiv.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedGather_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedRange_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../../tfjs-backend-cpu/src/kernels/StaticRegexReplace.ts","../../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../../tfjs-backend-cpu/src/shared.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/shared.ts","../../../../tfjs-backend-webgpu/src/kernels/Abs.ts","../../../../tfjs-backend-webgpu/src/kernels/Acos.ts","../../../../tfjs-backend-webgpu/src/kernels/Acosh.ts","../../../../tfjs-backend-webgpu/src/kernels/Add.ts","../../../../tfjs-backend-webgpu/src/addn_packed_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/AddN.ts","../../../../tfjs-backend-webgpu/src/transpose_shared_webgpu.ts","../../../../tfjs-backend-webgpu/src/transpose_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Transpose.ts","../../../../tfjs-backend-webgpu/src/reduce_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/reduce.ts","../../../../tfjs-backend-webgpu/src/kernels/All.ts","../../../../tfjs-backend-webgpu/src/kernels/Any.ts","../../../../tfjs-backend-webgpu/src/argminmax_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ArgMax.ts","../../../../tfjs-backend-webgpu/src/kernels/ArgMin.ts","../../../../tfjs-backend-webgpu/src/kernels/Asin.ts","../../../../tfjs-backend-webgpu/src/kernels/Asinh.ts","../../../../tfjs-backend-webgpu/src/kernels/Atan.ts","../../../../tfjs-backend-webgpu/src/kernels/Atan2.ts","../../../../tfjs-backend-webgpu/src/kernels/Atanh.ts","../../../../tfjs-backend-webgpu/src/pool_filtersizeone_webgpu.ts","../../../../tfjs-backend-webgpu/src/pool_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Max.ts","../../../../tfjs-backend-webgpu/src/kernels/Mean.ts","../../../../tfjs-backend-webgpu/src/kernels/Pool_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/AvgPool.ts","../../../../tfjs-backend-webgpu/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-webgpu/src/avg_pool_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-webgpu/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-webgpu/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-webgpu/src/slice_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Slice.ts","../../../../tfjs-backend-webgpu/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-webgpu/src/bincount_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Bincount.ts","../../../../tfjs-backend-webgpu/src/broadcast_args_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-webgpu/src/kernels/NotEqual.ts","../../../../tfjs-backend-webgpu/src/kernels/Real.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/int.ts","../../../../tfjs-backend-webgpu/src/kernels/Cast.ts","../../../../tfjs-backend-webgpu/src/kernels/Ceil.ts","../../../../tfjs-backend-webgpu/src/clip_vec4_webgpu.ts","../../../../tfjs-backend-webgpu/src/clip_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ClipByValue.ts","../../../../tfjs-backend-webgpu/src/complex_abs_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-webgpu/src/concat_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Imag.ts","../../../../tfjs-backend-webgpu/src/kernels/Concat_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/Concat.ts","../../../../tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts","../../../../tfjs-backend-webgpu/src/conv2d_naive_webgpu.ts","../../../../tfjs-backend-webgpu/src/im2col_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2D_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2D.ts","../../../../tfjs-backend-webgpu/src/conv_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-webgpu/src/conv_backprop_mm_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-webgpu/src/conv3d_naive_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv3D.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-webgpu/src/kernels/Cos.ts","../../../../tfjs-backend-webgpu/src/kernels/Cosh.ts","../../../../tfjs-backend-webgpu/src/crop_and_resize_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/CropAndResize.ts","../../../../tfjs-backend-webgpu/src/cum_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Cum_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/Cumprod.ts","../../../../tfjs-backend-webgpu/src/kernels/Cumsum.ts","../../../../tfjs-backend-webgpu/src/kernels/DenseBincount.ts","../../../../tfjs-backend-webgpu/src/depth_to_space_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-webgpu/src/depthwise_conv2d_nchw_shared_webgpu.ts","../../../../tfjs-backend-webgpu/src/depthwise_conv2d_vec4_webgpu.ts","../../../../tfjs-backend-webgpu/src/depthwise_conv2d_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-webgpu/src/conv_backprop_depthwise_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-webgpu/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-webgpu/src/diag_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Diag.ts","../../../../tfjs-backend-webgpu/src/dilation_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Dilation2D.ts","../../../../tfjs-backend-webgpu/src/dilation_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Dilation2DBackpropFilter.ts","../../../../tfjs-backend-webgpu/src/kernels/Dilation2DBackpropInput.ts","../../../../tfjs-backend-webgpu/src/draw_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Draw.ts","../../../../tfjs-backend-webgpu/src/kernels/Multiply.ts","../../../../tfjs-backend-webgpu/src/kernels/Sum.ts","../../../../tfjs-backend-webgpu/src/kernels/Einsum.ts","../../../../tfjs-backend-webgpu/src/kernels/Elu.ts","../../../../tfjs-backend-webgpu/src/kernels/EluGrad.ts","../../../../tfjs-backend-webgpu/src/kernels/Equal.ts","../../../../tfjs-backend-webgpu/src/kernels/Erf.ts","../../../../tfjs-backend-webgpu/src/kernels/Exp.ts","../../../../tfjs-backend-webgpu/src/kernels/ExpandDims.ts","../../../../tfjs-backend-webgpu/src/kernels/Expm1.ts","../../../../tfjs-backend-webgpu/src/fft_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FFT_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/FFT.ts","../../../../tfjs-backend-webgpu/src/flip_left_right_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-webgpu/src/kernels/Floor.ts","../../../../tfjs-backend-webgpu/src/kernels/FloorDiv.ts","../../../../tfjs-backend-webgpu/src/from_pixels_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FromPixels.ts","../../../../tfjs-backend-webgpu/src/batchnorm_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FusedBatchNorm.ts","../../../../tfjs-backend-webgpu/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-webgpu/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-webgpu/src/gather_nd_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/GatherNd.ts","../../../../tfjs-backend-webgpu/src/gather_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/GatherV2.ts","../../../../tfjs-backend-webgpu/src/kernels/Greater.ts","../../../../tfjs-backend-webgpu/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-webgpu/src/kernels/IFFT.ts","../../../../tfjs-backend-webgpu/src/kernels/IsFinite.ts","../../../../tfjs-backend-webgpu/src/kernels/IsInf.ts","../../../../tfjs-backend-webgpu/src/kernels/IsNaN.ts","../../../../tfjs-backend-webgpu/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-webgpu/src/kernels/Less.ts","../../../../tfjs-backend-webgpu/src/kernels/LessEqual.ts","../../../../tfjs-backend-webgpu/src/lin_space_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/LinSpace.ts","../../../../tfjs-backend-webgpu/src/kernels/Log.ts","../../../../tfjs-backend-webgpu/src/kernels/Log1p.ts","../../../../tfjs-backend-webgpu/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-webgpu/src/kernels/LogicalNot.ts","../../../../tfjs-backend-webgpu/src/kernels/LogicalOr.ts","../../../../tfjs-backend-webgpu/src/lrn_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/LRN.ts","../../../../tfjs-backend-webgpu/src/lrn_grad_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/LRNGrad.ts","../../../../tfjs-backend-webgpu/src/kernels/Maximum.ts","../../../../tfjs-backend-webgpu/src/kernels/MaxPool.ts","../../../../tfjs-backend-webgpu/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-webgpu/src/max_pool_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-webgpu/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-webgpu/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-webgpu/src/kernels/Min.ts","../../../../tfjs-backend-webgpu/src/kernels/Minimum.ts","../../../../tfjs-backend-webgpu/src/mirror_pad_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/MirrorPad.ts","../../../../tfjs-backend-webgpu/src/kernels/Mod.ts","../../../../tfjs-backend-webgpu/src/multinomial_webgpu.ts","../../../../tfjs-backend-webgpu/src/softmax_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Softmax.ts","../../../../tfjs-backend-webgpu/src/kernels/Multinomial.ts","../../../../tfjs-backend-webgpu/src/kernels/Neg.ts","../../../../tfjs-backend-webgpu/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-webgpu/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-webgpu/src/onehot_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/OneHot.ts","../../../../tfjs-backend-webgpu/src/kernels/ZerosLike.ts","../../../../tfjs-backend-webgpu/src/kernels/OnesLike.ts","../../../../tfjs-backend-webgpu/src/kernels/Pack.ts","../../../../tfjs-backend-webgpu/src/pad_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/PadV2.ts","../../../../tfjs-backend-webgpu/src/kernels/Pow.ts","../../../../tfjs-backend-webgpu/src/kernels/Prelu.ts","../../../../tfjs-backend-webgpu/src/kernels/Prod.ts","../../../../tfjs-backend-webgpu/src/kernels/Range.ts","../../../../tfjs-backend-webgpu/src/kernels/RealDiv.ts","../../../../tfjs-backend-webgpu/src/kernels/Reciprocal.ts","../../../../tfjs-backend-webgpu/src/kernels/Relu.ts","../../../../tfjs-backend-webgpu/src/kernels/Relu6.ts","../../../../tfjs-backend-webgpu/src/resize_bilinear_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-webgpu/src/resize_bilinear_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-webgpu/src/resize_nearest_neighbor_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-webgpu/src/resize_nearest_neighbor_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-webgpu/src/reverse_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Reverse.ts","../../../../tfjs-backend-webgpu/src/rotate_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-webgpu/src/kernels/Round.ts","../../../../tfjs-backend-webgpu/src/kernels/Rsqrt.ts","../../../../tfjs-backend-webgpu/src/scatter_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ScatterNd.ts","../../../../tfjs-backend-webgpu/src/search_sorted_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/SearchSorted.ts","../../../../tfjs-backend-webgpu/src/select_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Select.ts","../../../../tfjs-backend-webgpu/src/kernels/Selu.ts","../../../../tfjs-backend-webgpu/src/kernels/Sigmoid.ts","../../../../tfjs-backend-webgpu/src/kernels/Sign.ts","../../../../tfjs-backend-webgpu/src/kernels/Sin.ts","../../../../tfjs-backend-webgpu/src/kernels/Sinh.ts","../../../../tfjs-backend-webgpu/src/kernels/Softplus.ts","../../../../tfjs-backend-webgpu/src/space_to_batchND_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-webgpu/src/sparse_segment_reduce_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/sparse_segment_reduce.ts","../../../../tfjs-backend-webgpu/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-webgpu/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-webgpu/src/tile_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Tile.ts","../../../../tfjs-backend-webgpu/src/kernels/SparseToDense.ts","../../../../tfjs-backend-webgpu/src/kernels/SplitV.ts","../../../../tfjs-backend-webgpu/src/kernels/Sqrt.ts","../../../../tfjs-backend-webgpu/src/kernels/Square.ts","../../../../tfjs-backend-webgpu/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-webgpu/src/kernels/Step.ts","../../../../tfjs-backend-webgpu/src/strided_slice_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/StridedSlice.ts","../../../../tfjs-backend-webgpu/src/kernels/StringNGrams.ts","../../../../tfjs-backend-webgpu/src/kernels/Sub.ts","../../../../tfjs-backend-webgpu/src/kernels/Tan.ts","../../../../tfjs-backend-webgpu/src/kernels/Tanh.ts","../../../../tfjs-backend-webgpu/src/kernels/TensorScatterUpdate.ts","../../../../tfjs-backend-webgpu/src/top_k_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/TopK.ts","../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Transform.ts","../../../../tfjs-backend-webgpu/src/kernels/Unpack.ts","../../../../tfjs-backend-webgpu/src/unsorted_segment_sum_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-webgpu/src/register_all_kernels.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst ENV = env();\n\n/** The batched dispatching calls size in the device queue. */\nENV.registerFlag('WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE', () => 15);\n\n/**\n * Whether we forward execution to the CPU backend if tensors are small and\n * reside on the CPU.\n */\nENV.registerFlag('WEBGPU_CPU_FORWARD', () => true);\n\n/**\n * This flag is used to test different types of matmul programs.\n *\n * See MatMulProgramType in webgpu_util.ts for a list of available values.\n */\nENV.registerFlag('WEBGPU_MATMUL_PROGRAM_TYPE', () => -1);\n\n/**\n * Whether to use conv2dTranspose_naive which directly implement the\n * conv2dTranspose logic rather than using a matmul to simulate.\n */\nENV.registerFlag('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE', () => true);\n\n/**\n * Whether we use low power GPU. Otherwise, a high performance GPU will be\n * requested.\n */\nENV.registerFlag('WEBGPU_USE_LOW_POWER_GPU', () => false);\n\n/**\n * Threshold for input tensor size that determines whether WebGPU backend will\n * delegate computation to CPU.\n *\n * Default value is 1000.\n */\nENV.registerFlag('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD', () => 1000);\n\n/**\n * Whether to use a dummy canvas to make profiling tools like PIX work with\n * TFJS webgpu backend.\n */\nENV.registerFlag('WEBGPU_USE_PROFILE_TOOL', () => false);\n\n/**\n * Whether to use import API.\n */\nENV.registerFlag('WEBGPU_IMPORT_EXTERNAL_TEXTURE', () => true);\n\n/**\n * Whether to use conv2dNaive for debugging.\n */\nENV.registerFlag('WEBGPU_USE_NAIVE_CONV2D_DEBUG', () => false);\n\n/**\n * Threshold to increase dispatched workgroups for matmul. If too few workgroups\n * are dispatched, it means the hardware may be in low occupancy.\n * -1 means it's not set by the user. A default strategy will be applied.\n */\nENV.registerFlag(\n    'WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL', () => -1);\n\n/**\n * Whether we will run im2col as a separate shader for convolution.\n */\nENV.registerFlag('WEBGPU_CONV_SEPARATE_IM2COL_SHADER', () => false);\n\n/**\n * A string used to match shader key. If any matches, print the related shader.\n * Seperated by comma. 'all' to print all. 'binary' to print binary(add, mul,\n * etc.). 'unary,conv2d' to print both unary and conv2d.\n */\nENV.registerFlag('WEBGPU_PRINT_SHADER', () => '');\n\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('WEBGPU_ENGINE_COMPILE_ONLY', () => false);\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport class AdapterInfo {\n  private vendor: string;\n  private architecture: string;\n  public intelGPUGeneration: number;\n\n  constructor(adapterInfo: GPUAdapterInfo) {\n    if (adapterInfo) {\n      this.vendor = adapterInfo.vendor;\n      this.architecture = adapterInfo.architecture;\n      this.intelGPUGeneration = this.getIntelGPUGeneration();\n    }\n  }\n\n  private getIntelGPUGeneration() {\n    if (this.isIntel()) {\n      if (this.architecture.startsWith('gen')) {\n        return Number(this.architecture.match(/\\d+/));\n      } else if (this.architecture.startsWith('xe')) {\n        return 12;\n      }\n    }\n    return 0;\n  }\n\n  isIntel(): boolean {\n    return this.vendor === 'intel';\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport class BufferManager {\n  private numUsedBuffers = 0;\n  private numFreeBuffers = 0;\n  private freeBuffers: Map<string, GPUBuffer[]> = new Map();\n  private usedBuffers: Map<string, GPUBuffer[]> = new Map();\n\n  public numBytesUsed = 0;\n  public numBytesAllocated = 0;\n\n  constructor(private device: GPUDevice) {}\n\n  acquireBuffer(\n      size: number, usage: GPUBufferUsageFlags, mappedAtCreation = false,\n      reuse = true) {\n    let buffer;\n    const key = getBufferKey(size, usage);\n\n    if (reuse) {\n      if (!this.freeBuffers.has(key)) {\n        this.freeBuffers.set(key, []);\n      }\n\n      if (this.freeBuffers.get(key).length > 0) {\n        buffer = this.freeBuffers.get(key).pop();\n        this.numFreeBuffers--;\n      } else {\n        buffer = this.device.createBuffer({size, usage, mappedAtCreation});\n        this.numBytesAllocated += size;\n      }\n    } else {\n      buffer = this.device.createBuffer({size, usage, mappedAtCreation});\n      this.numBytesAllocated += size;\n    }\n\n    if (!this.usedBuffers.has(key)) {\n      this.usedBuffers.set(key, []);\n    }\n    this.usedBuffers.get(key).push(buffer);\n    this.numUsedBuffers++;\n    this.numBytesUsed += size;\n\n    return buffer;\n  }\n\n  releaseBuffer(buffer: GPUBuffer, reuse = true) {\n    if (this.freeBuffers.size === 0) {\n      return;\n    }\n\n    const size = buffer.size;\n    const usage = buffer.usage;\n\n    const key = getBufferKey(size, usage);\n    const bufferArray = this.usedBuffers.get(key);\n    const index = bufferArray.indexOf(buffer);\n    if (index < 0) {\n      throw new Error('Cannot find the buffer in buffer manager');\n    }\n    bufferArray[index] = bufferArray[bufferArray.length - 1];\n    bufferArray.pop();\n    this.numUsedBuffers--;\n    this.numBytesUsed -= size;\n\n    if (reuse) {\n      this.freeBuffers.get(key).push(buffer);\n      this.numFreeBuffers++;\n    } else {\n      buffer.destroy();\n      this.numBytesAllocated -= size;\n    }\n  }\n\n  getNumUsedBuffers(): number {\n    return this.numUsedBuffers;\n  }\n\n  getNumFreeBuffers(): number {\n    return this.numFreeBuffers;\n  }\n\n  dispose() {\n    this.freeBuffers.forEach((buffers, key) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n\n    this.usedBuffers.forEach((buffers, key) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n\n    this.freeBuffers = new Map();\n    this.usedBuffers = new Map();\n    this.numUsedBuffers = 0;\n    this.numFreeBuffers = 0;\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n}\n\nfunction getBufferKey(size: number, usage: GPUBufferUsageFlags) {\n  return `${size}_${usage}`;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private freeTextures: Map<string, GPUTexture[]> = new Map();\n  private usedTextures: Map<string, GPUTexture[]> = new Map();\n\n  public numBytesUsed = 0;\n  public numBytesAllocated = 0;\n\n  constructor(private device: GPUDevice) {}\n\n  acquireTexture(\n      width: number, height: number, format: GPUTextureFormat,\n      usage: GPUTextureUsageFlags) {\n    const bytesPerElement = getBytesPerElement(format);\n    const byteSize = width * height * bytesPerElement;\n    const key = getTextureKey(width, height, format, usage);\n    if (!this.freeTextures.has(key)) {\n      this.freeTextures.set(key, []);\n    }\n\n    if (!this.usedTextures.has(key)) {\n      this.usedTextures.set(key, []);\n    }\n\n    this.numBytesUsed += byteSize;\n    this.numUsedTextures++;\n\n    if (this.freeTextures.get(key).length > 0) {\n      this.numFreeTextures--;\n\n      const newTexture = this.freeTextures.get(key).shift();\n      this.usedTextures.get(key).push(newTexture);\n      return newTexture;\n    }\n\n    this.numBytesAllocated += byteSize;\n\n    const newTexture = this.device.createTexture({\n      size: [width, height],\n      format,\n      usage,\n    });\n    this.usedTextures.get(key).push(newTexture);\n\n    return newTexture;\n  }\n\n  releaseTexture(texture: GPUTexture) {\n    if (this.freeTextures.size === 0) {\n      return;\n    }\n\n    const width = texture.width;\n    const height = texture.height;\n    const format = texture.format;\n    const usage = texture.usage;\n\n    const key = getTextureKey(width, height, format, usage);\n    if (!this.freeTextures.has(key)) {\n      this.freeTextures.set(key, []);\n    }\n\n    this.freeTextures.get(key).push(texture);\n    this.numFreeTextures++;\n    this.numUsedTextures--;\n\n    const textureList = this.usedTextures.get(key);\n    const textureIndex = textureList.indexOf(texture);\n    if (textureIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    textureList.splice(textureIndex, 1);\n    const bytesPerElement = getBytesPerElement(format);\n    const byteSize = width * height * bytesPerElement;\n    this.numBytesUsed -= byteSize;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    this.freeTextures.forEach((textures, key) => {\n      textures.forEach(texture => {\n        texture.destroy();\n      });\n    });\n\n    this.usedTextures.forEach((textures, key) => {\n      textures.forEach(texture => {\n        texture.destroy();\n      });\n    });\n\n    this.freeTextures = new Map();\n    this.usedTextures = new Map();\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n}\n\nfunction getTextureKey(\n    width: number, height: number, format: GPUTextureFormat,\n    usage: GPUTextureUsageFlags) {\n  return `${width}_${height}_${format}_${usage}`;\n}\n\nfunction getBytesPerElement(format: GPUTextureFormat) {\n  if (format === 'rgba8unorm') {\n    return 16;\n  } else {\n    throw new Error(`${format} is not supported!`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Generates WGSL that computes strides.\nexport function symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  if (Math.max(...indicesArr) > 5) {\n    throw new Error('Cannot symbolically compute strides for rank > 6 tensor.');\n  }\n\n  const numCoords = indicesArr.length;\n  const indicesStr = 'xyzwuv';\n  const shape = indicesArr.map(d => `${variableName}.${indicesStr[d]}`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport const atomicAddSnippet =\n    (ptr: string, v: string, type: 'int32'|'float32') => {\n      if (type === 'int32') {\n        return `atomicAdd(${ptr}, bitcast<i32>(${v}));`;\n      } else {\n        // atomicAdd only supports uint/int type. For float, we use\n        // atomicCompareExchangeWeak to simulate.\n        return `\n          {\n            var oldValue = 0;\n            loop {\n              let newValueF32 = bitcast<f32>(oldValue) + (${v});\n              let newValue = bitcast<i32>(newValueF32);\n              let res = atomicCompareExchangeWeak(${ptr}, oldValue, newValue);\n              if res.exchanged {\n                break;\n              }\n              oldValue = res.old_value;\n            }\n          }`;\n      }\n    };\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataTypeMap, env, Rank, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {symbolicallyComputeStrides} from './shader_util';\n\nexport enum PixelsOpType {\n  FROM_PIXELS,\n  DRAW\n}\n\nexport interface WebGPUProgram {\n  // Whether to use atomic built-in functions.\n  atomic?: boolean;\n  // dispatch specifies geometry of thread groups - derived from dispatchLayout.\n  dispatch: [number, number, number];\n  // dispatchLayout enumerates how tensor dimensions are distributed among\n  // dispatch x,y,z dimensions.\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  // By default, the output data component is 1.\n  outputComponent?: number;\n  outputShape: number[];\n  pixelsOpType?: PixelsOpType;\n  // The unique key to distinguish different shader source code.\n  shaderKey: string;\n  // Whether to use output size for bounds checking.\n  size?: boolean;\n  uniforms?: string;\n  variableNames: string[];\n  // Describe each variable's component and must have one-one mapping with\n  // variableNames. If not set, all variables component will be same with output\n  // component member.\n  variableComponents?: number[];\n  // workgroupSize.x * workgroupSize.y * workgroupSize.z = the number of threads\n  // in a thread group. Individual dimensions determines thread layout within\n  // the group.\n  workgroupSize: [number, number, number];\n  // Size of register cache in one dimension (assumes square cache).\n  // Each thread writes to workPerThread * workPerThread locations in the output\n  // buffer.\n  workPerThread?: number;\n  pipeline?: GPUComputePipeline|Promise<GPUComputePipeline>;\n  getUserCode: () => string;\n}\n\nexport const compileProgram =\n    (device: GPUDevice, program: WebGPUProgram, inputsData: InputInfo[],\n     output: TensorInfo, parallelCompilation: boolean): GPUComputePipeline|\n    Promise<GPUComputePipeline> => {\n      const outputData = {dtype: output.dtype, shape: output.shape};\n      const source = makeShader(inputsData, outputData, program);\n      const module = device.createShaderModule(\n          {code: source, label: program.constructor.name});\n\n      let printShaderString = env().get('WEBGPU_PRINT_SHADER') as string;\n      if (printShaderString !== '') {\n        printShaderString = printShaderString.toLowerCase();\n        const printShaderArray = printShaderString.split(',');\n        if (printShaderString === 'all' ||\n            printShaderArray.some(\n                item => program.shaderKey.toLowerCase().includes(item))) {\n          console.group(program.shaderKey);\n          console.debug(source);\n          console.groupEnd();\n        }\n      }\n\n      if (parallelCompilation) {\n        return device.createComputePipelineAsync({\n          compute: {module, entryPoint: '_start'},\n          label: program.constructor.name,\n          layout: 'auto'\n        });\n      } else {\n        return device.createComputePipeline({\n          compute: {module, entryPoint: '_start'},\n          label: program.constructor.name,\n          layout: 'auto'\n        });\n      }\n    };\n\nexport const typeSnippet = (component: number, type = 'f32') => {\n  switch (component) {\n    case 1:\n      return `${type}`;\n    case 2:\n      return `vec2<${type}>`;\n    case 3:\n      return `vec3<${type}>`;\n    case 4:\n      return `vec4<${type}>`;\n    default:\n      throw new Error(`${component}-component ${type} is not supported.`);\n  }\n};\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'i32';\n  } else if (rank === 2) {\n    return `vec2<i32>`;\n  } else if (rank === 3) {\n    return `vec3<i32>`;\n  } else if (rank === 4) {\n    return `vec4<i32>`;\n  } else if (rank === 5) {\n    return `vec5`;\n  } else if (rank === 6) {\n    return `vec6`;\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getCoordsXYZ(index: number): string {\n  if (index === 0) {\n    return 'x';\n  } else if (index === 1) {\n    return 'y';\n  } else if (index === 2) {\n    return 'z';\n  } else if (index === 3) {\n    return 'w';\n  } else if (index === 4) {\n    return 'u';\n  } else if (index === 5) {\n    return 'v';\n  } else {\n    throw Error(`Index ${index} is not yet supported`);\n  }\n}\n\nexport function getMainHeaderString(): string;\nexport function getMainHeaderString(index: string): string;\nexport function getMainHeaderString(...params: string[]): string {\n  let snippet: string;\n  switch (params.length) {\n    case 0:\n      snippet = `\n        fn main()\n      `;\n      break;\n    case 1:\n      snippet = `\n        fn main(${params[0]} : i32)\n      `;\n      break;\n    default:\n      throw Error('Unreachable');\n  }\n  return snippet;\n}\n\nexport function getStartHeaderString(\n    useGlobalIndex: boolean, program: WebGPUProgram): string {\n  let snippet: string;\n  snippet = `\n     ${getWorkgroupSizeString(program)}\n      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n                @builtin(global_invocation_id) GlobalId : vec3<u32>,\n                @builtin(local_invocation_index) LocalIndex: u32,\n                @builtin(workgroup_id) WorkgroupId : vec3<u32>,\n                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {\n        localId = LocalId;\n        localIndex = LocalIndex;\n        globalId = GlobalId;\n        numWorkgroups = NumWorkgroups;\n        workgroupId = WorkgroupId;\n        ${useGlobalIndex ? `main(getGlobalIndex());` : `main();`};\n      }\n    `;\n  return snippet;\n}\n\nexport function getWorkgroupSizeString(program: WebGPUProgram): string {\n  return `\n  @compute @workgroup_size(${program.workgroupSize[0]}, ${\n      program.workgroupSize[1]}, ${program.workgroupSize[2]})\n`;\n}\n\nfunction makeShader(\n    inputInfo: InputInfo[], outputData: {dtype: DataType, shape: number[]},\n    program: WebGPUProgram): string {\n  const prefixSnippets: string[] = [];\n  const flatWorkgroupSize = program.workgroupSize[0] *\n      program.workgroupSize[1] * program.workgroupSize[2];\n  program.outputComponent =\n      program.outputComponent ? program.outputComponent : 1;\n  prefixSnippets.push(`\n\n      var<private> localId: vec3<u32>;\n      var<private> localIndex: u32;\n      var<private> globalId: vec3<u32>;\n      var<private> numWorkgroups: vec3<u32>;\n      var<private> workgroupId: vec3<u32>;\n\n      // Only used when the y/z dimension of workgroup size is 1.\n      fn getGlobalIndex() -> i32 {\n        ${\n      isFlatDispatch(program) ?\n          `  return i32(globalId.x);` :\n          `  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +\n                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${\n              flatWorkgroupSize}u +\n                localIndex);\n        `}\n      }\n    `);\n\n  if (program.pixelsOpType != null) {\n    const inoutSnippet = program.pixelsOpType === PixelsOpType.FROM_PIXELS ?\n        `@group(0) @binding(0) var<storage, read_write> result: array<${\n            dataTypeToGPUType(outputData.dtype, program.outputComponent)}>;` :\n        `@group(0) @binding(1) var<storage, read> inBuf : array<${\n            dataTypeToGPUType(inputInfo[0].dtype, program.outputComponent)}>;`;\n    const outShapeStridesType =\n        outputData.shape.length === 3 ? 'vec2<i32>' : 'i32';\n    prefixSnippets.push(`\n        struct Uniform {\n          outShapeStrides : ${outShapeStridesType},\n          size            : i32,\n          numChannels     : i32,\n          alpha           : f32,\n        };\n\n        ${inoutSnippet}\n        @group(0) @binding(2) var<uniform> uniforms: Uniform;\n      `);\n    const useGlobalIndex = isFlatDispatchLayout(program);\n    return [\n      commonSnippet,\n      prefixSnippets.join('\\n'),\n      getCoordsFromIndexSnippet(outputData.shape),\n      program.getUserCode(),\n      getStartHeaderString(useGlobalIndex, program),\n    ].join('\\n');\n  }\n\n  let stridesLength: number;\n  let stridesDataType: string;\n  let uniformDeclaration = 'struct Uniforms { NAN : f32, INFINITY : f32, ';\n  program.variableNames.forEach((x, i) => {\n    const perDataType = getCoordsDataType(inputInfo[i].shape.length);\n    uniformDeclaration +=\n        `${x.charAt(0).toLowerCase() + x.slice(1)}Shape : ${perDataType}, `;\n    stridesLength = inputInfo[i].shape.length - 1;\n    stridesDataType = getCoordsDataType(stridesLength);\n    uniformDeclaration +=\n        `${x.charAt(0).toLowerCase() + x.slice(1)}ShapeStrides: ${\n            stridesDataType}, `;\n  });\n  const outputDataType = getCoordsDataType(outputData.shape.length);\n  uniformDeclaration += `outShape : ${outputDataType}, `;\n  stridesLength = outputData.shape.length - 1;\n  stridesDataType = getCoordsDataType(stridesLength);\n  uniformDeclaration += `\n         outShapeStrides: ${stridesDataType}, `;\n\n  if (program.size) {\n    uniformDeclaration += 'size : i32, ';\n  }\n\n  if (program.uniforms) {\n    uniformDeclaration += program.uniforms;\n  }\n  uniformDeclaration += '};';\n  uniformDeclaration = insertAlignment(uniformDeclaration);\n\n  prefixSnippets.push(uniformDeclaration);\n\n  // Output buffer.\n  if (program.atomic) {\n    prefixSnippets.push(`\n      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;\n    `);\n  } else {\n    prefixSnippets.push(`\n      @group(0) @binding(0) var<storage, read_write> result: array<${\n        dataTypeToGPUType(outputData.dtype, program.outputComponent)}>;\n    `);\n  }\n  program.variableNames.forEach((x, i) => {\n    prefixSnippets.push(`\n      @group(0) @binding(${1 + i}) var<storage, read> ${x}: array<${\n        program.variableComponents ?\n            dataTypeToGPUType(\n                inputInfo[i].dtype, program.variableComponents[i]) :\n            dataTypeToGPUType(inputInfo[i].dtype, program.outputComponent)}>;\n        `);\n  });\n\n  if (uniformDeclaration !== '') {\n    prefixSnippets.push(`\n      @group(0) @binding(${\n        1 + program.variableNames.length}) var<uniform> uniforms: Uniforms;\n      `);\n  }\n\n  const coordsSnippet =\n      getOutputCoordsSnippet(outputData.shape, program.dispatchLayout);\n\n  const sources = [\n    commonSnippet, prefixSnippets.join('\\n') + isInfSnippet,\n    getCoordsFromIndexSnippet(outputData.shape), coordsSnippet,\n    getOutputIndexFromCoordsSnippet(outputData.shape.length)\n  ];\n  if (!program.atomic) {\n    sources.push(setOutputSnippet(\n        outputData.shape, outputData.dtype, program.outputComponent));\n  }\n\n  program.variableNames.forEach((x, i) => {\n    sources.push(`${getCoordsFromIndexSnippet(inputInfo[i].shape, x)}`);\n  });\n\n  const inputSnippet =\n      inputInfo\n          .map(\n              (x, i) => getInputSnippet(\n                  x, outputData.shape,\n                  program.variableComponents ? program.variableComponents[i] :\n                                               program.outputComponent,\n                  program.dispatchLayout.x.length === outputData.shape.length))\n          .join('\\n');\n  sources.push(inputSnippet);\n  sources.push(program.getUserCode());\n  const useGlobalIndex = isFlatDispatchLayout(program);\n  sources.push(getStartHeaderString(useGlobalIndex, program));\n  const source = sources.join('\\n');\n  return source;\n}\n\nexport function makeShaderKey<R extends Rank>(\n    program: WebGPUProgram, inputsData: InputInfo[],\n    output: TensorInfo): string {\n  let key = program.shaderKey;\n  if (program.pixelsOpType != null) {\n    return key;\n  }\n\n  const shapes: number[][] = [];\n  const types: Array<keyof DataTypeMap> = [];\n  inputsData.forEach(element => {\n    shapes.push(element.shape);\n    types.push(element.dtype);\n  });\n  shapes.push(output.shape);\n  types.push(output.dtype);\n\n  const broadcastDims =\n      inputsData.map(d => backend_util.getBroadcastDims(d.shape, output.shape));\n  const inputShapesEqualsOutShape =\n      inputsData.map(d => util.arraysEqual(d.shape, output.shape)).join('_');\n  const broadcastDimsKey = broadcastDims.map(d => d.join('_')).join(';');\n\n  const flatDispatchString = isFlatDispatch(program) ? 'flatDispatch' : '';\n\n  key += '_' + (program.workgroupSize ? program.workgroupSize.join(',') : '') +\n      shapes.map(shape => shape.length).join(',') + types.join(',') +\n      program.variableNames.join(',') + broadcastDimsKey +\n      inputShapesEqualsOutShape + flatDispatchString;\n\n  return key;\n}\n\nconst commonSnippet = `\n  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};\n  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};\n\n  // Checks whether coordinates lie within the bounds of the shape.\n  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {\n    return all(coord >= vec2<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {\n    return all(coord >= vec3<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {\n    return all(coord >= vec4<i32>(0)) && all(coord < shape);\n  }\n\n  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {\n    return coord;\n  }\n  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {\n    return dot(coords, vec2<i32>(shape.y, 1));\n  }\n  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {\n    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));\n  }\n  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n    return dot(coords, vec4<i32>(\n        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n  }\n  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {\n    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;\n  }\n  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {\n    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;\n  }\n\n  // NaN defination in IEEE 754-1985 is :\n  //   - sign = either 0 or 1.\n  //   - biased exponent = all 1 bits.\n  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).\n  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n  fn isnan(val: f32) -> bool {\n    let floatToUint: u32 = bitcast<u32>(val);\n    return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n  }\n  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {\n    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);\n    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);\n  }\n`;\n\nconst isInfSnippet = `\n  fn isinf(val: f32) -> bool {\n    return abs(val) == uniforms.INFINITY;\n  }\n`;\n\ntype InputInfo = {\n  dtype: DataType; shape: number[]; name: string;\n};\n\n/**\n * Derives logical coordinates from a flat index. Performs integer division\n * with each stride and decrements the index until the index equals the final\n * dimension coordinate.\n */\nexport function getCoordsFromIndexSnippet(shape: number[], name = ''): string {\n  const rank = shape.length;\n  const funcName = name !== '' ?\n      `get${name.charAt(0).toUpperCase() + name.slice(1)}CoordsFromIndex` :\n      'getCoordsFromIndex';\n  const stridesName = name !== '' ?\n      `${name.charAt(0).toLowerCase() + name.slice(1)}ShapeStrides` :\n      `outShapeStrides`;\n\n  if (rank <= 1) {\n    return `fn ${funcName}(index : i32) -> i32 { return index; }`;\n  }\n\n  const strides = util.computeStrides(shape);\n  const dtype = getCoordsDataType(rank);\n\n  const coords: string[] = [];\n  for (let i = 0; i < rank; i++) {\n    coords.push(`d${i}`);\n  }\n\n  if (strides.length === 1) {\n    return `    fn ${funcName}(index : i32) -> vec2<i32> {\n      let d0 = index / uniforms.${\n        stridesName}; let d1 = index - d0 * uniforms.${stridesName};\n      return vec2<i32>(d0, d1);\n    }`;\n  }\n  let snippet;\n  snippet = 'var index2 = index;' +\n      strides\n          .map((_, i) => {\n            const line1 = `let ${coords[i]} = index2 / uniforms.${\n                stridesName}.${getCoordsXYZ(i)}`;\n            const line2 = i === strides.length - 1 ?\n                `let ${coords[i + 1]} = index2 - ${coords[i]} * uniforms.${\n                    stridesName}.${getCoordsXYZ(i)}` :\n                `index2 = index2 - ${coords[i]} * uniforms.${stridesName}.${\n                    getCoordsXYZ(i)}`;\n            return `${line1}; ${line2};`;\n          })\n          .join('');\n\n  return `\n    fn ${funcName}(index : i32) -> ${dtype} {\n      ${snippet}\n      return ${dtype}(${coords.join(',')});\n    }\n  `;\n}\n\nfunction getInputAtCoordsSnippet(\n    inputInfo: InputInfo, component: number): string {\n  const texName = inputInfo.name;\n  const rank = inputInfo.shape.length;\n  const type = getCoordsDataType(rank);\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const dims = ['d0', 'd1', 'd2', 'd3', 'd4', 'd5'].slice(0, rank);\n  const inputs = dims.map(d => `${d} : i32`).join(', ');\n\n  if (rank < 1) {\n    return `\n      fn ${funcName}() -> ${typeSnippet(component)} {\n        return ${typeSnippet(component)}(${texName}[0]);\n      }\n    `;\n  }\n\n  const shapeStr =\n      `uniforms.${texName.charAt(0).toLowerCase() + texName.slice(1)}Shape`;\n  let rankStr = `${rank}D`;\n  if (rank === 0) {\n    rankStr = '1D';\n  }\n\n  return `\n    fn ${funcName}(${inputs}) -> ${typeSnippet(component)} {\n      return ${typeSnippet(component)}(${texName}[getIndexFromCoords${\n      rankStr}(${type}(${dims.join(',')}),\n        ${shapeStr})${component === 1 ? '' : ` / ${component}`}]);\n    }\n   `;\n}\n\nfunction getInputByOutputSnippet(\n    inputInfo: InputInfo, outShape: number[], component: number,\n    isFlatDispatchLayout: boolean): string {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const funcName = 'get' + texFuncSnippet + 'ByOutput';\n\n  const inRank = inputInfo.shape.length;\n  const outRank = outShape.length;\n  const type = getCoordsDataType(outRank);\n\n  // If the inShape equals the outShape and the dispatch layout is flat, we can\n  // directly use |gl_GlobalInvocationID.x| as the index and don't need coords\n  // conversion between these two shapes.\n  if (util.arraysEqual(inputInfo.shape, outShape) && isFlatDispatchLayout) {\n    return `\n    fn ${funcName}Index(globalIndex : i32) -> ${typeSnippet(component)} {\n      return ${typeSnippet(component)}(${texName}[globalIndex]);\n    }\n\n    fn ${funcName}Coords(coords : ${type}) -> ${typeSnippet(component)} {\n      return ${typeSnippet(component)}(${texName}[${\n        outRank > 1 ? 'getOutputIndexFromCoords(coords)' :\n                      'coords'}${component === 1 ? '' : ` / ${component}`}]);\n    }\n    `;\n  }\n\n  const broadcastDims =\n      backend_util.getBroadcastDims(inputInfo.shape, outShape);\n  const rankDiff = outRank - inRank;\n\n  let coordsSnippet = '';\n\n  if (inRank === 0) {\n    return `\n    fn ${funcName}Index(globalIndex : i32) -> ${typeSnippet(component)}{\n      return get${texFuncSnippet}();\n    }\n\n    fn ${funcName}Coords(coords : ${type}) -> ${typeSnippet(component)}{\n      return get${texFuncSnippet}();\n    }\n  `;\n  } else {\n    if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet =\n          broadcastDims.map(d => `coords.${getCoordsXYZ(d + rankDiff)} = 0;`)\n              .join('\\n');\n    }\n  }\n\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    if (outRank > 1) {\n      const coordsType = getCoordsDataType(inRank);\n      const coordsValues =\n          inputInfo.shape.map((s, i) => `coords.${getCoordsXYZ(i + rankDiff)}`)\n              .join(', ');\n      unpackedCoordsSnippet = `${coordsType}(${coordsValues})`;\n    } else {\n      unpackedCoordsSnippet = 'coords';\n    }\n  }\n\n  const shapeStr =\n      `uniforms.${texName.charAt(0).toLowerCase() + texName.slice(1)}Shape`;\n  const rankStr = `${inRank}D`;\n\n  return `\n  fn ${funcName}Index(globalIndex : i32) -> ${typeSnippet(component)} {\n    var coords = getCoordsFromIndex(globalIndex);\n    ${coordsSnippet}\n    return ${typeSnippet(component)}(${texName}[getIndexFromCoords${rankStr}(${\n      unpackedCoordsSnippet}, ${shapeStr})${\n      component === 1 ? '' : ` / ${component}`}]);\n  }\n\n  fn ${funcName}Coords(coordsIn : ${type}) -> ${typeSnippet(component)} {\n    var coords = coordsIn;\n    ${coordsSnippet}\n    return ${typeSnippet(component)}(${texName}[getIndexFromCoords${rankStr}(${\n      unpackedCoordsSnippet}, ${shapeStr})${\n      component === 1 ? '' : ` / ${component}`}]);\n  }\n`;\n}\n\nfunction getInputSnippet(\n    inputInfo: InputInfo, outShape: number[], component: number,\n    isFlatDispatchLayout: boolean): string {\n  let res = getInputAtCoordsSnippet(inputInfo, component);\n\n  const inShape = inputInfo.shape;\n  if (inShape.length <= outShape.length) {\n    res += getInputByOutputSnippet(\n        inputInfo, outShape, component, isFlatDispatchLayout);\n  }\n\n  return res;\n}\n\n/**\n * Generates getOutputCoords() function that computes output coordinates\n * from dispatch geometry to reduce arithmetic.\n */\nfunction getOutputCoordsSnippet(\n    outShape: number[],\n    dispatchLayout: {x: number[], y?: number[], z?: number[]}): string {\n  const {x, y = [], z = []} = dispatchLayout;\n\n  const outRank = outShape.length;\n  const rank = x.length + y.length + z.length;\n  // getOutputCoords is only meaningful when the output rank is same with\n  // dispatch layout rank.\n  if (rank !== outRank) {\n    return '';\n  }\n\n  if (x.length === outRank) {\n    const dtype = getCoordsDataType(outRank);\n    const snippet = `fn getOutputCoords() -> ${dtype}{\n    let globalIndex = getGlobalIndex();\n    return getCoordsFromIndex(globalIndex);\n  }\n  `;\n    return snippet;\n  }\n\n  let gatherDimensionsStr = '';\n  const dims = [x, y, z];\n\n  for (let i = 0; i < dims.length; i++) {\n    const arr = dims[i];\n\n    if (arr.length === 0) {\n      continue;\n    }\n\n    if (arr.length === 1) {\n      gatherDimensionsStr += `let d${arr[0]} = i32(globalId[${i}]);`;\n    } else {\n      const strides = symbolicallyComputeStrides(arr, 'uniforms.outShape');\n      gatherDimensionsStr += `var index${i} = i32(globalId[${i}]);`;\n      for (let j = 0; j < strides.length; j++) {\n        gatherDimensionsStr += `let d${arr[j]} = index${i} / ${strides[j]};`;\n\n        if (j === strides.length - 1) {\n          gatherDimensionsStr += `let d${arr[j + 1]} = ` +\n              `index${i} - d${arr[j]} * ${strides[j]};`;\n        } else {\n          gatherDimensionsStr +=\n              `index${i} = index${i} - d${arr[j]} * ${strides[j]};`;\n        }\n      }\n    }\n  }\n\n  const dimensions = [];\n  for (let i = 0; i < rank; i++) {\n    dimensions.push(`d${i}`);\n  }\n\n  const dtype = getCoordsDataType(rank);\n  let snippet = `fn getOutputCoords() -> ${dtype} {\n  ${gatherDimensionsStr}\n`;\n  if (dimensions.length === 0) {\n    snippet += `return ${dtype}(0); }`;\n  } else {\n    snippet += `return ${dtype}(${dimensions.join(',')}); }`;\n  }\n\n  return snippet;\n}\n\nfunction getOutputIndexFromCoordsSnippet(outRank: number) {\n  let snippet = '';\n  switch (outRank) {\n    case 0:\n    case 1:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : i32) -> i32 {\n          return coords;\n        }\n        `;\n      break;\n    case 2:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {\n          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));\n        }\n        `;\n      break;\n    case 3:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {\n          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));\n        }\n        `;\n      break;\n    case 4:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n          return dot(coords, vec4<i32>(\n            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));\n        }\n        `;\n      break;\n    case 5:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec5) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u;\n        }\n        `;\n      break;\n    case 6:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec6) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u * uniforms.outShapeStrides.u +\n              coords.v;\n        }\n        `;\n      break;\n    default:\n      util.assert(false, () => `Unsupported ${outRank}D shape`);\n      break;\n  }\n  return snippet;\n}\n\nfunction isFlatDispatch(program: WebGPUProgram): boolean {\n  return program.dispatch[1] === 1 && program.dispatch[2] === 1;\n}\n\nexport function dataTypeToGPUType(type: DataType, component = 1) {\n  if (type === 'float32') {\n    return typeSnippet(component, 'f32');\n  } else if (type === 'int32' || type === 'bool') {\n    return typeSnippet(component, 'i32');\n  }\n  throw new Error(`type ${type} is not supported.`);\n}\n\nfunction setOutputSnippet(\n    outShape: number[], outBufferType: DataType, component: number): string {\n  const outRank = outShape.length;\n  const gpuType = dataTypeToGPUType(outBufferType, component);\n  let snippet =\n      `fn setOutputAtIndex(flatIndex : i32, value : ${typeSnippet(component)}) {\n      result[flatIndex] = ${gpuType}(value);\n    }\n\n    fn setOutputAtIndexI32(flatIndex : i32, value : ${\n          typeSnippet(component, 'i32')}) {\n      result[flatIndex] = ${gpuType}(value);\n    }\n    `;\n  if (outRank >= 2) {\n    const dims = ['d0', 'd1', 'd2', 'd3', 'd4', 'd5'].slice(0, outRank);\n    const type = getCoordsDataType(outRank);\n\n    snippet += `\n      fn setOutputAtCoords(${dims.map(d => `${d} : i32`).join(', ')}, value : ${\n        typeSnippet(component)}) {\n        let flatIndex = getOutputIndexFromCoords(${type}(${dims.join(', ')}));\n        setOutputAtIndex(flatIndex${\n        component === 1 ? '' : ` / ${component}`}, value);\n      }\n      fn setOutputAtCoordsI32(${\n        dims.map(d => `${d} : i32`).join(', ')}, value : ${\n        typeSnippet(component, 'i32')}) {\n        let flatIndex = getOutputIndexFromCoords(${type}(${dims.join(', ')}));\n        setOutputAtIndexI32(flatIndex${\n        component === 1 ? '' : ` / ${component}`}, value);\n      }\n    `;\n  }\n\n  return snippet;\n}\n\nfunction insertAlignment(uniformShader: string) {\n  // insert alignment when current pattern is vec5 or vec6\n  const curInsertRe = /(\\w+)\\s*:\\s*vec(5|6)/g;\n  uniformShader = uniformShader.replace(curInsertRe, (match) => {\n    return '@align(16) ' + match;\n  });\n\n  // insert alignment when previous pattern is vec5 or vec6\n  const preInsertRe = /vec(5|6)\\s*,\\s*(\\w+)/g;\n  uniformShader = uniformShader.replace(preInsertRe, (_, p1, p2) => {\n    return `vec${p1}, @align(16) ${p2}`;\n  });\n  return uniformShader;\n}\nfunction isFlatDispatchLayout(program: WebGPUProgram): boolean {\n  if (program.dispatchLayout.hasOwnProperty('y') &&\n      program.dispatchLayout.y.length !== 0) {\n    return false;\n  }\n  if (program.dispatchLayout.hasOwnProperty('z') &&\n      program.dispatchLayout.z.length !== 0) {\n    return false;\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nconst arrayProduct = (arr: number[]) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\nexport function tilesFitEvenlyIntoShape(\n    tileSize: number[], shape: number[]): boolean {\n  if (tileSize.length !== shape.length) {\n    throw new Error(\n        `Cannot compute whether rank ${tileSize.length}` +\n        ` tiles fit evenly into rank ${shape.length} shape` +\n        ` - ranks must match.`);\n  }\n  return shape.every(\n      (dim: number, dimIdx: number) => dim % tileSize[dimIdx] === 0);\n}\n\n// Computes dispatch geometry based on layout of output dimensions and\n// workgroupSize.\nexport function computeDispatch(\n    layout: {x: number[], y?: number[], z?: number[]}, outputShape: number[],\n    workgroupSize: [number, number, number] = [1, 1, 1],\n    elementsPerThread: [number, number, number] =\n        [1, 1, 1]): [number, number, number] {\n  const [dispatchX, dispatchY, dispatchZ] = [\n    Math.ceil(\n        arrayProduct(layout.x.map(d => outputShape[d])) /\n        (workgroupSize[0] * elementsPerThread[0])),\n    layout.y ? Math.ceil(\n                   arrayProduct(layout.y.map(d => outputShape[d])) /\n                   (workgroupSize[1] * elementsPerThread[1])) :\n               1,\n    layout.z ? Math.ceil(\n                   arrayProduct(layout.z.map(d => outputShape[d])) /\n                   (workgroupSize[2] * elementsPerThread[2])) :\n               1\n  ];\n  return [dispatchX, dispatchY, dispatchZ];\n}\n\nexport type WorkgroupInfo = {\n  workgroupSize: [number, number, number],\n  elementsPerThread: [number, number, number],\n};\n\nexport function computeWorkgroupInfoForMatMul(\n    dimAOuter: number, dimInner: number, dimBOuter: number,\n    transposeA = false): WorkgroupInfo {\n  // These are experimental values. Usually, we need to adjust the work group\n  // size based on the input shapes to improve the EU occupancy.\n  // TODO: WebGPU limits the maximum allowed shared memory size as 16K. To make\n  // sure it doesn't exceed this limitations. Temporarily reduce the work group\n  // size to [8, 8, 1] and the work per thread size is [4, 4, 1]. But we should\n  // revisit it and find the balance between work group size and work per thread\n  // size.\n  const workgroupSize: [number, number, number] = [8, 8, 1];\n  const elementsPerThread: [number, number, number] = [4, 4, 1];\n\n  if (!transposeA) {\n    if (dimAOuter <= 8) {\n      elementsPerThread[1] = 1;\n    }\n\n    if (dimInner <= 16 && dimBOuter <= 16) {\n      workgroupSize[0] = 4;\n    }\n  }\n\n  return {workgroupSize, elementsPerThread};\n}\n\nexport function computeWorkgroupSizeForConv2d(\n    layout: {x: number[], y?: number[], z?: number[]}, outputShape: number[],\n    isVec4 = false): [number, number, number] {\n  if (isVec4) {\n    return [8, 8, 1];\n  }\n\n  const dim0 = arrayProduct(layout.x.map(d => outputShape[d]));\n  const dim1 = arrayProduct(layout.y.map(d => outputShape[d]));\n  // TODO(jiajia.qin@intel.com): More fine tune based on outputShape.\n  // These are experimental values. Usually, we need to adjust the work group\n  // size based on the output shape. For example, when one dimension is smaller\n  // than 4, it will be wasteful if we assign a larger size for this dimension,\n  // which results lots of threads doing useless work and reduces parallelism\n  // of hardware threads. But it is always a balance between work group size\n  // and shared memory. If one dimension is too small, such as 1, shared memory\n  // will won't be fully utilized.\n  if (dim0 <= 4) {\n    return [4, 16, 1];\n  }\n  if (dim1 <= 4) {\n    return [16, 4, 1];\n  }\n\n  return [16, 16, 1];\n}\n\nexport function computeWorkPerThreadForConv2d(\n    layout: {x: number[], y?: number[], z?: number[]}, outputShape: number[],\n    isVec4 = false): [number, number, number] {\n  if (isVec4) {\n    return [4, 4, 1];\n  }\n\n  const dim0 = arrayProduct(layout.x.map(d => outputShape[d]));\n  const dim1 = arrayProduct(layout.y.map(d => outputShape[d]));\n  // TODO(jiajia.qin@intel.com): More fine tune based on outputShape.\n  // The following conditions correspond to the values set in\n  // computeWorkgroupSizeForConv2d.\n  if (dim0 <= 4) {\n    return [1, 2, 1];\n  }\n  if (dim1 <= 4) {\n    return [2, 1, 1];\n  }\n\n  return [2, 2, 1];\n}\n\nexport function flatDispatchLayout(shape: number[]) {\n  return {x: shape.map((d, i) => i)};\n}\n\nexport function GPUBytesPerElement(dtype: DataType): number {\n  if (dtype === 'float32' || dtype === 'int32' || dtype === 'bool' ||\n      dtype === 'string') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\nexport function isWebGPUSupported(): boolean {\n  return ((typeof window !== 'undefined') ||\n          //@ts-ignore\n          (typeof WorkerGlobalScope !== 'undefined')) &&\n      !!navigator.gpu;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGPU backend.');\n    }\n  });\n}\n\nexport enum MatMulProgramType {\n  MatMulReduceProgram,\n  MatMulSplitKProgram,\n  MatMulSmallOutputSizeProgram,\n  MatMulPackedProgram,\n  MatMulMax\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport './flags_webgpu';\n\nimport {backend_util, BackendValues, buffer, DataStorage, DataType, engine, env, GPUData, KernelBackend, Rank, RecursiveArray, ShapeMap, Tensor, TensorBuffer, TensorInfo, TimingInfo, TypedArray, util, WebGPUData} from '@tensorflow/tfjs-core';\n\nimport {AdapterInfo} from './adapter_info';\nimport {BufferManager} from './buffer_manager';\nimport {TextureManager} from './texture_manager';\nimport * as webgpu_program from './webgpu_program';\nimport * as webgpu_util from './webgpu_util';\n\nexport interface WebGPUMemoryInfo extends backend_util.MemoryInfo {\n  numBytesInGPU: number;\n  numBytesAllocatedInGPU: number;\n  unreliable: boolean;\n}\n\ntype TensorData = {\n  values: BackendValues,\n  dtype: DataType,\n  shape: number[],\n  refCount: number,\n  resource?: GPUBuffer|GPUTexture|GPUExternalTexture,\n  // external is true means we use the resource provided by users directly\n  // (without a copy), so users should be responsible for its release.\n  external?: boolean,\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo}\n};\n\ninterface DataId {}\n\nexport type WebGPUKernelInfo = {\n  name: string,\n  query: Promise<number>,\n};\n\nexport type TimerNode = RecursiveArray<WebGPUKernelInfo>|WebGPUKernelInfo;\n\nexport interface WebGPUTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\ntype ProgramUniform = Array<{type: string; data: number[]}>;\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Reshape dispatch, not to exceed device limits.\nconst reshapeDispatch =\n    (device: GPUDevice,\n     program: webgpu_program.WebGPUProgram): [number, number, number] => {\n      const MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE =\n          device.limits.maxComputeWorkgroupsPerDimension;\n      const layout = program['dispatchLayout'];\n      const dispatch = program['dispatch'];\n      if (dispatch.every((d) => d <= MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE)) {\n        return dispatch;\n      }\n\n      util.assert(\n          dispatch[0] > MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE &&\n              layout.y === undefined && layout.z === undefined,\n          () => 'Dispatch size exceeds WebGPU limits in Y or Z dimension.');\n\n      let dispatchAverage = Math.ceil(Math.sqrt(dispatch[0]));\n      if (dispatchAverage > MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE) {\n        dispatchAverage = Math.ceil(Math.cbrt(dispatch[0]));\n        util.assert(\n            dispatchAverage <= MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE,\n            () => 'Total dispatch size exceeds WebGPU maximum.');\n        return [dispatchAverage, dispatchAverage, dispatchAverage];\n      } else {\n        return [dispatchAverage, dispatchAverage, 1];\n      }\n    };\n\nexport class WebGPUBackend extends KernelBackend {\n  bufferManager: BufferManager;\n  adapterInfo: AdapterInfo;\n  device: GPUDevice;\n  queue: GPUQueue;\n  tensorMap: DataStorage<TensorData>;\n  textureManager: TextureManager;\n  thresholdToIncreaseWorkgroups: number;\n\n  private activeTimers: TimerNode[];\n  private commandEncoder: GPUCommandEncoder;\n  private computePassEncoder: GPUComputePassEncoder;\n  private commandQueueOwnedIds = new WeakSet<DataId>();\n  private dispatchCountInPass = 0;\n  private disposed = false;\n  private downloadWaitMs = 0;\n  private dummyCanvas: HTMLCanvasElement;\n  private dummyContext: GPUCanvasContext;\n  private tensorDataPendingDisposal: DataId[] = [];\n  private static nextDataId = 0;\n  private pipelineCache:\n      {[key: string]: GPUComputePipeline|Promise<GPUComputePipeline>};\n  private programTimersStack: TimerNode[];\n  private queryResolveBuffer: GPUBuffer = null;\n  private querySet: GPUQuerySet = null;\n  private querySetCount = 2;\n  private stagingPendingDisposal: GPUBuffer[] = [];\n  private supportTimestampQuery: boolean;\n  private uniformPendingDisposal: GPUBuffer[] = [];\n  private uploadWaitMs = 0;\n  private hasReadSyncWarned = false;\n  private hasTimestampQueryWarned = false;\n\n  private nextDataId(): number {\n    return WebGPUBackend.nextDataId++;\n  }\n\n  constructor(device: GPUDevice, adapterInfo?: GPUAdapterInfo) {\n    super();\n    if (!webgpu_util.isWebGPUSupported()) {\n      throw new Error('WebGPU is not supported on this device');\n    }\n    this.pipelineCache = {};\n    this.device = device;\n    this.queue = device.queue;\n    this.commandEncoder = null;\n    this.computePassEncoder = null;\n    this.adapterInfo = new AdapterInfo(adapterInfo);\n    this.supportTimestampQuery = this.device.features.has('timestamp-query');\n    this.thresholdToIncreaseWorkgroups =\n        this.adapterInfo.intelGPUGeneration >= 12 ? 16 : 8;\n\n    this.bufferManager = new BufferManager(this.device);\n    this.textureManager = new TextureManager(this.device);\n    this.tensorMap = new DataStorage(this, engine());\n\n    // Profiling tools like PIX needs this dummy canvas to\n    // trigger capturing a frame.\n    if (env().getBool('WEBGPU_USE_PROFILE_TOOL')) {\n      this.dummyCanvas = document.createElement('canvas');\n      this.dummyCanvas.width = 1;\n      this.dummyCanvas.height = 1;\n\n      this.dummyContext = this.dummyCanvas.getContext('webgpu');\n      this.dummyContext.configure({\n        device,\n        format: 'bgra8unorm',\n      });\n\n      document.body.appendChild(this.dummyCanvas);\n    }\n  }\n\n  override floatPrecision(): 32 {\n    return 32;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or delayed in this backend, false if there are still\n   * references.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  override disposeData(dataId: DataId, force = false): boolean {\n    // No-op if already disposed.\n    if (!this.tensorMap.has(dataId)) {\n      return true;\n    }\n\n    const tensorData = this.tensorMap.get(dataId);\n    if (force) {\n      tensorData.refCount = 0;\n    } else {\n      tensorData.refCount--;\n    }\n\n    if (tensorData.refCount > 0) {\n      return false;\n    }\n\n    if (tensorData.complexTensorInfos != null) {\n      this.disposeData(tensorData.complexTensorInfos.real.dataId);\n      this.disposeData(tensorData.complexTensorInfos.imag.dataId);\n    }\n\n    if (this.commandQueueOwnedIds.has(dataId)) {\n      this.tensorDataPendingDisposal.push(dataId);\n      return true;\n    }\n\n    this.releaseResource(dataId);\n    this.tensorMap.delete(dataId);\n\n    return true;\n  }\n\n  override memory(): WebGPUMemoryInfo {\n    return {\n      numBytesInGPU: this.bufferManager.numBytesUsed,\n      numBytesAllocatedInGPU: this.bufferManager.numBytesAllocated,\n      unreliable: false\n    } as WebGPUMemoryInfo;\n  }\n\n  private releaseResource(dataId: DataId) {\n    const tensorData = this.tensorMap.get(dataId);\n    if (!tensorData || !tensorData.resource) {\n      return;\n    }\n\n    // If tensor's resource is from external, do not release.\n    if (tensorData.external) {\n      tensorData.resource = null;\n      return;\n    }\n    if (tensorData.resource instanceof GPUBuffer) {\n      this.bufferManager.releaseBuffer(tensorData.resource);\n    } else if (tensorData.resource instanceof GPUTexture) {\n      this.textureManager.releaseTexture(tensorData.resource);\n    }\n    tensorData.resource = null;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  override refCount(dataId: DataId): number {\n    if (this.tensorMap.has(dataId)) {\n      const tensorData = this.tensorMap.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  override incRef(dataId: DataId): void {\n    const tensorData = this.tensorMap.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.tensorMap.has(dataId)) {\n      const tensorData = this.tensorMap.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  override write(values: BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.tensorMap.set(dataId, {dtype, shape, values, refCount: 1});\n    return dataId;\n  }\n\n  override move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.tensorMap.set(dataId, {dtype, shape, values, refCount});\n  }\n\n  submitQueue() {\n    this.queue.submit([this.commandEncoder.finish()]);\n    this.commandEncoder = null;\n    this.dispatchCountInPass = 0;\n\n    this.commandQueueOwnedIds = new WeakSet<DataId>();\n\n    this.tensorDataPendingDisposal.forEach(d => {\n      this.releaseResource(d);\n      this.tensorMap.delete(d);\n    });\n\n    this.uniformPendingDisposal.forEach(\n        b => this.bufferManager.releaseBuffer(b));\n    this.stagingPendingDisposal.forEach(\n        b => this.bufferManager.releaseBuffer(b, false));\n\n    this.tensorDataPendingDisposal = [];\n    this.uniformPendingDisposal = [];\n    this.stagingPendingDisposal = [];\n  }\n\n  ensureCommandEncoderReady() {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n  }\n\n  endComputePassEncoder() {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  // Check if parallel compilation is done.\n  async checkCompileCompletionAsync() {\n    let pipelines: GPUComputePipeline[];\n    try {\n      pipelines = await Promise.all(Object.values(this.pipelineCache));\n    } catch (e) {\n      // TODO: Add test case to catch this exception.\n      throw new Error(e.message);\n    }\n    Object.keys(this.pipelineCache).map((key, i) => {\n      this.pipelineCache[key] = pipelines[i];\n    });\n  }\n\n  public async getBufferData(buffer: GPUBuffer): Promise<ArrayBuffer> {\n    if (env().getBool('WEBGPU_ENGINE_COMPILE_ONLY')) {\n      console.warn(\n          'The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false');\n      return null;\n    }\n    const size = buffer.size;\n    const stagingBuffer = this.bufferManager.acquireBuffer(\n        size, GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ);\n    this.ensureCommandEncoderReady();\n    this.endComputePassEncoder();\n    this.commandEncoder.copyBufferToBuffer(buffer, 0, stagingBuffer, 0, size);\n    this.submitQueue();\n\n    await stagingBuffer.mapAsync(GPUMapMode.READ);\n    const values = stagingBuffer.getMappedRange().slice(0);\n\n    stagingBuffer.unmap();\n    if (stagingBuffer != null) {\n      this.bufferManager.releaseBuffer(stagingBuffer);\n    }\n\n    // Need to get texture from swapChain to enable profiling tool\n    // to capture a frame\n    if (env().getBool('WEBGPU_USE_PROFILE_TOOL')) {\n      util.assert(\n          this.dummyContext !== undefined,\n          () => `Fail to get context for profiling tool`);\n      this.dummyContext.getCurrentTexture();\n    }\n\n    return values;\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, data: BackendValues):\n      BackendValues {\n    const tensorData = this.tensorMap.get(dataId);\n    tensorData.values = data;\n    return tensorData.values;\n  }\n\n  override readSync(dataId: object): BackendValues {\n    const tensorData = this.tensorMap.get(dataId);\n    const {values, complexTensorInfos} = tensorData;\n\n    if (values != null || tensorData.dtype === 'string') {\n      return values;\n    }\n\n    if (tensorData.dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      const complexVals = util.convertBackendValuesAndArrayBuffer(\n          backend_util.mergeRealAndImagArrays(realValues, imagValues).buffer,\n          'float32');\n      this.convertAndCacheOnCPU(dataId, complexVals);\n      return complexVals;\n    }\n\n    if (!this.hasReadSyncWarned) {\n      this.hasReadSyncWarned = true;\n      console.warn(\n          `The performance of synchronously reading data from GPU to CPU is ` +\n          `poor on the webgpu backend, please use asynchronous APIs instead.`);\n    }\n\n    const alphaModes: GPUCanvasAlphaMode[] = ['opaque', 'premultiplied'];\n\n    const buffer = tensorData.resource as GPUBuffer;\n    const bufferSize = buffer.size;\n    util.assert(\n        bufferSize % 4 === 0,\n        () => 'Because there is 4 bytes for ' +\n            'one pixel, buffer size must be multiple of 4.');\n    const pixelsSize = bufferSize / 4;\n    const valsGPU = new ArrayBuffer(bufferSize);\n    // TODO: adjust the reading window size according the `bufferSize`.\n    const canvasWidth = 256, canvasHeight = 256;\n    const stagingDeviceStorage: OffscreenCanvas[] =\n        alphaModes.map(_ => new OffscreenCanvas(canvasWidth, canvasHeight));\n    const stagingHostStorage = new OffscreenCanvas(canvasWidth, canvasHeight);\n\n    this.endComputePassEncoder();\n    stagingDeviceStorage\n        .map((storage, index) => {\n          const context = storage.getContext('webgpu');\n          // TODO: use rgba8unorm format when this format is supported on Mac.\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1298618\n          context.configure({\n            device: this.device,\n            format: 'bgra8unorm',\n            usage: GPUTextureUsage.COPY_DST,\n            alphaMode: alphaModes[index],\n          });\n          return context.getCurrentTexture();\n        })\n        .map((texture, index) => {\n          const bytesPerRow = canvasWidth * 4;\n          const readDataGPUToCPU =\n              (width: number, height: number, offset: number) => {\n                this.ensureCommandEncoderReady();\n                this.commandEncoder.copyBufferToTexture(\n                    {\n                      buffer,\n                      bytesPerRow,\n                      offset,\n                    },\n                    {\n                      texture,\n                    },\n                    {\n                      width,\n                      height,\n                    });\n                this.submitQueue();\n\n                const context = stagingHostStorage.getContext('2d', {\n                  willReadFrequently: true,\n                });\n                context.clearRect(0, 0, width, height);\n                context.drawImage(stagingDeviceStorage[index], 0, 0);\n                const stagingValues =\n                    context.getImageData(0, 0, width, height).data;\n                const alphaMode = alphaModes[index];\n                const span =\n                    new Uint8ClampedArray(valsGPU, offset, width * height * 4);\n                for (let k = 0; k < span.length; k += 4) {\n                  if (alphaMode === 'premultiplied') {\n                    span[k + 3] = stagingValues[k + 3];\n                  } else {\n                    const value = stagingValues[k];\n                    span[k] = stagingValues[k + 2];\n                    span[k + 1] = stagingValues[k + 1];\n                    span[k + 2] = value;\n                  }\n                }\n              };\n\n          const fullyReadCount =\n              Math.floor(pixelsSize / (canvasWidth * canvasHeight));\n          let width = canvasWidth, height = canvasHeight, offset = 0;\n          for (let i = 0; i < fullyReadCount; i++) {\n            // Read the buffer data, which fully fill the whole canvas.\n            readDataGPUToCPU(width, height, offset);\n            offset += canvasWidth * canvasHeight * 4;\n          }\n\n          const remainSize = pixelsSize % (canvasWidth * canvasHeight);\n          height = Math.floor(remainSize / canvasWidth);\n          if (height > 0) {\n            // Read the buffer data, which fully fill certain rows of canvas.\n            readDataGPUToCPU(width, height, offset);\n            offset += height * (canvasWidth * 4);\n          }\n\n          width = remainSize % canvasWidth;\n          if (width > 0) {\n            // Read the buffer data, which not fully fill one row of canvas.\n            readDataGPUToCPU(width, 1, offset);\n          }\n        });\n\n    const vals =\n        util.convertBackendValuesAndArrayBuffer(valsGPU, tensorData.dtype);\n    this.convertAndCacheOnCPU(dataId, vals);\n    return vals;\n  }\n\n  override async read(dataId: object): Promise<BackendValues> {\n    if (!this.tensorMap.has(dataId)) {\n      throw new Error(`Tensor ${dataId} was not registered!`);\n    }\n    const tensorData = this.tensorMap.get(dataId);\n\n    const {values} = tensorData;\n\n    if (values != null) {\n      return values;\n    }\n\n    // Download the values from the GPU.\n    let vals: BackendValues;\n    if (tensorData.dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(tensorData.complexTensorInfos.real.dataId),\n        this.read(tensorData.complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else {\n      const data = await this.getBufferData(tensorData.resource as GPUBuffer);\n      vals = util.convertBackendValuesAndArrayBuffer(data, tensorData.dtype);\n    }\n    this.convertAndCacheOnCPU(dataId, vals);\n    return vals;\n  }\n\n  // The source GPUBuffer and destination GPUBuffer have the same size and\n  // usage.\n  private copyBuffer(srcBuffer: GPUBuffer) {\n    const size = srcBuffer.size;\n    const usage = srcBuffer.usage;\n    const dstBuffer = this.bufferManager.acquireBuffer(size, usage);\n    this.ensureCommandEncoderReady();\n    this.endComputePassEncoder();\n    this.commandEncoder.copyBufferToBuffer(srcBuffer, 0, dstBuffer, 0, size);\n    this.submitQueue();\n    return dstBuffer;\n  }\n\n  /**\n   * Create a TF.js tensor out of an existing WebGPU buffer.\n   */\n  override createTensorFromGPUData(\n      webGPUData: WebGPUData, shape: number[], dtype: DataType): Tensor {\n    let buffer = webGPUData.buffer;\n    if (dtype === 'complex64') {\n      throw new Error(`Cannot write to a complex64 dtype. `);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.tensorMap.set(dataId, {\n      dtype,\n      shape,\n      values: null,\n      refCount: 1,\n      external: webGPUData.zeroCopy\n    });\n    const tensorData = this.tensorMap.get(dataId);\n    const size = webgpu_util.GPUBytesPerElement(tensorData.dtype) *\n        util.sizeFromShape(tensorData.shape);\n    if (webGPUData.buffer.size < size) {\n      throw new Error(`GPUBuffer size(${\n          webGPUData.buffer.size}) is smaller than tensor size(${size})!`);\n    } else if (\n        (webGPUData.buffer.usage &\n         (GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC)) !==\n        (GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC)) {\n      throw new Error(\n          'GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!');\n    }\n\n    // Do buffer copy by default.\n    if (webGPUData.zeroCopy !== true) {\n      buffer = this.copyBuffer(buffer);\n    }\n    tensorData.resource = buffer;\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n  }\n\n  /**\n   * Read tensor to a new GPUBuffer.\n   * @param dataId The source tensor.\n   */\n  override readToGPU(dataId: DataId): GPUData {\n    const srcTensorData = this.tensorMap.get(dataId);\n    const {values, dtype, shape, resource} = srcTensorData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading buffer for complex64 dtype.');\n    }\n\n    if (resource == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    const srcBuffer = resource as GPUBuffer;\n    const size = srcBuffer.size;\n    const usage = srcBuffer.usage;\n    const buffer = this.bufferManager.acquireBuffer(size, usage);\n    this.ensureCommandEncoderReady();\n    this.endComputePassEncoder();\n    this.commandEncoder.copyBufferToBuffer(\n        resource as GPUBuffer, 0, buffer, 0, size);\n    this.submitQueue();\n\n    const tensorInfo = this.makeTensorInfo(shape, dtype);\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tensorInfo);\n\n    const tensorData = this.tensorMap.get(tensorInfo.dataId);\n    tensorData.resource = buffer;\n\n    return {tensorRef, buffer};\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  override async time(f: () => void): Promise<WebGPUTimingInfo> {\n    if (!this.supportTimestampQuery && !this.hasTimestampQueryWarned) {\n      console.warn(\n          `This device doesn't support timestamp-query extension. ` +\n          `Start Chrome browser with flag ` +\n          `--disable-dawn-features=disallow_unsafe_apis to try it again. ` +\n          `Otherwise, zero will be shown for the kernel time when profiling ` +\n          `mode is enabled.`);\n      this.hasTimestampQueryWarned = true;\n    }\n\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: WebGPUKernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: WebGPUKernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n    const res: WebGPUTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null\n    };\n\n    const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n    res['kernelMs'] = util.sum(kernelMs);\n    res['getExtraProfileInfo'] = () =>\n        kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n            .map(d => `${d.name}: ${d.ms}`)\n            .join(', ');\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      values = (values as unknown as string[]).map(d => util.encodeString(d));\n    }\n    const dataId = this.write(values as BackendValues, shape, dtype);\n    return {dataId, shape, dtype};\n  }\n\n  private tensorToBinding(tensor?: TensorInfo): GPUBindingResource {\n    if (!tensor) {\n      return null;\n    }\n\n    const tensorData = this.tensorMap.get(tensor.dataId);\n    const resource = tensorData.resource;\n\n    if (resource instanceof GPUBuffer) {\n      return {buffer: resource};\n    }\n    if (resource instanceof GPUTexture) {\n      return resource.createView();\n    }\n    // GPUExternalTexture\n    return resource;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const tensorData = this.tensorMap.get(dataId);\n    // Already on the GPU.\n    if (tensorData.resource != null) {\n      return;\n    }\n\n    const size = webgpu_util.GPUBytesPerElement(tensorData.dtype) *\n        util.sizeFromShape(tensorData.shape);\n    let buffer;\n    const usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC |\n        GPUBufferUsage.COPY_DST;\n    if (tensorData.values) {\n      buffer = this.bufferManager.acquireBuffer(size, usage, true);\n      if (buffer.mapState === 'unmapped') {\n        const stagingBuffer = this.bufferManager.acquireBuffer(\n            size, GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC, true,\n            false);\n        const arrayBuffer = stagingBuffer.getMappedRange();\n        if (tensorData.dtype === 'int32' || tensorData.dtype === 'bool') {\n          new Int32Array(arrayBuffer).set(tensorData.values as TypedArray);\n        } else {\n          new Float32Array(arrayBuffer).set(tensorData.values as Float32Array);\n        }\n        stagingBuffer.unmap();\n        this.ensureCommandEncoderReady();\n        this.endComputePassEncoder();\n        this.commandEncoder.copyBufferToBuffer(\n            stagingBuffer, 0, buffer, 0, size);\n\n        this.stagingPendingDisposal.push(stagingBuffer);\n      } else {\n        const arrayBuffer = buffer.getMappedRange();\n        if (tensorData.dtype === 'int32' || tensorData.dtype === 'bool') {\n          new Int32Array(arrayBuffer).set(tensorData.values as TypedArray);\n        } else {\n          new Float32Array(arrayBuffer).set(tensorData.values as Float32Array);\n        }\n        buffer.unmap();\n      }\n\n      // Once uploaded, don't store the values on cpu.\n      tensorData.values = null;\n    } else {\n      buffer = this.bufferManager.acquireBuffer(size, usage);\n    }\n    tensorData.resource = buffer;\n  }\n\n  private makeUniforms(programUniform: ProgramUniform): GPUBindingResource {\n    let currentOffset = 0;\n    let preLength = 0;\n    const offsets: number[] = [];\n    let maxAlignmentOfField = 1;\n    programUniform.forEach((d) => {\n      if (d.data.length === 0) {\n        d.data = [1];\n      }\n      // https://www.w3.org/TR/WGSL/#alignof\n      let baseAlignment: number;\n      switch (d.data.length) {\n        case 1:\n          baseAlignment = 4;\n          break;\n        case 2:\n          baseAlignment = 8;\n          break;\n        case 3:\n          baseAlignment = 16;\n          break;\n        case 4:\n          baseAlignment = 16;\n          break;\n        case 5:\n          baseAlignment = 16;\n          break;\n        case 6:\n          baseAlignment = 16;\n          break;\n        default:\n          util.assert(false, () => `Unsupported ${d.data.length}D shape`);\n      }\n\n      if (preLength === 5 || preLength === 6) {\n        baseAlignment = 16;\n      }\n      if (baseAlignment > maxAlignmentOfField) {\n        maxAlignmentOfField = baseAlignment;\n      }\n      currentOffset = Math.ceil(currentOffset / baseAlignment) * baseAlignment;\n      preLength = d.data.length;\n      offsets.push(currentOffset);\n      currentOffset += d.data.length * 4;\n    });\n\n    currentOffset =\n        Math.ceil(currentOffset / maxAlignmentOfField) * maxAlignmentOfField;\n    const arrayBuffer = new ArrayBuffer(currentOffset);\n    programUniform.forEach((d, i) => {\n      const offset = offsets[i];\n      if (d.type === 'int32') {\n        new Int32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      } else if (d.type === 'uint32') {\n        new Uint32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      } else {\n        new Float32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      }\n    });\n\n    const uniformBuffer = this.bufferManager.acquireBuffer(\n        currentOffset, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\n    this.queue.writeBuffer(uniformBuffer, 0, arrayBuffer, 0, currentOffset);\n    this.uniformPendingDisposal.push(uniformBuffer);\n\n    return {offset: 0, size: currentOffset, buffer: uniformBuffer};\n  }\n\n  public runWebGPUProgram(\n      program: webgpu_program.WebGPUProgram, inputs: TensorInfo[],\n      outputDtype: DataType, programDefinedUniform?: ProgramUniform,\n      output?: TensorInfo): TensorInfo {\n    if (!output) {\n      output = this.makeTensorInfo(program.outputShape, outputDtype);\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      this.tensorMap.get(output.dataId).values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n    this.uploadToGPU(output.dataId);\n    program.dispatch = reshapeDispatch(this.device, program);\n\n    const inputsData = inputs.map((input: TensorInfo, i: number) => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n      this.uploadToGPU(input.dataId);\n\n      return {\n        // Returning dtype from tensorMap because it reflects dtype\n        // of underlying buffer, rather than abstract dtype.\n        dtype: this.tensorMap.get(input.dataId).dtype,\n        shape: input.shape,\n        name: program.variableNames[i]\n      };\n    });\n\n    program.shaderKey =\n        webgpu_program.makeShaderKey(program, inputsData, output);\n\n    const parallelCompilation = env().getBool('WEBGPU_ENGINE_COMPILE_ONLY');\n    if (!(program.shaderKey in this.pipelineCache)) {\n      this.pipelineCache[program.shaderKey] = webgpu_program.compileProgram(\n          this.device, program, inputsData, output, parallelCompilation);\n    }\n    program.pipeline = this.pipelineCache[program.shaderKey];\n\n    if (!parallelCompilation) {\n      this.recordAndSubmit(program, output, inputs, programDefinedUniform);\n    }\n    return output;\n  }\n\n  private recordAndSubmit(\n      program: webgpu_program.WebGPUProgram, output: TensorInfo,\n      inputs: TensorInfo[], programDefinedUniform?: ProgramUniform) {\n    if (program.pipeline instanceof Promise) {\n      throw new Error(\n          'Please call checkCompileCompletionAsync to ensure parallel compilation is done!');\n    }\n    // There are six kinds of uniforms: NAN, INFINITY, shapes, shape strides,\n    // program size, program defined uniforms.\n    let programUniform: ProgramUniform = [];\n    let bufferShapes: number[][] = [];\n    const uniformsType = 'int32';\n    if (program.pixelsOpType == null) {\n      programUniform.push(\n          {type: 'float32', data: [NaN]}, {type: 'float32', data: [Infinity]});\n      bufferShapes = inputs.concat(output).map(d => d.shape);\n      const uniformsType = 'int32';\n      bufferShapes.map(d => {\n        programUniform.push({type: uniformsType, data: d});\n        const strides = util.computeStrides(d);\n        programUniform.push({type: uniformsType, data: strides});\n      });\n    } else {\n      const strides = util.computeStrides(output.shape);\n      programUniform.push({type: uniformsType, data: strides});\n    }\n    if (program.size) {\n      const size = util.sizeFromShape(program.outputShape);\n      programUniform.push({\n        type: uniformsType,\n        data: [program.outputComponent ? size / program.outputComponent : size]\n      });\n    }\n\n    if (programDefinedUniform) {\n      programUniform = [...programUniform, ...programDefinedUniform];\n    }\n    const bindings = [\n      this.tensorToBinding(output), ...inputs.map(t => this.tensorToBinding(t)),\n      this.makeUniforms(programUniform)\n    ];\n\n    inputs.forEach(input => {\n      this.commandQueueOwnedIds.add(input.dataId);\n    });\n    this.commandQueueOwnedIds.add(output.dataId);\n\n    const bindGroup = this.device.createBindGroup({\n      layout: program.pipeline.getBindGroupLayout(0),\n      entries: bindings.map((b, i) => ({binding: i, resource: b})),\n    });\n\n    const shouldTimeProgram = this.activeTimers != null;\n    this.ensureCommandEncoderReady();\n\n    const computePassDescriptor: GPUComputePassDescriptor = {};\n    if (shouldTimeProgram && this.supportTimestampQuery) {\n      this.endComputePassEncoder();\n      if (this.querySet == null) {\n        this.querySet = this.device.createQuerySet({\n          type: 'timestamp',\n          count: this.querySetCount,\n        });\n      }\n      computePassDescriptor.timestampWrites = [\n        {\n          querySet: this.querySet,\n          queryIndex: 0,\n          location: 'beginning',\n        },\n        {\n          querySet: this.querySet,\n          queryIndex: 1,\n          location: 'end',\n        }\n      ];\n      this.computePassEncoder =\n          this.commandEncoder.beginComputePass(computePassDescriptor);\n    } else if (!this.computePassEncoder) {\n      this.computePassEncoder =\n          this.commandEncoder.beginComputePass(computePassDescriptor);\n    }\n\n    this.computePassEncoder.setPipeline(program.pipeline);\n    this.computePassEncoder.setBindGroup(0, bindGroup);\n    this.computePassEncoder.dispatchWorkgroups(\n        program.dispatch[0], program.dispatch[1], program.dispatch[2]);\n    this.dispatchCountInPass++;\n\n    if (shouldTimeProgram ||\n        env().get('WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE') as\n            number <= this.dispatchCountInPass ||\n        program.pixelsOpType === webgpu_program.PixelsOpType.DRAW) {\n      this.endComputePassEncoder();\n      if (shouldTimeProgram) {\n        this.activeTimers.push(\n            {name: program.constructor.name, query: this.getQueryTime()});\n      } else {\n        this.submitQueue();\n      }\n    }\n  }\n\n  async getQueryTime(): Promise<number> {\n    if (!this.supportTimestampQuery) {\n      return 0;\n    }\n\n    if (this.queryResolveBuffer == null) {\n      this.queryResolveBuffer = this.bufferManager.acquireBuffer(\n          this.querySetCount * 8,\n          GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST |\n              GPUBufferUsage.QUERY_RESOLVE);\n    }\n    this.commandEncoder.resolveQuerySet(\n        this.querySet, 0, this.querySetCount, this.queryResolveBuffer, 0);\n\n    const queryStagingBuffer = this.bufferManager.acquireBuffer(\n        this.querySetCount * 8,\n        GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n    this.commandEncoder.copyBufferToBuffer(\n        this.queryResolveBuffer, 0, queryStagingBuffer, 0,\n        this.querySetCount * 8);\n\n    this.submitQueue();\n\n    await queryStagingBuffer.mapAsync(GPUMapMode.READ);\n    const arrayBuffer = new BigUint64Array(queryStagingBuffer.getMappedRange());\n    const time = Number(arrayBuffer[1] - arrayBuffer[0]) / 1000000;\n    queryStagingBuffer.unmap();\n    this.bufferManager.releaseBuffer(queryStagingBuffer);\n    return time;\n  }\n\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGPU_CPU_FORWARD') &&\n        inputs.every(\n            input => this.tensorMap.get(input.dataId).resource == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  override numDataIds() {\n    return this.tensorMap.numDataIds() - this.tensorDataPendingDisposal.length;\n  }\n\n  override dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.querySet != null) {\n      this.querySet.destroy();\n    }\n    this.bufferManager.dispose();\n    this.textureManager.dispose();\n    this.disposed = true;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport './flags_webgpu';\n\nimport {env, registerBackend} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from './backend_webgpu';\nimport {isWebGPUSupported} from './webgpu_util';\n\nif (isWebGPUSupported()) {\n  registerBackend('webgpu', async () => {\n    const gpuDescriptor: GPURequestAdapterOptions = {\n      powerPreference: env().get('WEBGPU_USE_LOW_POWER_GPU') ?\n          'low-power' :\n          'high-performance'\n    };\n\n    const adapter = await navigator.gpu.requestAdapter(gpuDescriptor);\n    const deviceDescriptor: GPUDeviceDescriptor = {};\n\n    const requiredFeatures = [];\n    if (adapter.features.has('timestamp-query')) {\n      requiredFeatures.push('timestamp-query');\n    }\n    if (adapter.features.has('bgra8unorm-storage')) {\n      requiredFeatures.push(['bgra8unorm-storage']);\n    }\n    deviceDescriptor.requiredFeatures =\n        requiredFeatures as Iterable<GPUFeatureName>;\n\n    const adapterLimits = adapter.limits;\n    deviceDescriptor.requiredLimits = {\n      'maxComputeWorkgroupStorageSize':\n          adapterLimits.maxComputeWorkgroupStorageSize,\n      'maxComputeWorkgroupsPerDimension':\n          adapterLimits.maxComputeWorkgroupsPerDimension,\n      'maxStorageBufferBindingSize': adapterLimits.maxStorageBufferBindingSize,\n      'maxBufferSize': adapterLimits.maxBufferSize,\n      'maxComputeWorkgroupSizeX': adapterLimits.maxComputeWorkgroupSizeX,\n      'maxComputeInvocationsPerWorkgroup':\n          adapterLimits.maxComputeInvocationsPerWorkgroup,\n    };\n\n    const device: GPUDevice = await adapter.requestDevice(deviceDescriptor);\n    const adapterInfo = await adapter.requestAdapterInfo();\n    return new WebGPUBackend(device, adapterInfo);\n  }, 3 /*priority*/);\n}\n\n// Export webgpu utilities\nexport * from './webgpu';\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport enum BinaryOpType {\n  ADD,\n  ATAN2,\n  COMPLEX_MULTIPLY_IMAG,\n  COMPLEX_MULTIPLY_REAL,\n  DIV,\n  ELU_DER,\n  EQUAL,\n  FLOOR_DIV,\n  GREATER,\n  GREATER_EQUAL,\n  LESS,\n  LESS_EQUAL,\n  LOGICAL_AND,\n  LOGICAL_OR,\n  MAX,\n  MIN,\n  MOD,\n  MUL,\n  NOT_EQUAL,\n  POW,\n  PRELU,\n  SQUARED_DIFFERENCE,\n  SUB\n}\n\nconst ADD = 'let resultTemp = a + b;';\nconst ATAN2 = 'let resultTemp = atan2(a, b);';\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nconst COMPLEX_MULTIPLY_REAL = 'let resultTemp = areal * breal - aimag * bimag;';\nconst COMPLEX_MULTIPLY_IMAG = 'let resultTemp = areal * bimag + aimag * breal;';\nconst DIV = 'let resultTemp = a / b;';\nconst ELU_DER = 'let resultTemp = select(a * (b + 1.0), a, b >= b - b);';\nconst EQUAL = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a == b);\n`;\nconst FLOOR_DIV = `\n  let remainder =\n      select(a % b, round(a % b), (round(a) == a) & (round(b) == b));\n  let quotient = (a - remainder) / b;\n  let resultTemp =\n      round(select(quotient, quotient - 1, sign(remainder) == -sign(b)));\n`;\nconst GREATER = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a > b);\n`;\nconst GREATER_EQUAL = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a >= b);\n`;\nconst LESS = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a < b);\n`;\nconst LESS_EQUAL = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a <= b);\n`;\nconst LOGICAL_AND = 'return f32(a >= 1.0 && b >= 1.0);';\nconst LOGICAL_AND_VEC4 = `return (vec4<f32>(a >= vec4<f32>(1.0)) *\n  vec4<f32>(b >= vec4<f32>(1.0)));`;\nconst LOGICAL_OR = 'return f32(a >= 1.0 || b >= 1.0);';\nconst LOGICAL_OR_VEC4 = `return min(vec4<f32>(a >= vec4<f32>(1.0)) +\n  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));`;\nconst MAX = 'let resultTemp = max(a, b);';\nconst MIN = 'let resultTemp = min(a, b);';\nconst MOD = `\n  let isNaN = b == 0.;\n  var resultTemp = a % b;\n  resultTemp = select((resultTemp + b) % b, resultTemp,\n      (a < 0. && b < 0.) || (a >= 0. && b > 0.));\n`;\nconst MOD_VEC4 = `\n  let isNaN = !vec4<bool>(b);\n  var resultTemp = vec4<f32>(a % b);\n  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {\n    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];\n  }\n  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {\n    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];\n  }\n  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {\n    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];\n  }\n  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {\n    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];\n  }\n`;\nconst MUL = 'let resultTemp = a * b;';\nconst NOT_EQUAL = `\n  var resultTemp = f32(a != b);\n  let valueForNaN = 1.0;\n`;\nconst NOT_EQUAL_VEC4 = `\n  var resultTemp = vec4<f32>(a != b);\n  let valueForNaN = 1.0;\n`;\n\nconst POW = `\n  let isNaN = a < 0.0 && floor(b) < b;\n  if (b == 0.0) {\n    return 1.0;\n  }\n  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),\n      round(abs(b) % 2.0) != 1.0);\n`;\nconst POW_VEC4 = `\n  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);\n  let isModRound1 = vec4<f32>(isModRound1Bool);\n  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);\n  var resultTemp = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  let isExpZero = b == vec4<f32>(0.0);\n  if (isExpZero.r) {\n    resultTemp.r = 1.0;\n  }\n  if (isExpZero.g) {\n    resultTemp.g = 1.0;\n  }\n  if (isExpZero.b) {\n    resultTemp.b = 1.0;\n  }\n  if (isExpZero.a) {\n    resultTemp.a = 1.0;\n  }\n  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);\n`;\n\nconst PRELU = `if (a < 0.0) { return b * a; }  return a;`;\nconst PRELU_VEC4 = `\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n`;\nconst SQUARED_DIFFERENCE = 'let resultTemp = (a - b) * (a - b);';\nconst SUB = 'let resultTemp = a - b;';\n\nexport function getBinaryOpString(\n    type: BinaryOpType, useVec4?: boolean): string {\n  let doOpSnippet: string;\n\n  // Ops with NaN check\n  do {\n    switch (type) {\n      case BinaryOpType.ATAN2:\n        doOpSnippet = ATAN2;\n        break;\n      case BinaryOpType.MAX:\n        doOpSnippet = MAX;\n        break;\n      case BinaryOpType.MIN:\n        doOpSnippet = MIN;\n        break;\n      case BinaryOpType.MOD:\n        doOpSnippet = useVec4 ? MOD_VEC4 : MOD;\n        break;\n      case BinaryOpType.NOT_EQUAL:\n        doOpSnippet = useVec4 ? NOT_EQUAL_VEC4 : NOT_EQUAL;\n        break;\n      case BinaryOpType.POW:\n        doOpSnippet = useVec4 ? POW_VEC4 : POW;\n        break;\n      default:\n        continue;\n    }\n\n    let isNaN: string;\n    let dTypeN: string;\n    let boolN: string;\n    if (useVec4) {\n      isNaN = 'isnanVec4';\n      dTypeN = 'vec4<f32>';\n      boolN = 'vec4<bool>';\n    } else {\n      isNaN = 'isnan';\n      dTypeN = 'f32';\n      boolN = 'bool';\n    }\n\n    return `\n      let aIsNaN = ${isNaN}(a);\n      let aPostLegalization = select(a, ${dTypeN}(42), aIsNaN);\n      let bIsNaN = ${isNaN}(b);\n      let bPostLegalization = select(b, ${dTypeN}(42), bIsNaN);\n      let isNaN = false;\n      let valueForNaN = uniforms.NAN;\n      {\n        let a = aPostLegalization;\n        let b = bPostLegalization;\n        ${doOpSnippet}\n        return select(\n            resultTemp, ${dTypeN}(valueForNaN),\n            ${boolN}(isNaN) | aIsNaN | bIsNaN);\n      }\n    `;\n  } while (false);\n\n  // Ops without NaN check\n  switch (type) {\n    case BinaryOpType.ADD:\n      doOpSnippet = ADD;\n      break;\n    case BinaryOpType.COMPLEX_MULTIPLY_IMAG:\n      doOpSnippet = COMPLEX_MULTIPLY_IMAG;\n      break;\n    case BinaryOpType.COMPLEX_MULTIPLY_REAL:\n      doOpSnippet = COMPLEX_MULTIPLY_REAL;\n      break;\n    case BinaryOpType.DIV:\n      doOpSnippet = DIV;\n      break;\n    case BinaryOpType.ELU_DER:\n      doOpSnippet = ELU_DER;\n      break;\n    case BinaryOpType.EQUAL:\n      doOpSnippet = EQUAL;\n      break;\n    case BinaryOpType.FLOOR_DIV:\n      doOpSnippet = FLOOR_DIV;\n      break;\n    case BinaryOpType.GREATER:\n      doOpSnippet = GREATER;\n      break;\n    case BinaryOpType.GREATER_EQUAL:\n      doOpSnippet = GREATER_EQUAL;\n      break;\n    case BinaryOpType.LESS:\n      doOpSnippet = LESS;\n      break;\n    case BinaryOpType.LESS_EQUAL:\n      doOpSnippet = LESS_EQUAL;\n      break;\n    case BinaryOpType.LOGICAL_AND:\n      return useVec4 ? LOGICAL_AND_VEC4 : LOGICAL_AND;\n    case BinaryOpType.LOGICAL_OR:\n      return useVec4 ? LOGICAL_OR_VEC4 : LOGICAL_OR;\n    case BinaryOpType.MUL:\n      doOpSnippet = MUL;\n      break;\n    case BinaryOpType.PRELU:\n      return useVec4 ? PRELU_VEC4 : PRELU;\n    case BinaryOpType.SQUARED_DIFFERENCE:\n      doOpSnippet = SQUARED_DIFFERENCE;\n      break;\n    case BinaryOpType.SUB:\n      doOpSnippet = SUB;\n      break;\n    default:\n      // throw new Error(`BinaryType ${type} is not implemented!`);\n  }\n  return `\n    ${doOpSnippet}\n    return resultTemp;\n  `;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nexport enum UnaryOpType {\n  ABS,\n  ACOS,\n  ACOSH,\n  ASIN,\n  ASINH,\n  ATAN,\n  ATANH,\n  CEIL,\n  COS,\n  COSH,\n  ELU,\n  ERF,\n  EXP,\n  EXPM1,\n  FLOOR,\n  IS_FINITE,\n  IS_INF,\n  IS_NAN,\n  LINEAR,\n  LOG,\n  LOG1P,\n  LOGICAL_NOT,\n  NEG,\n  RELU,\n  RELU6,\n  LEAKYRELU,\n  RECIPROCAL,\n  ROUND,\n  RSQRT,\n  SELU,\n  SIGMOID,\n  SIGN,\n  SIN,\n  SINH,\n  SOFTPLUS,\n  SQRT,\n  SQUARE,\n  STEP,\n  TAN,\n  TANH,\n  TO_INT\n}\n\nconst ABS = `return abs(a);`;\nconst ACOS = `\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return acos(a);\n`;\nconst ACOSH = `\n  if (a < 1.) {\n    return uniforms.NAN;\n  }\n  return acosh(a);\n`;\nconst ASIN = `\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return asin(a);\n`;\nconst ASINH = `return asinh(a);`;\nconst ATAN = `\n  if (isnan(a)) {\n    return uniforms.NAN;\n  }\n  return atan(a);\n`;\nconst ATANH = `\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  if (a == 1.) {\n    return uniforms.INFINITY;\n  }\n  if (a == -1.) {\n    return -uniforms.INFINITY;\n  }\n  return atanh(a);\n`;\nconst CEIL = `return ceil(a);`;\nconst COS = `return cos(a);`;\nconst COSH = `\n  let e2x = exp(-a);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\nconst EXPM1 = `return exp(a) - 1.0;`;\nconst ELU = `if (a >= 0.0) { return a; }  return (exp(a) - 1.0);`;\nconst ELU_VEC4 = `\n  var resFloat = exp(a) - vec4<f32>(1.0);\n  if (a.r >= 0.0) {\n    resFloat.r = a.r;\n  }\n  if (a.g >= 0.0) {\n    resFloat.g = a.g;\n  }\n  if (a.b >= 0.0) {\n    resFloat.b = a.b;\n  }\n  if (a.a >= 0.0) {\n    resFloat.a = a.a;\n  }\n  return resFloat;\n`;\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  let p = ${backend_util.ERF_P};\n  let a1 = ${backend_util.ERF_A1};\n  let a2 = ${backend_util.ERF_A2};\n  let a3 = ${backend_util.ERF_A3};\n  let a4 = ${backend_util.ERF_A4};\n  let a5 = ${backend_util.ERF_A5};\n\n  let sign = sign(a);\n  let absA = abs(a);\n  let t = 1.0 / (1.0 + p * absA);\n  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));\n`;\nconst EXP = `return exp(a);`;\nconst FLOOR = `return floor(a);`;\nconst IS_FINITE = `return f32(!isnan(a) && !isinf(a));`;\nconst IS_INF = `return f32(isinf(a));`;\nconst IS_NAN = `return f32(isnan(a));`;\nconst LINEAR = `return a;`;\nconst LOG = `if (a < 0.0) { return uniforms.NAN; }\n  return log(a);`;\nconst LOG1P = `\n  if (isnan(a)) { return a; }\n  return log(1.0 + a);\n`;\nconst LOGICAL_NOT = `return f32(!(a >= 1.0));`;\nconst NEG = `return -a;`;\nconst LEAKYRELU = `if (a < 0.0) { return uniforms.alpha * a; } return a;`;\nconst LEAKYRELU_VEC4 = `\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n`;\nconst RECIPROCAL = `return 1.0 / a;`;\nconst RELU = `return select(a, 0.0, a < 0.0);`;\nconst RELU6 = 'return clamp(a, 0.0, 6.0);';\nconst RELU6_VEC4 =\n    'return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));';\nconst RELU_VEC4 = `\n  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));\n`;\nconst ROUND = `return round(a);`;\nconst RSQRT = `return inverseSqrt(a);`;\n// Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n// See: https://arxiv.org/abs/1706.02515\nconst SELU = `\n  if (a >= 0.0) {\n    return ${backend_util.SELU_SCALE} * a;\n  } else {\n    return ${backend_util.SELU_SCALEALPHA} * (exp(a) - 1.0);\n  }\n`;\nconst SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * a));`;\nconst SIGN = `return sign(a);`;\nconst SIN = `return sin(a);`;\nconst SINH = `\n  let e2x = exp(a);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\nconst SOFTPLUS = `\n  let epsilon = 1.1920928955078125e-7;\n  let threshold = log(epsilon) + 2.0;\n\n  let too_large = a > -threshold;\n  let too_small = a < threshold;\n  let exp_a = exp(a);\n\n  if (too_large) {\n    return a;\n  } else if (too_small) {\n    return exp_a;\n  } else {\n    return log(exp_a + 1.0);\n  }\n`;\nconst SQRT = `return sqrt(a);`;\nconst SQUARE = `return a * a;`;\nconst STEP = `\n  if (isnan(a)) {\n    return a;\n  }\n\n  return select(uniforms.stepAlpha, 1.0, a > 0.0);\n`;\nconst TAN = `return tan(a);`;\nconst TANH = `\n  let e2x = exp(-2.0 * abs(a));\n  return sign(a) * (1.0 - e2x) / (1.0 + e2x);\n`;\nconst TO_INT = `return f32(i32((a)));`;\n\nexport function getUnaryOpString(type: UnaryOpType, useVec4?: boolean): string {\n  switch (type) {\n    case UnaryOpType.ABS:\n      return ABS;\n    case UnaryOpType.ACOS:\n      return ACOS;\n    case UnaryOpType.ACOSH:\n      return ACOSH;\n    case UnaryOpType.ASIN:\n      return ASIN;\n    case UnaryOpType.ASINH:\n      return ASINH;\n    case UnaryOpType.ATAN:\n      return ATAN;\n    case UnaryOpType.ATANH:\n      return ATANH;\n    case UnaryOpType.COS:\n      return COS;\n    case UnaryOpType.COSH:\n      return COSH;\n    case UnaryOpType.CEIL:\n      return CEIL;\n    case UnaryOpType.ELU:\n      return useVec4 ? ELU_VEC4 : ELU;\n    case UnaryOpType.ERF:\n      return ERF;\n    case UnaryOpType.EXP:\n      return EXP;\n    case UnaryOpType.EXPM1:\n      return EXPM1;\n    case UnaryOpType.FLOOR:\n      return FLOOR;\n    case UnaryOpType.IS_FINITE:\n      return IS_FINITE;\n    case UnaryOpType.IS_INF:\n      return IS_INF;\n    case UnaryOpType.IS_NAN:\n      return IS_NAN;\n    case UnaryOpType.LINEAR:\n      return LINEAR;\n    case UnaryOpType.LOG:\n      return LOG;\n    case UnaryOpType.LOG1P:\n      return LOG1P;\n    case UnaryOpType.LOGICAL_NOT:\n      return LOGICAL_NOT;\n    case UnaryOpType.NEG:\n      return NEG;\n    case UnaryOpType.LEAKYRELU:\n      return useVec4 ? LEAKYRELU_VEC4 : LEAKYRELU;\n    case UnaryOpType.RECIPROCAL:\n      return RECIPROCAL;\n    case UnaryOpType.RELU:\n      return useVec4 ? RELU_VEC4 : RELU;\n    case UnaryOpType.RELU6:\n      return useVec4 ? RELU6_VEC4 : RELU6;\n    case UnaryOpType.ROUND:\n      return ROUND;\n    case UnaryOpType.RSQRT:\n      return RSQRT;\n    case UnaryOpType.SELU:\n      return SELU;\n    case UnaryOpType.SIGMOID:\n      return SIGMOID;\n    case UnaryOpType.SIGN:\n      return SIGN;\n    case UnaryOpType.SIN:\n      return SIN;\n    case UnaryOpType.SINH:\n      return SINH;\n    case UnaryOpType.SOFTPLUS:\n      return SOFTPLUS;\n    case UnaryOpType.SQRT:\n      return SQRT;\n    case UnaryOpType.SQUARE:\n      return SQUARE;\n    case UnaryOpType.STEP:\n      return STEP;\n    case UnaryOpType.TAN:\n      return TAN;\n    case UnaryOpType.TANH:\n      return TANH;\n    case UnaryOpType.TO_INT:\n      return TO_INT;\n\n    default:\n      throw new Error(`BinaryType ${type} is not implemented!`);\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType, getBinaryOpString} from './binary_op_util';\nimport {getUnaryOpString, UnaryOpType} from './unary_op_util';\nimport {typeSnippet} from './webgpu_program';\n\nexport function activationFnSnippet(\n    activation: backend_util.Activation, hasPreluActivationWeights = false,\n    packed = false, coordsLength = 3): string {\n  if (activation === null) {\n    return '';\n  }\n\n  let activationOpSnippet = '';\n  if (activation === 'linear') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.LINEAR);\n  } else if (activation === 'relu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.RELU, packed);\n  } else if (activation === 'elu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.ELU, packed);\n  } else if (activation === 'relu6') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.RELU6, packed);\n  } else if (activation === 'prelu') {\n    activationOpSnippet = getBinaryOpString(BinaryOpType.PRELU, packed);\n  } else if (activation === 'sigmoid') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.SIGMOID, packed);\n  } else if (activation === 'leakyrelu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.LEAKYRELU, packed);\n  } else {\n    throw new Error(`Activation ${\n        activation} has not been implemented for the WebGPU backend.`);\n  }\n  const elementSize = packed ? 4 : 1;\n  const dataType = typeSnippet(elementSize);\n  let activationFnSnippet = '';\n  if (hasPreluActivationWeights) {\n    activationFnSnippet = `\n      fn activation(a : ${dataType}, coords : vec${coordsLength}<i32>) -> ${\n        dataType} {\n        let b = getPreluActivationWeightsByOutputCoords(coords);\n        ${activationOpSnippet}\n      }`;\n  } else {\n    activationFnSnippet = `\n      fn activation(a : ${dataType}, coords : vec${coordsLength}<i32>) -> ${\n        dataType} {\n        ${activationOpSnippet}\n      }`;\n  }\n  return activationFnSnippet;\n}\n\nexport function biasActivationSnippet(\n    hasBias: boolean, activation: backend_util.Activation): string {\n  return `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, typeSnippet, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, computeWorkgroupInfoForMatMul} from './webgpu_util';\n\nexport function matMulReadFnSource(\n    transposeA: boolean, transposeB: boolean, fitAOuter = false,\n    fitBOuter = false, fitInner = false, component = 1) {\n  util.assert(\n      transposeA && component === 1 || !transposeA,\n      () => `transposeA ${transposeA} is not compatible with component size ${\n          component}`);\n  const sampleA = `\n      ${\n      transposeA ? `value = getA(batch, col, row);` :\n                   `value = getA(batch, row, col);`}\n\n    `;\n  const sampleB = transposeB ? `value = getB(batch, col, row);` :\n                               `value = getB(batch, row, col);`;\n\n  return `\n  fn mm_readA(batch: i32, row: i32, col: i32) -> ${typeSnippet(component)} {\n    var value = ${typeSnippet(component)}(0.0);\n    ${\n      fitAOuter && fitInner ?\n          sampleA :\n          `\n    ${\n              transposeA ?\n                  `if(row < uniforms.dimAOuter && col < uniforms.dimInner)` :\n                  `if(row < uniforms.aShape[1] && col < uniforms.aShape[2])`}\n    {\n      ${sampleA}\n    }\n    `}\n    return value;\n  }\n\n  fn mm_readB(batch: i32, row: i32, col: i32) -> ${typeSnippet(component)} {\n    var value = ${typeSnippet(component)}(0.0);\n    ${sampleB}\n    return value;\n  }\n  `;\n}\n\nexport function matMulReadWriteFnSource(\n    hasBias: boolean, activation: backend_util.Activation, transposeA: boolean,\n    transposeB: boolean, fitAOuter = false, fitBOuter = false, fitInner = false,\n    component = 1) {\n  return `\n  ${\n      matMulReadFnSource(\n          transposeA, transposeB, fitAOuter, fitBOuter, fitInner, component)}\n  fn mm_write(batch: i32, row: i32, col: i32, valueIn: ${\n      typeSnippet(component)}) {\n    ${\n      fitAOuter && fitBOuter ?\n          '' :\n          'if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)'}\n    {\n      var value = valueIn;\n      let coords = vec3<i32>(batch, row, col);\n      ${biasActivationSnippet(hasBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], value);\n    }\n  }\n  `;\n}\n\nconst writeDataToSubAVec4Snippet =\n    (transpose: boolean, innerElementSize: number) => {\n      if (transpose) {\n        return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol * ${innerElementSize});\n        `;\n\n      } else {\n        return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRow + innerRow,\n          kStart + inputCol * ${innerElementSize});\n        `;\n      }\n    };\n\nconst calculateResultSnippet =\n    (transposeA: boolean, innerElementSize: number, rowPerThread: number,\n     tileInner: number) => {\n      if (transposeA) {\n        return `\n      for (var k = 0; k < ${tileInner}; k++) {\n        let BCached0 = mm_Bsub[k][tileCol];\n        let ACached0 = mm_Asub[k][localRow];\n        for (var i = 0; i < ${rowPerThread}; i++) {\n          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);\n        }\n      }`;\n      } else {\n        let bCachedStr = '';\n        let accStr = '';\n        for (let i = 0; i < innerElementSize; i++) {\n          bCachedStr += `let BCached${i} = mm_Bsub[k * ${innerElementSize} + ${\n              i}][tileCol];`;\n          accStr +=\n              `acc[i] = fma(BCached${i}, vec4<f32>(ACached[${i}]), acc[i]);`;\n        }\n        return `\n      for (var k = 0; k < ${tileInner / innerElementSize}; k++) {\n        ${bCachedStr}\n        for (var i = 0; i < ${rowPerThread}; i++) {\n          let ACached = mm_Asub[tileRow + i][k];\n          ${accStr}\n        }\n      }`;\n      }\n    };\n\nexport function makeMatMulPackedVec4Source(\n    workPerThread: number[], workgroupSize: [number, number, number],\n    transposeA = false, tileInner = 32, splitK = false, splitedDimInner = 32,\n    broadcastBatch = false): string {\n  const tileAOuter = workgroupSize[1] * workPerThread[1];\n  const tileBOuter = workgroupSize[0] * workPerThread[0];\n  const tileAWidth = transposeA ? tileAOuter : tileInner;\n  const tileAHight = transposeA ? tileInner : tileAOuter;\n  const innerElementSize = tileAWidth / workgroupSize[0];\n  const rowPerThreadB = tileInner / workgroupSize[1];\n  const rowPerThread = workPerThread[1];\n  const colPerThread = workPerThread[0];\n  util.assert(\n      ((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n       (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n          tileAWidth % workgroupSize[0] === 0 &&\n          tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4,\n      () => `If transposeA ${transposeA} is true, innerElementSize ${\n          innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n          Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n      tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\n          workgroupSize[0]}. tileInner ${\n          tileInner} must be divisible by workgroupSize[1] ${\n          workgroupSize[1]}. colPerThread ${workPerThread[0]} must be 4.`);\n  return `\n  var<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${\n      tileAWidth / innerElementSize}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${\n      tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\n  ${main()} {\n    let localRow = i32(localId.y);\n    let tileRow = localRow * ${rowPerThread};\n    let tileCol = i32(localId.x);\n\n    let globalRow = i32(globalId.y) * ${rowPerThread};\n    let globalCol = i32(globalId.x) * ${colPerThread};\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    let batchA = ${\n      splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.aShape[0]'};\n    let batchB = ${\n      splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.bShape[0]'};\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n    let numTiles = ${\n      splitK ? `${Math.ceil(splitedDimInner / tileInner)}` :\n               `(uniforms.dimInner - 1) / ${tileInner} + 1`};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc: array<vec4<f32>, ${rowPerThread}>;\n\n    // Loop over shared dimension.\n    let tileRowB = localRow * ${rowPerThreadB};\n    for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n            let inputRow = tileRow + innerRow;\n            let inputCol = tileCol;\n            ${writeDataToSubAVec4Snippet(transposeA, innerElementSize)}\n        }\n\n        // Load one tile of B into local memory.\n        for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow++) {\n            let inputRow = tileRowB + innerRow;\n            let inputCol = tileCol;\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);\n        }\n        kStart = kStart + ${tileInner};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        ${\n      calculateResultSnippet(\n          transposeA, innerElementSize, rowPerThread, tileInner)}\n        workgroupBarrier();\n    }\n\n    for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n    }\n  }`;\n}\n\nconst writeDataToSubASnippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol);\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRowStart + inputRow,\n          kStart + inputCol);\n        `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) => {\n  return transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' :\n\n                      'let ACached = mm_Asub[tileRow + innerRow][k];';\n};\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport function makeMatMulPackedSource(\n    workPerThread: number[], workgroupSize: [number, number, number],\n    transposeA = false, tileInner = 32, splitK = false, splitedDimInner = 32,\n    sequentialAccessByThreads = false, broadcastBatch = false): string {\n  const tileAOuter = workPerThread[1] * workgroupSize[1];\n  const tileBOuter = workPerThread[0] * workgroupSize[0];\n  const tileAWidth = transposeA ? tileAOuter : tileInner;\n  const tileAHight = transposeA ? tileInner : tileAOuter;\n  util.assert(\n      tileAHight % workgroupSize[1] === 0 &&\n          tileAWidth % workgroupSize[0] === 0 &&\n          tileInner % workgroupSize[1] === 0,\n      () => `tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\n          workgroupSize[1]}, tileAWidth ${\n          tileAWidth} must be divisible by workgroupSize[0]${\n          workgroupSize[0]}, tileInner ${\n          tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n  const rowPerThreadA = tileAHight / workgroupSize[1];\n  const colPerThreadA = tileAWidth / workgroupSize[0];\n  const rowPerThreadB = tileInner / workgroupSize[1];\n  const rowPerThread = workPerThread[1];\n  const colPerThread = workPerThread[0];\n  const matmulSnippet = sequentialAccessByThreads ?\n      `\n      let localRow = i32(localId.y);\n      let localCol = i32(localId.x);\n      let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n      let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var inputRow = localRow; inputRow < ${\n          tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${\n          tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n            ${writeDataToSubASnippet(transposeA)}\n          }\n        }\n        // Load one tile of B into local memory.\n        for (var inputRow = localRow; inputRow < ${\n          tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n              for (var inputCol = localCol; inputCol < ${\n          tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n              kStart + inputRow,\n              globalColStart + inputCol);\n          }\n        }\n        kStart = kStart + ${tileInner};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        var BCached : array<f32, ${colPerThread}>;\n        for (var k = 0; k < ${tileInner}; k++) {\n          for (var inner = 0; inner < ${colPerThread}; inner++) {\n            BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n          }\n          for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n            let ACached = ${\n          transposeA ?\n              `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\n              `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n            for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n              acc[innerRow][innerCol] =\n                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n            }\n          }\n        }\n        workgroupBarrier();\n      }\n      for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n        for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n          let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n        }\n      }\n      ` :\n      `\n  let tileRow = i32(localId.y) * ${rowPerThread};\n  let tileCol = i32(localId.x) * ${colPerThread};\n\n  let globalRow = i32(globalId.y) * ${rowPerThread};\n  let globalCol = i32(globalId.x) * ${colPerThread};\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let tileRowA = i32(localId.y) * ${rowPerThreadA};\n  let tileColA = i32(localId.x) * ${colPerThreadA};\n  let tileRowB = i32(localId.y) * ${rowPerThreadB};\n  // Loop over shared dimension.\n  for (var t = 0; t < numTiles; t++) {\n    // Load one tile of A into local memory.\n    for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol++) {\n        let inputRow = tileRowA + innerRow;\n        let inputCol = tileColA + innerCol;\n        ${writeDataToSubASnippet(transposeA)}\n      }\n    }\n\n    // Load one tile of B into local memory.\n    for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n        let inputRow = tileRowB + innerRow;\n        let inputCol = tileCol + innerCol;\n        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n          kStart + inputRow,\n          globalCol + innerCol);\n      }\n    }\n    kStart = kStart + ${tileInner};\n    workgroupBarrier();\n\n    // Compute acc values for a single thread.\n    var BCached : array<f32, ${colPerThread}>;\n    for (var k = 0; k < ${tileInner}; k++) {\n      for (var inner = 0; inner < ${colPerThread}; inner++) {\n        BCached[inner] = mm_Bsub[k][tileCol + inner];\n      }\n\n      for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        ${readDataFromSubASnippet(transposeA)}\n        for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n          acc[innerRow][innerCol] =\n              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n        }\n      }\n    }\n\n    workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n    for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n      mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n          acc[innerRow][innerCol]);\n    }\n  }\n  `;\n\n  return `\n    var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n    var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n\n    ${main()} {\n      let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n      let batchA = ${\n      splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.aShape[0]'};\n      let batchB = ${\n      splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.bShape[0]'};\n      let numTiles = ${\n      splitK ? `${Math.ceil(splitedDimInner / tileInner)}` :\n               `(uniforms.dimInner - 1) / ${tileInner} + 1`};\n      var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n      var acc : array<array<f32, ${colPerThread}>, ${rowPerThread}>;\n\n      // Without this initialization strange values show up in acc.\n      for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n          acc[innerRow][innerCol] = 0.0;\n        }\n      }\n      ${matmulSnippet}\n    }\n  `;\n}\n\nconst readVectorASnippet = (transpose: boolean) => {\n  return transpose ? `\n      mm_readA(batchA, colA, globalRow),\n      mm_readA(batchA, colA + 1, globalRow),\n      mm_readA(batchA, colA + 2, globalRow),\n      mm_readA(batchA, colA + 3, globalRow)\n  ` :\n                     `\n      mm_readA(batchA, globalRow, colA),\n      mm_readA(batchA, globalRow, colA + 1),\n      mm_readA(batchA, globalRow, colA + 2),\n      mm_readA(batchA, globalRow, colA + 3)\n  `;\n};\n\nexport function makeVectorMatrixProductSource(\n    workgroupSize: [number, number, number], transposeA = false): string {\n  util.assert(\n      workgroupSize[1] === 1 && workgroupSize[2] === 1,\n      () => `A linear work group size is required. But got ${workgroupSize}.`);\n  const tileSize = workgroupSize[0] * 4;\n  return `\n    var<workgroup> mm_Asub : array<vec4<f32>, ${workgroupSize[0]}>;\n\n    ${main()} {\n      let tileCol = i32(localId.x);\n      let globalCol = i32(globalId.x);\n      let globalRow = i32(globalId.y);\n\n      let numTiles = (uniforms.dimInner - 1) / ${tileSize} + 1;\n      let batch = i32(globalId.z);\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      // Without this initialization strange values show up in acc.\n      var acc = 0.0;\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        let colA = t * ${tileSize} + tileCol * 4;\n        mm_Asub[tileCol] = vec4<f32>(${readVectorASnippet(transposeA)});\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ${tileSize / 4}; k++) {\n          let rowB = t * ${tileSize} + k * 4;\n          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),\n                              mm_readB(batchB, rowB + 1, globalCol),\n                              mm_readB(batchB, rowB + 2, globalCol),\n                              mm_readB(batchB, rowB + 3, globalCol));\n\n          let ACached = mm_Asub[k];\n          acc = acc + dot(ACached, BCached);\n        }\n\n        workgroupBarrier();\n      }\n\n      mm_write(batch, globalRow, globalCol, acc);\n    }\n  `;\n}\n\nexport class MatMulPackedProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number];\n  elementsPerThread: [number, number, number];\n  transposeA: boolean;\n  transposeB: boolean;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n  fitAOuter: boolean;\n  fitBOuter: boolean;\n  fitInner: boolean;\n  tileInner: number;\n  isVectorA: boolean;\n  isVec4: boolean;\n  outputComponent: number;\n  private sequentialAccessByThreads: boolean;\n\n  constructor(\n      aShape: [number, number, number], outputShape: [number, number, number],\n      transposeA = false, transposeB = false, bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null,\n      sequentialAccessByThreads = false) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [2], y: [1], z: [0]};\n    const dimInner = transposeA ? aShape[1] : aShape[2];\n    this.isVec4 = ((dimInner % 4 === 0 && !transposeA) ||\n                   (outputShape[1] % 4 === 0 && transposeA)) &&\n        outputShape[2] % 4 === 0 && !transposeB;\n    this.outputComponent = this.isVec4 ? 4 : 1;\n    this.isVectorA = outputShape[1] === 1 && !transposeA;\n\n    if (!this.isVec4 && this.isVectorA) {\n      // For makeVectorMatrixProductSource\n      this.elementsPerThread = [1, 1, 1];\n      this.workgroupSize = [32, 1, 1];\n    } else {\n      const workgroupInfo = computeWorkgroupInfoForMatMul(\n          outputShape[1], dimInner, outputShape[2], transposeA);\n      this.workgroupSize = workgroupInfo.workgroupSize;\n      this.elementsPerThread = workgroupInfo.elementsPerThread;\n    }\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        this.elementsPerThread);\n\n    const addBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.sequentialAccessByThreads = sequentialAccessByThreads;\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    [this.fitAOuter, this.fitBOuter, this.fitInner] =\n        this.getShapeFit(outputShape[1], outputShape[2], dimInner);\n    this.shaderKey = `matMulPacked_${this.elementsPerThread}_${transposeA}_${\n        transposeB}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${\n        this.fitInner}_${this.isVec4}_${this.isVectorA}_${\n        this.sequentialAccessByThreads}`;\n  }\n\n  getShapeFit(dimAOuter: number, dimBOuter: number, dimInner: number):\n      boolean[] {\n    const tileAOuter = this.workgroupSize[1] * this.elementsPerThread[1];\n    const tileBOuter = this.workgroupSize[0] * this.elementsPerThread[0];\n\n    if (!this.isVec4 && this.isVectorA) {\n      // For makeVectorMatrixProductSource\n      this.tileInner = this.workgroupSize[0] * 4;\n    } else {\n      this.tileInner = tileBOuter;\n    }\n\n    const fitAOuter = dimAOuter % tileAOuter === 0;\n    const fitBOuter = dimBOuter % tileBOuter === 0;\n    const fitInner = dimInner % this.tileInner === 0;\n    return [fitAOuter, fitBOuter, fitInner];\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${\n        activationFnSnippet(\n            this.activation, this.hasPreluActivationWeights, this.isVec4)}\n      ${\n        matMulReadWriteFnSource(\n            this.addBias, this.activation,\n            false /* transposeA is implemented in makeMatMulPackedSource */,\n            this.transposeB, this.fitAOuter, this.fitBOuter, this.fitInner,\n            this.isVec4 ? 4 : 1)}\n      ${\n        this.isVec4 ?\n            makeMatMulPackedVec4Source(\n                this.elementsPerThread, this.workgroupSize, this.transposeA,\n                this.tileInner, false, null, true) :\n            (this.isVectorA ? makeVectorMatrixProductSource(\n                                  this.workgroupSize, this.transposeA) :\n                              makeMatMulPackedSource(\n                                  this.elementsPerThread, this.workgroupSize,\n                                  this.transposeA, this.tileInner, false, null,\n                                  this.sequentialAccessByThreads, true))}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet} from './activation_util';\nimport {matMulReadWriteFnSource} from './matmul_packed_webgpu';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport function makeMatMulReduceSource(workgroupSizeX: number): string {\n  return `\n    var<workgroup> sumValues : array<f32, ${workgroupSizeX}>;\n    ${main()} {\n      let coords = getOutputCoords();\n      let batch = coords[0];\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      let row = coords[1];\n      let col = coords[2];\n      var sum = 0.0;\n      let Length = uniforms.dimInner;\n      for (var k = i32(localId.x); k < Length; k = k + ${workgroupSizeX}) {\n        let dataA = mm_readA(batchA, row, k);\n        let dataB = mm_readB(batchB, k, col);\n        sum = sum + dataA * dataB;\n      }\n      sumValues[localId.x] = sum;\n      workgroupBarrier();\n\n      for(var currentSize = ${workgroupSizeX / 2}u; currentSize > 1u;\n          currentSize = currentSize / 2u) {\n        if (localId.x < currentSize)\n        {\n          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (localId.x == 0u) {\n        sum = sumValues[0] + sumValues[1];\n        mm_write(batch, row, col, sum);\n      }\n    }\n  `;\n}\n\nexport class MatMulReduceProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  transposeA: boolean;\n  transposeB: boolean;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n\n  constructor(\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [], y: [1, 2], z: [0]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    const addBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    this.shaderKey =\n        `matMulReduce_${this.activation}_${transposeA}_${transposeB}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n      ${\n        matMulReadWriteFnSource(\n            this.addBias, this.activation, this.transposeA, this.transposeB)}\n      ${makeMatMulReduceSource(this.workgroupSize[0])}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\nimport {activationFnSnippet} from './activation_util';\nimport {matMulReadWriteFnSource} from './matmul_packed_webgpu';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\n\nexport function makeMatMulSmallOutputSizeSource(\n    workgroupSize: [number, number, number]): string {\n  const tileAOuter = workgroupSize[1];\n  const tileBOuter = workgroupSize[0];\n  const tileInner = tileAOuter > tileBOuter ? tileAOuter : tileBOuter;\n  return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileInner}>, ${tileAOuter}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n\n  // If the output size is small for matrix multiplication, avoid to use vec4\n  // and handle some elements per thread to optimally utilize the ALU.\n  // Read data from global memory to registers firstly, then store them into\n  // shared memory, so it is instruction-Level parallelism for arithmetic\n  // operations and others handle IO operations between barrier api, makes ALU\n  // and load/store units work simultaneously, could improves the performance.\n  ${main()} {\n    let tileRow = i32(localId.y);\n    let tileCol = i32(localId.x);\n    let globalRow = i32(globalId.y);\n    let globalCol = i32(globalId.x);\n    let batch = i32(globalId.z);\n    let batchA = batch % uniforms.aShape[0];\n    let batchB = batch % uniforms.bShape[0];\n\n    // uniforms.dimInner should be greater than 0.\n    let numTiles = (uniforms.dimInner - 1) / ${tileInner} + 1;\n    var acc = 0.0;\n\n    var globalColA = tileCol;\n    var globalRowB = 0;\n    var regA = mm_readA(batchA, globalRow, globalColA);\n    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n    globalColA = globalColA + ${tileInner};\n    globalRowB = globalRowB + ${tileInner};\n\n    for (var t = 0; t < numTiles; t = t + 1) {\n      mm_Asub[tileRow][tileCol] = regA;\n      mm_Bsub[2 * tileRow][tileCol] = regB0;\n      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;\n\n      workgroupBarrier();\n\n      regA = mm_readA(batchA, globalRow, globalColA);\n      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n      globalColA = globalColA + ${tileInner};\n      globalRowB = globalRowB + ${tileInner};\n\n      for (var k = 0; k < ${tileInner}; k = k + 1) {\n        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];\n      }\n      workgroupBarrier();\n    }\n\n    mm_write(batch, globalRow, globalCol, acc);\n  }\n  `;\n}\n\nexport class MatMulSmallOutputSizeProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number] = [16, 8, 1];\n  transposeA: boolean;\n  transposeB: boolean;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null) {\n    this.outputShape = outputShape;\n\n    this.dispatchLayout = {x: [2], y: [1], z: [0]};\n    this.dispatch = [\n      Math.ceil(outputShape[2] / this.workgroupSize[0]),\n      Math.ceil(outputShape[1] / this.workgroupSize[1]), outputShape[0]\n    ];\n\n    const addBias = bias != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    this.shaderKey =\n        `matMulSmallOutputSize_${this.activation}_${transposeA}_${transposeB}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n      ${\n        matMulReadWriteFnSource(\n            this.addBias, this.activation, this.transposeA, this.transposeB)}\n      ${makeMatMulSmallOutputSizeSource(this.workgroupSize)}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source, matMulReadFnSource} from './matmul_packed_webgpu';\nimport {atomicAddSnippet} from './shader_util';\nimport {getMainHeaderString as main, typeSnippet, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class MatMulSplitKProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number] = [8, 8, 1];\n  elementsPerThread: [number, number, number];\n  transposeA: boolean;\n  transposeB: boolean;\n  atomic = true;\n  outputComponent: number;\n  splitedDimInner = 128;\n\n  constructor(\n      outputShape: [number, number, number], dimInner: number,\n      transposeA = false, transposeB = false) {\n    util.assert(\n        outputShape[0] === 1,\n        () => 'MatMulSplitKProgram only supports batch = 1.');\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [2], y: [1], z: [0, 3]};\n    const isVec4 = (transposeA && this.outputShape[1] % 4 === 0 ||\n                    !transposeA && dimInner % 4 === 0) &&\n        this.outputShape[2] % 4 === 0;\n    this.elementsPerThread = [4, 4, this.splitedDimInner];\n    this.outputComponent = isVec4 ? 4 : 1;\n    if (!isVec4) {\n      if (this.outputShape[1] < 16) {\n        this.elementsPerThread[1] = 1;\n      }\n      if (this.outputShape[2] < 16) {\n        this.elementsPerThread[0] = 1;\n      }\n    }\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout,\n        [\n          this.outputShape[0], this.outputShape[1], this.outputShape[2],\n          dimInner\n        ],\n        this.workgroupSize, this.elementsPerThread);\n\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.shaderKey = `matMulSplitK_${transposeA}_${transposeB}_${\n        this.elementsPerThread}_${this.outputComponent}`;\n  }\n\n  getUserCode(): string {\n    const component = this.outputComponent;\n    const userCode = `\n      ${\n        matMulReadFnSource(\n            false, this.transposeB, false, false, false, component)}\n      fn mm_write(batch: i32, row : i32, col : i32, value : ${\n        typeSnippet(component)}) {\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n          let coords = vec3<i32>(batch, row, col);\n          let flatIndex = getOutputIndexFromCoords(coords);\n          // The problem is that we should initialize output to zero before using.\n          // Otherwise, the original value will be added to the result.\n          for (var i = 0; i < ${component}; i = i + 1) {\n            ${\n        atomicAddSnippet(\n            '&result[flatIndex + i]', `${component > 1 ? 'value[i]' : 'value'}`,\n            'float32')}\n          }\n        }\n      }\n      ${\n        component === 4 ? makeMatMulPackedVec4Source(\n                              this.elementsPerThread, this.workgroupSize,\n                              this.transposeA, 32, true, this.splitedDimInner) :\n                          makeMatMulPackedSource(\n                              this.elementsPerThread, this.workgroupSize,\n                              this.transposeA, 32, true, this.splitedDimInner)}\n    `;\n    return userCode;\n  }\n}\n\nexport class BiasActivationProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  uniforms = '';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  private addBias: boolean;\n  private activation: backend_util.Activation;\n  private hasPreluActivationWeights: boolean;\n\n  constructor(\n      outputShape: number[], bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.addBias = bias != null;\n    this.hasPreluActivationWeights = preluActivationWeights != null;\n    this.activation = activation;\n    if (this.addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (this.hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.shaderKey = `biasActivation_${activation}`;\n  }\n\n  getUserCode(): string {\n    return `\n    ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        var value = getXByOutputIndex(index);\n        ${biasActivationSnippet(this.addBias, this.activation)}\n        setOutputAtIndex(index, value);\n      }\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FillProgram implements WebGPUProgram {\n  variableNames: string[] = [];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'value : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'fill';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        setOutputAtIndex(index, uniforms.value);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {FillProgram} from '../fill_webgpu';\n\nexport function fill(args: {backend: WebGPUBackend, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape);\n    const uniformData = [{type: 'float32', data: [value as number]}];\n    return backend.runWebGPUProgram(program, [], dtype, uniformData);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgpu',\n  kernelFunc: fill as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function reshape(\n    args: {inputs: ReshapeInputs, backend: WebGPUBackend, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  // Backend needs to track refCount for the dataId for reshape op\n  args.backend.incRef(x.dataId);\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgpu',\n  kernelFunc: reshape as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcast_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {MatMulPackedProgram} from '../matmul_packed_webgpu';\nimport {MatMulReduceProgram} from '../matmul_reduce_webgpu';\nimport {MatMulSmallOutputSizeProgram} from '../matmul_small_output_size_webgpu';\nimport {BiasActivationProgram, MatMulSplitKProgram} from '../matmul_splitK_webgpu';\nimport {WebGPUProgram} from '../webgpu_program';\nimport {MatMulProgramType} from '../webgpu_util';\n\nimport {fill} from './Fill';\nimport {reshape} from './Reshape';\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: WebGPUBackend,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const inputs: TensorInfo[] = [a3d, b3d];\n  const dimensions = [\n    {type: 'int32', data: [outerShapeA]}, {type: 'int32', data: [outerShapeB]},\n    {type: 'int32', data: [innerShapeA]}\n  ];\n\n  let program: WebGPUProgram;\n  let out: TensorInfo;\n  const outputShape: [number, number, number] =\n      [batchDim, outerShapeA, outerShapeB];\n  let matmulProgramType = env().get('WEBGPU_MATMUL_PROGRAM_TYPE') as number;\n  if (matmulProgramType < 0) {\n    // Usually increasing workgroups is a good way to gain more performance for\n    // few workgroups by tiling 32x32 (default matmul algorithm). Currently,\n    // there are three ways to increase workgroups. 1) MatMulReduceProgram,\n    // which is used only when the output size is very small (128 for now). 2)\n    // MatMulSplitKProgram, increasing workgroups by spliting K. 3)\n    // MatMulSmallOutputSizeProgram, increasing workgroups by small tile size.\n    // For different devices, the minimum optimal workgroups may be different.\n    // So here we set a |thresholdToIncreaseWorkgroups| to indicate whether we\n    // need to increase workgroups. And the literal number is an empirical\n    // value.\n    const thresholdFlagValue =\n        env().getNumber('WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL');\n    const thresholdToIncreaseWorkgroups = thresholdFlagValue > 0 ?\n        thresholdFlagValue :\n        backend.thresholdToIncreaseWorkgroups;\n    const workgroupsBy32x32 =\n        batchDim * Math.ceil(outerShapeA / 32) * Math.ceil(outerShapeB / 32);\n    const hasFewWorkgroups =\n        workgroupsBy32x32 <= thresholdToIncreaseWorkgroups ||\n        (outerShapeA <= 8 &&\n         workgroupsBy32x32 <= thresholdToIncreaseWorkgroups * 2);\n    if (hasFewWorkgroups) {\n      if (batchDim * outerShapeA * outerShapeB <= 128) {\n        matmulProgramType = MatMulProgramType.MatMulReduceProgram;\n      } else if (batchDim === 1 && innerShapeB >= 2000) {\n        matmulProgramType = MatMulProgramType.MatMulSplitKProgram;\n      } else {\n        matmulProgramType = MatMulProgramType.MatMulSmallOutputSizeProgram;\n      }\n    } else {\n      matmulProgramType = MatMulProgramType.MatMulPackedProgram;\n    }\n  }\n\n  switch (matmulProgramType) {\n    case MatMulProgramType.MatMulReduceProgram:\n      program = new MatMulReduceProgram(\n          outputShape, transposeA, transposeB, bias, activation,\n          preluActivationWeights);\n      break;\n    case MatMulProgramType.MatMulSplitKProgram: {\n      // The output buffer must be initailzed to zero before using since we\n      // use atomicAdd in MatMulSplitKProgram.\n      out = fill(\n          {backend, attrs: {shape: outputShape, value: 0, dtype: a.dtype}});\n      program = new MatMulSplitKProgram(\n          outputShape, innerShapeB, transposeA, transposeB);\n      if (bias || activation) {\n        out =\n            backend.runWebGPUProgram(program, inputs, a.dtype, dimensions, out);\n        const biasActivationProgram = new BiasActivationProgram(\n            out.shape, bias, activation, preluActivationWeights);\n        let uniformData = null;\n        const activationInputs: TensorInfo[] = [out];\n        if (bias) {\n          activationInputs.push(bias);\n        }\n        if (preluActivationWeights) {\n          activationInputs.push(preluActivationWeights);\n        }\n        if (activation === 'leakyrelu') {\n          uniformData = [{type: 'float32', data: [leakyreluAlpha]}];\n          biasActivationProgram.uniforms += ' alpha : f32,';\n        }\n        const outActivated = backend.runWebGPUProgram(\n            biasActivationProgram, activationInputs, out.dtype, uniformData);\n        intermediates.push(out);\n        const outReshaped = reshape(\n            {inputs: {x: outActivated}, backend, attrs: {shape: outShape}});\n        intermediates.push(outActivated);\n        for (const i of intermediates) {\n          backend.disposeData(i.dataId);\n        }\n        return outReshaped;\n      }\n      break;\n    }\n    case MatMulProgramType.MatMulSmallOutputSizeProgram:\n      program = new MatMulSmallOutputSizeProgram(\n          a3dShape, b3dShape, outputShape, transposeA, transposeB, bias,\n          activation, preluActivationWeights);\n      break;\n    case MatMulProgramType.MatMulPackedProgram:\n      // Experiments show that sequential access is more friendly for Intel\n      // GPUs.\n      const sequentialAccessByThreads = backend.adapterInfo.isIntel();\n      program = new MatMulPackedProgram(\n          a3dShape, outputShape, transposeA, transposeB, bias, activation,\n          preluActivationWeights, sequentialAccessByThreads);\n      break;\n    default:\n      throw new Error(`Unsupported MatMulProgramType ${matmulProgramType}.`);\n  }\n\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (preluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({type: 'float32', data: [leakyreluAlpha]});\n    program.uniforms += ' alpha : f32,';\n  }\n  out = backend.runWebGPUProgram(program, inputs, a.dtype, dimensions, out);\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgpu',\n  kernelFunc: _fusedMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {BinaryOpType, getBinaryOpString} from './binary_op_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BinaryOpComplexProgram implements WebGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [128, 1, 1];\n  op: BinaryOpType;\n  size = true;\n\n  constructor(op: BinaryOpType, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `binaryOpComplex_${op}`;\n    this.op = op;\n  }\n\n  getUserCode(): string {\n    const opStr = getBinaryOpString(this.op, false);\n    const userCode = `\n      fn binaryOpComplex(\n          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {\n        ${opStr}\n      }\n\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let areal = getARealByOutputIndex(index);\n          let aimag = getAImagByOutputIndex(index);\n          let breal = getBRealByOutputIndex(index);\n          let bimag = getBImagByOutputIndex(index);\n          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType, getBinaryOpString} from './binary_op_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BinaryOpProgram implements WebGPUProgram {\n  dispatch: [number, number, number];\n  dispatchLayout: {x: number[]};\n  outputComponent: number;\n  op: BinaryOpType;\n  outputShape: number[];\n  shaderKey: string;\n  size = true;\n  variableNames = ['A', 'B'];\n  workgroupSize: [number, number, number];\n  variableComponents: number[];\n\n  private lastDimensionSize: number;\n  private useSharedMemoryWithA: boolean;\n  private useSharedMemoryWithB: boolean;\n  private type: string;\n\n  constructor(op: BinaryOpType, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.op = op;\n\n    this.useSharedMemoryWithA =\n        aShape.length <= 1 && bShape.length > 1 && aShape[0] < 128;\n    this.useSharedMemoryWithB =\n        bShape.length <= 1 && aShape.length > 1 && bShape[0] < 128;\n\n    if (this.useSharedMemoryWithA || this.useSharedMemoryWithB) {\n      this.outputComponent = 1;\n      this.variableComponents = [1, 1];\n      // lastDimensionSize is used as sharedBuf array size, so can not be\n      // used as uniform.\n      this.lastDimensionSize =\n          this.useSharedMemoryWithB ? bShape[0] : aShape[0];\n      this.shaderKey = `binary_${op}_${this.lastDimensionSize}`;\n      this.type = 'shared';\n      // This is an experimental value when using shared memory.\n      // Note that the maximum of workgroup X dimension is 256.\n      this.workgroupSize = [256, 1, 1];\n    } else {\n      const aDivisibleBy4 =\n          aShape.length > 0 && aShape[aShape.length - 1] % 4 === 0;\n      const bDivisibleBy4 =\n          bShape.length > 0 && bShape[bShape.length - 1] % 4 === 0;\n      if (aDivisibleBy4 && bDivisibleBy4) {\n        this.outputComponent = 4;\n        this.variableComponents = [4, 4];\n      } else if (\n          (aDivisibleBy4 &&\n           (util.isScalarShape(bShape) || bShape[bShape.length - 1] === 1)) ||\n          (bDivisibleBy4 &&\n           (util.isScalarShape(aShape) || aShape[aShape.length - 1] === 1))) {\n        this.outputComponent = 4;\n        this.variableComponents = aDivisibleBy4 ? [4, 1] : [1, 4];\n      } else {\n        this.outputComponent = 1;\n        this.variableComponents = [1, 1];\n      }\n      this.type = 'nonshared';\n      this.shaderKey = `binary_${op}_${this.variableComponents}`;\n      // TODO(jiajia.qin@intel.com): Heuristically select a good work group\n      // size.\n      this.workgroupSize = [128, 1, 1];\n    }\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.outputComponent, 1, 1]);\n  }\n\n  getUserCode(): string {\n    let userCode;\n    const dType = this.outputComponent === 4 ? 'vec4<f32>' : 'f32';\n    const opFnStr = `\n    fn binaryOperation(a : ${dType}, b : ${dType}) -> ${dType} {\n      ${getBinaryOpString(this.op, this.outputComponent === 4)}\n    };\n    `;\n\n    if (this.type === 'shared') {\n      const sharedIndexSnippet = this.lastDimensionSize > 1 ?\n          `coords[${this.outputShape.length - 1}]` :\n          '0';\n      const accessDataSnippet = this.useSharedMemoryWithB ?\n          `let a = getAByOutputIndex(index);\n          let b = sharedBuf[${sharedIndexSnippet}];` :\n          `let a = sharedBuf[${sharedIndexSnippet}];\n          let b = getBByOutputIndex(index);`;\n      userCode = `\n        ${opFnStr}\n        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;\n        ${main('index')} {\n          // Fill in the shared memory buffer.\n          let localIndex = i32(localId.x);\n          if(localIndex < ${this.lastDimensionSize}) {\n            sharedBuf[localIndex] = f32(${\n          this.useSharedMemoryWithB ? 'B' : 'A'}[localIndex]);\n          }\n          workgroupBarrier();\n\n          if(index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            ${accessDataSnippet}\n            setOutputAtIndex(index, binaryOperation(a, b));\n          }\n        }\n        `;\n    } else {\n      userCode = `\n       ${opFnStr}\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index * ${this.outputComponent});\n           let a = ${dType}(getAByOutputCoords(coords));\n           let b = ${dType}(getBByOutputCoords(coords));\n           setOutputAtIndex(index, binaryOperation(a, b));\n         }\n       }\n       `;\n    }\n\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs} = args;\n  const {x} = inputs;\n\n  args.backend.incRef(x.dataId);\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgpu',\n  kernelFunc: identity as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\n\n/**\n * Complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(args: {inputs: ComplexInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.tensorMap.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgpu',\n  kernelFunc: complex as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getUnaryOpString, UnaryOpType} from './unary_op_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class UnaryOpProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A'];\n  workgroupSize: [number, number, number];\n  op: UnaryOpType;\n  uniforms?: string;\n  size = true;\n\n  constructor(outputShape: number[], op: UnaryOpType, uniforms = '') {\n    // TODO(jiajia.qin@intel.com): Heuristically select a good work group size.\n    const workgroupSizeX = 128;\n    this.workgroupSize = [workgroupSizeX, 1, 1];\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.op = op;\n    if (uniforms !== '') {\n      this.uniforms = uniforms;\n    }\n    this.shaderKey = `unary_${op}`;\n  }\n\n  getUserCode(): string {\n    return `\n      fn unaryOperation(a : f32) -> f32 {\n        ${getUnaryOpString(this.op, false)}\n      }\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let a = getAByOutputIndex(index);\n          setOutputAtIndex(index, unaryOperation(a));\n        }\n      }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TensorInfo, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BinaryOpComplexProgram} from '../binary_op_complex_webgpu';\nimport {BinaryOpType} from '../binary_op_util';\nimport {BinaryOpProgram} from '../binary_op_webgpu';\nimport {complex} from '../kernels/Complex';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\ntype UnaryKernelFuncConfig = {\n  opType: UnaryOpType,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opType Op type to create `UnaryOpProgram`.\n * @param cpuKernelImpl Optional. Shared functionality from tfjs-backend-cpu, it\n *     will be involved when necessary.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opType, cpuKernelImpl, dtype}: UnaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webgpuBackend = backend as WebGPUBackend;\n\n    const $dtype = dtype || x.dtype;\n    if (webgpuBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webgpuBackend.tensorMap.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webgpuBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const program: UnaryOpProgram = new UnaryOpProgram(x.shape, opType);\n    return webgpuBackend.runWebGPUProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opType: BinaryOpType,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  supportsComplex?: boolean,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opType Op type to create `BinaryOpProgram`.\n * @param cpuKernelImpl Optional. Shared functionality from tfjs-backend-cpu, it\n *     will be involved when necessary.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    {opType, cpuKernelImpl, supportsComplex = false, dtype}:\n        BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webgpuBackend = backend as WebGPUBackend;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webgpuBackend.tensorMap.get(a.dataId);\n      const bData = webgpuBackend.tensorMap.get(b.dataId);\n      let real: TensorInfo, imag: TensorInfo;\n      if (opType !== BinaryOpType.MUL) {\n        [real, imag] = [\n          [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n          [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n        ].map(complexParts => {\n          const [aPart, bPart] = complexParts;\n\n          const aHandle = {\n            dataId: aPart.dataId,\n            dtype: aPart.dtype,\n            shape: a.shape\n          };\n          const bHandle = {\n            dataId: bPart.dataId,\n            dtype: bPart.dtype,\n            shape: b.shape\n          };\n\n          const program = new BinaryOpProgram(opType, a.shape, b.shape);\n          return webgpuBackend.runWebGPUProgram(\n              program, [aHandle, bHandle],\n              upcastType(aPart.dtype, bPart.dtype));\n        });\n      } else {\n        const realProgram = new BinaryOpComplexProgram(\n            BinaryOpType.COMPLEX_MULTIPLY_REAL, a.shape, b.shape);\n        const imagProgram = new BinaryOpComplexProgram(\n            BinaryOpType.COMPLEX_MULTIPLY_IMAG, a.shape, b.shape);\n\n        const inputs = [\n          {\n            dataId: aData.complexTensorInfos.real.dataId,\n            dtype: aData.complexTensorInfos.real.dtype,\n            shape: a.shape\n          },\n          {\n            dataId: aData.complexTensorInfos.imag.dataId,\n            dtype: aData.complexTensorInfos.imag.dtype,\n            shape: a.shape\n          },\n          {\n            dataId: bData.complexTensorInfos.real.dataId,\n            dtype: bData.complexTensorInfos.real.dtype,\n            shape: b.shape\n          },\n          {\n            dataId: bData.complexTensorInfos.imag.dataId,\n            dtype: bData.complexTensorInfos.imag.dtype,\n            shape: b.shape\n          }\n        ];\n\n        real = webgpuBackend.runWebGPUProgram(realProgram, inputs, 'float32');\n        imag = webgpuBackend.runWebGPUProgram(imagProgram, inputs, 'float32');\n      }\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webgpuBackend});\n\n      webgpuBackend.disposeData(real.dataId);\n      webgpuBackend.disposeData(imag.dataId);\n\n      // TODO: Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webgpuBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aData = webgpuBackend.tensorMap.get(a.dataId).values as TypedArray;\n      const bData = webgpuBackend.tensorMap.get(b.dataId).values as TypedArray;\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aData as any as Uint8Array[]) :\n          aData;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bData as any as Uint8Array[]) :\n          bData;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return webgpuBackend.makeTensorInfo(outShape, $dtype, outValues);\n    }\n    const program = new BinaryOpProgram(opType, a.shape, b.shape);\n    return webgpuBackend.runWebGPUProgram(program, [a, b], $dtype);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BitwiseAnd, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const bitwiseAndImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a & b));\n\nexport const bitwiseAnd = binaryKernelFunc(BitwiseAnd, bitwiseAndImpl);\n\nexport const bitwiseAndConfig: KernelConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'cpu',\n  kernelFunc: bitwiseAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl<I extends number | string = number,\n  O extends number | string = number>(op: SimpleUnaryOperation<I, O>):\n    SimpleUnaryImpl<I, O> {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getArrayFromDType(dtype, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as unknown as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction validateIndices(\n    indices: TypedArray, indicesShape: number[], numParams: number) {\n  indices.forEach((index: number, i: number) => {\n    if (index < 0 || index >= numParams) {\n      const locString =\n          util.indexToLoc(\n                  i, indicesShape.length, util.computeStrides(indicesShape))\n              .join(',');\n      throw new Error(\n          `indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\n\nfunction validateSplits(\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n        numParamsDenseValues :\n        paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(\n    indices: TypedArray, indicesShape: number[],\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  const valueSlices: Array<[number, number]> = [];\n  let numValues = 0;\n\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta =\n            outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n\n  return {outSplits, valueSlices, numValues};\n}\n\nfunction getSplits(outSplits: number[][]) {\n  const splitsOut: TypedArray[] = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits) as TypedArray;\n    splitsOut.push(splits);\n\n    outSplits[i].forEach((value, j: number) => splits[j] = value);\n  }\n\n  return splitsOut;\n}\n\nfunction computeFlatOuterDims(orig: number[], numOutDims: number) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    valueSlices: Array<[number, number]>, valueSize: number, values: TypedArray,\n    valuesShape: number[]) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\n\nfunction getValues(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, valueSlices: Array<[number, number]>,\n    numValues: number): [TypedArray, number[]] {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n\n  const valuesOut = util.getArrayFromDType(\n                        paramsDenseValuesDType,\n                        util.sizeFromShape(valuesShape)) as TypedArray;\n\n  const numElements = paramsDenseValues.length;\n  const valueSize =\n      numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n  writeValueSlices(\n      paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize,\n      valuesOut, valuesShape);\n\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(\n    paramsNestedSplits: TypedArray[], paramsNestedSplitsShapes: number[][],\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, indices: TypedArray,\n    indicesShape: number[],\n    outputRaggedRank: number): [TypedArray[], TypedArray, number[]] {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {outSplits, valueSlices, numValues} = makeSplits(\n      indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(\n      paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType,\n      valueSlices, numValues);\n\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst INT32_MAX = 2147483647;\n\nexport function raggedRangeImpl(\n    starts: TypedArray, startsShape: number[], startsDType: DataType,\n    limits: TypedArray, limitsShape: number[], deltas: TypedArray,\n    deltasShape: number[]): [TypedArray, TypedArray] {\n  // Check input tensor shapes.\n  if (startsShape.length > 1) {\n    throw new Error('starts must be a scalar or vector');\n  }\n  if (limitsShape.length > 1) {\n    throw new Error('limits must be a scalar or vector');\n  }\n  if (deltasShape.length > 1) {\n    throw new Error('deltas must be a scalar or vector');\n  }\n\n  // Determine which tensors we need to broadcast.\n  const broadcastStarts = startsShape.length === 0;\n  const broadcastLimits = limitsShape.length === 0;\n  const broadcastDeltas = deltasShape.length === 0;\n\n  // nRows (number of output rows) is the size of the non-broadcast inputs,\n  // or 1 if all inputs are scalars.\n  const inSizes: number[] = [];\n  if (!broadcastStarts) {\n    inSizes.push(startsShape[0]);\n  }\n  if (!broadcastLimits) {\n    inSizes.push(limitsShape[0]);\n  }\n  if (!broadcastDeltas) {\n    inSizes.push(deltasShape[0]);\n  }\n\n  for (let i = 1; i < inSizes.length; ++i) {\n    if (inSizes[i] !== inSizes[i - 1]) {\n      throw new Error('starts, limits, and deltas must have the same shape');\n    }\n  }\n  const nRows = inSizes.length === 0 ? 1 : inSizes[0];\n\n  // Construct the rtNestedSplits tensor.\n  const rtNestedSplits =\n      util.getArrayFromDType('int32', nRows + 1) as TypedArray;\n  rtNestedSplits[0] = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const start = broadcastStarts ? starts[0] : starts[row];\n    const limit = broadcastLimits ? limits[0] : limits[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    if (delta === 0) {\n      throw new Error('Requires delta != 0');\n    }\n    let size: number;  // The number of elements in the specified range.\n    if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n      size = 0;\n    } else {\n      size = Math.ceil(Math.abs((limit - start) / delta));\n\n      if (size > INT32_MAX) {\n        throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);\n      }\n    }\n    rtNestedSplits[row + 1] = rtNestedSplits[row] + size;\n  }\n\n  const nVals = rtNestedSplits[nRows];\n\n  // Construct the rtDenseValues tensor.\n  const rtDenseValues =\n      util.getArrayFromDType(startsDType, nVals) as TypedArray;\n\n  let valueIndex = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const rowSize = rtNestedSplits[row + 1] - rtNestedSplits[row];\n    let value = broadcastStarts ? starts[0] : starts[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    for (let i = 0; i < rowSize; ++i) {\n      rtDenseValues[valueIndex++] = value;\n      value += delta;\n    }\n  }\n\n  return [rtNestedSplits, rtDenseValues];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[],\n    defaultValue: TensorBuffer<R, D>|DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = (defaultValue instanceof TensorBuffer) ?\n      defaultValue :\n      buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, StaticRegexReplace, StaticRegexReplaceAttrs} from '@tensorflow/tfjs-core';\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const staticRegexReplaceImpl = createSimpleUnaryImpl<string,\n  string>((x: string, attrs) => {\n    const {pattern, replaceGlobal, rewrite} =\n      attrs as unknown as StaticRegexReplaceAttrs;\n    // TODO(mattSoulanille): Don't create a regex each time.\n    return x.replace(new RegExp(pattern, replaceGlobal ? 'g' : ''), rewrite);\n});\n\nconst staticRegexReplace =\n  unaryKernelFuncFromImpl(StaticRegexReplace, staticRegexReplaceImpl);\n\nexport const staticRegexReplaceConfig: KernelConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'cpu',\n  kernelFunc: staticRegexReplace,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements = new Map<string, number>();\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    const existingIndex = uniqueElements.get(element);\n    if (existingIndex != null) {\n      indices[i] = existingIndex;\n    } else {\n      const uniqueIndex = uniqueElements.size;\n      uniqueElements.set(element, uniqueIndex);\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = uniqueElements.size;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Shared functionality among backends.\nexport {simpleAbsImpl} from './kernels/Abs';\nexport {addImpl} from './kernels/Add';\nexport {bincountImpl, bincountReduceImpl} from './kernels/Bincount_impl';\nexport {bitwiseAndImpl} from './kernels/BitwiseAnd';\nexport {castImpl} from './kernels/Cast';\nexport {ceilImpl} from './kernels/Ceil';\nexport {concatImpl} from './kernels/Concat_impl';\nexport {equalImpl} from './kernels/Equal';\nexport {expImpl} from './kernels/Exp';\nexport {expm1Impl} from './kernels/Expm1';\nexport {floorImpl} from './kernels/Floor';\nexport {floorDivImpl} from './kernels/FloorDiv';\nexport {gatherNdImpl} from './kernels/GatherNd_Impl';\nexport {gatherV2Impl} from './kernels/GatherV2_impl';\nexport {greaterImpl} from './kernels/Greater';\nexport {greaterEqualImpl} from './kernels/GreaterEqual';\nexport {lessImpl} from './kernels/Less';\nexport {lessEqualImpl} from './kernels/LessEqual';\nexport {linSpaceImpl} from './kernels/LinSpace_impl';\nexport {logImpl} from './kernels/Log';\nexport {maxImpl} from './kernels/Max_impl';\nexport {maximumImpl} from './kernels/Maximum';\nexport {minimumImpl} from './kernels/Minimum';\nexport {multiplyImpl} from './kernels/Multiply';\nexport {negImpl} from './kernels/Neg';\nexport {notEqualImpl} from './kernels/NotEqual';\nexport {prodImpl} from './kernels/Prod';\nexport {raggedGatherImpl} from './kernels/RaggedGather_impl';\nexport {raggedRangeImpl} from './kernels/RaggedRange_impl';\nexport {raggedTensorToTensorImpl} from './kernels/RaggedTensorToTensor_impl';\nexport {rangeImpl} from './kernels/Range_impl';\nexport {rsqrtImpl} from './kernels/Rsqrt';\nexport {scatterImpl} from './kernels/Scatter_impl';\nexport {sigmoidImpl} from './kernels/Sigmoid';\nexport {sliceImpl} from './kernels/Slice';\nexport {sparseFillEmptyRowsImpl} from './kernels/SparseFillEmptyRows_impl';\nexport {sparseReshapeImpl} from './kernels/SparseReshape_impl';\nexport {sparseSegmentReductionImpl} from './kernels/SparseSegmentReduction_impl';\nexport {sqrtImpl} from './kernels/Sqrt';\nexport {squaredDifferenceImpl} from './kernels/SquaredDifference';\nexport {staticRegexReplaceImpl} from './kernels/StaticRegexReplace';\nexport {stridedSliceImpl} from './kernels/StridedSlice_impl';\nexport {stringNGramsImpl} from './kernels/StringNGrams_impl';\nexport {stringSplitImpl} from './kernels/StringSplit_impl';\nexport {stringToHashBucketFastImpl} from './kernels/StringToHashBucketFast_impl';\nexport {subImpl} from './kernels/Sub';\nexport {tileImpl} from './kernels/Tile_impl';\nexport {topKImpl} from './kernels/TopK_impl';\nexport {transposeImpl} from './kernels/Transpose_impl';\nexport {uniqueImpl} from './kernels/Unique_impl';\nexport {ComplexBinaryKernelImpl, SimpleBinaryKernelImpl} from './utils/binary_types';\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  floorDivImpl: floorDivImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  greaterImpl: greaterImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  lessImpl: lessImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  castImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  floorDivImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  prodImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  scatterImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const abs =\n    unaryKernelFunc({opType: UnaryOpType.ABS, cpuKernelImpl: simpleAbsImplCPU});\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgpu',\n  kernelFunc: abs\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const acos = unaryKernelFunc({opType: UnaryOpType.ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgpu',\n  kernelFunc: acos\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const acosh = unaryKernelFunc({opType: UnaryOpType.ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgpu',\n  kernelFunc: acosh\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nexport const addKernelFunc = binaryKernelFunc(\n    {opType: BinaryOpType.ADD, cpuKernelImpl: cpuAdd, supportsComplex: true});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgpu',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class AddNPackedProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[];\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shapes: number[][]) {\n    this.outputShape = shapes[0];\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n    this.shaderKey = 'addN';\n  }\n\n  getUserCode(): string {\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`let v${variable} = get${variable}ByOutputCoords(coords);`);\n    });\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    const userCode = `\n      ${main('index')} {\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if (flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            ${snippets.join('\\n        ')}\n            setOutputAtIndex(flatIndex, ${operation});\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {AddNPackedProgram} from '../addn_packed_webgpu';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  const program = new AddNPackedProgram(shapes);\n  return backend.runWebGPUProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgpu',\n  kernelFunc: addN as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class TransposeSharedProgram implements WebGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[]};\n  dispatch: [number, number, number];\n  // Note that the maximum number of workgroup invocations by webgpu is 256.\n  workgroupSize: [number, number, number] = [16, 16, 1];\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [0], y: [1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize, [1, 1, 1]);\n\n    this.shaderKey = 'transposeShared';\n  }\n\n  getUserCode(): string {\n    util.assert(\n        this.workgroupSize[0] === this.workgroupSize[1],\n        () => `Must be a square tile, current tile shape is ${\n            this.workgroupSize[0]} x ${this.workgroupSize[1]}`);\n    const tileSize = this.workgroupSize[0];\n    const userCode = `\n      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0] + 1}>, ${\n        this.workgroupSize[0]}>;\n      ${main()} {\n        var x = i32(workgroupId.x) * ${tileSize} + i32(localId.x);\n        var y = i32(workgroupId.y) * ${tileSize} + i32(localId.y);\n        let width = uniforms.outShape[0];\n        let height = uniforms.outShape[1];\n        if (x < width && y < height) {\n          tile[localId.y][localId.x] = f32(A[y * width + x]);\n        }\n        workgroupBarrier();\n\n        x = i32(workgroupId.y) * ${tileSize} + i32(localId.x);\n        y = i32(workgroupId.x) * ${tileSize} + i32(localId.y);\n        if (x < height && y < width) {\n          setOutputAtIndex((y * height + x), tile[localId.x]\n            [localId.y]);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getCoordsXYZ, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class TransposeProgram implements WebGPUProgram {\n  variableNames = ['A'];\n  shaderKey: string;\n  outputShape: number[];\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  newDim: number[];\n  size = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    this.newDim = newDim;\n    this.shaderKey = `transpose_${newDim}`;\n  }\n\n  getUserCode(): string {\n    const dtype = getCoordsDataType(this.outputShape.length);\n    const switched = getSwitchedCoords(this.newDim);\n\n    const userCode = `\n      ${main('index')} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            setOutputAtIndex(flatIndex, A[getIndexFromCoords${\n        this.outputShape.length}D(\n              ${dtype}(${switched}), uniforms.aShape)]);\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nexport function getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = `coords.${getCoordsXYZ(i)}`;\n  }\n\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Transpose, TransposeAttrs, TransposeInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {transposeImplCPU as cpuTranspose} from '../kernel_utils/shared';\n\nimport {TransposeSharedProgram} from '../transpose_shared_webgpu';\nimport {TransposeProgram} from '../transpose_webgpu';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webgpuBackend = backend;\n\n  const xRank = x.shape.length;\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = webgpuBackend.tensorMap.get(x.dataId);\n    const values = xData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n  if (x.shape.length === 2 && util.arraysEqual(perm, [1, 0])) {\n    const program = new TransposeSharedProgram(x.shape, perm);\n    return webgpuBackend.runWebGPUProgram(program, [x], x.dtype);\n  }\n  const program = new TransposeProgram(x.shape, perm);\n  return webgpuBackend.runWebGPUProgram(program, [x], x.dtype);\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgpu',\n  kernelFunc: transpose as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ReduceProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'reduceSize : i32,';\n  reduceType: 'all'|'any'|'max'|'mean'|'min'|'prod'|'sum';\n  inputShape: number[];\n  size = true;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'mean'|'min'|'prod'|'sum',\n      maxComputeWorkgroupSizeX: number) {\n    this.inputShape = [reduceInfo.batchSize, reduceInfo.inSize];\n    const [outputShape, ] =\n        backend_util.computeOutAndReduceShapes(this.inputShape, [1]);\n    this.outputShape = outputShape.length === 0 ? [1] : outputShape;\n    // If reduceSize |reduceInfo.inSize| is very large, the I/O accessing will\n    // become the bottleneck. Increasing workgroupSize can reduce the times of\n    // accessing global memory. The threshold value is just to make sure the\n    // reduceSize is large enough for a bigger workgroupSize.\n    if (reduceInfo.inSize >= 32768 && maxComputeWorkgroupSizeX >= 512) {\n      this.workgroupSize = [512, 1, 1];\n    } else if (reduceInfo.inSize >= 4096) {\n      this.workgroupSize = [256, 1, 1];\n    } else {\n      this.workgroupSize = [64, 1, 1];\n    }\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    // A work group only outputs a data, so we transfer [1, 1, 1] to compute\n    // dispatch size.\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, this.outputShape, [1, 1, 1]);\n\n    this.reduceType = reduceType;\n    this.shaderKey = `reduce_${reduceType}`;\n  }\n\n  getUserCode(): string {\n    let reduceOp = ``;\n    let initValue = '0.0';\n    const workgroupSizeX = this.workgroupSize[0];\n    if (this.reduceType === 'min' || this.reduceType === 'max') {\n      reduceOp = `\n         if (isnan(candidate)) {\n          bestValue = uniforms.NAN;\n         } else if (!isnan(bestValue) && candidate ${\n          this.reduceType === 'min' ? '<' : '>'} bestValue)\n           {  bestValue = candidate; }`;\n      initValue = 'f32(x[offset])';\n    } else if (this.reduceType === 'sum' || this.reduceType === 'mean') {\n      reduceOp = ' bestValue = bestValue + candidate; ';\n    } else if (this.reduceType === 'prod') {\n      reduceOp = ' bestValue = bestValue * candidate; ';\n      initValue = '1.0';\n    } else if (this.reduceType === 'all') {\n      reduceOp = ' bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ';\n      initValue = '1.0';\n    } else if (this.reduceType === 'any') {\n      reduceOp = ' bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ';\n      initValue = '0.0';\n    }\n\n    const outputSnippet = this.reduceType === 'mean' ?\n        // tslint:disable-next-line:max-line-length\n        `setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));` :\n        `setOutputAtIndex(outputIndex, bestValue);`;\n\n    const sharedMemorySnippet = `\n         var<workgroup> xBestValues : array<f32, ${workgroupSizeX}>;\n       `;\n\n    const userCode = `\n       fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n       }\n\n       ${sharedMemorySnippet}\n       fn getOffset(outputIndex : i32) -> i32 {\n         let outputCoords = getCoordsFromIndex(outputIndex);\n         let offset = ${\n        this.outputShape.length === 1 ?\n            'outputCoords' :\n            'outputCoords[0]'} * uniforms.reduceSize;\n          return offset;\n       }\n       ${main('index')} {\n         let outputIndex = index / ${workgroupSizeX};\n         let offset = getOffset(outputIndex);\n         var bestValue = ${initValue};\n         let Length = uniforms.reduceSize;\n         let WorkPerThread = DIV_CEIL(u32(Length), ${workgroupSizeX}u);\n         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;\n             k = k + ${workgroupSizeX}) {\n           let candidate = f32(x[offset + k]);\n           ${reduceOp}\n         }\n         xBestValues[localId.x] = bestValue;\n         workgroupBarrier();\n\n         var reduceSize = min(u32(Length), ${workgroupSizeX}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            ${reduceOp}\n            xBestValues[localId.x] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (localId.x == 0u && outputIndex < uniforms.size) {\n          ${outputSnippet}\n        }\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reshape} from '../kernels/Reshape';\nimport {transpose} from '../kernels/Transpose';\nimport {ReduceProgram} from '../reduce_webgpu';\n\nimport {maxImplCPU} from './shared';\nimport {prodImplCPU} from './shared';\n\ntype ReduceTypes = 'all'|'any'|'max'|'mean'|'min'|'prod'|'sum';\nconst RETURN_TYPES: {[key in ReduceTypes]?: DataType} = {\n  'mean': 'float32',\n  'all': 'bool',\n  'any': 'bool',\n};\n\nexport function reduce(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    reduceType: ReduceTypes, backend: WebGPUBackend): TensorInfo {\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n\n  let input = x;\n  if (permutedAxes != null) {\n    input = transpose({inputs: {x}, attrs: {perm: permutedAxes}, backend});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(input);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(reduceType, axes, xRank);\n\n  const [reduceOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(input.shape, axes);\n  let resOutShape = reduceOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    resOutShape = backend_util.expandShapeToKeepDim(reduceOutShape, origAxes);\n  }\n\n  let res;\n  if ((reduceType === 'max' || reduceType === 'prod') &&\n      backend.shouldExecuteOnCPU([input])) {\n    const xVals = backend.tensorMap.get(input.dataId).values as TypedArray;\n    switch (reduceType) {\n      case 'max':\n        const outValues = maxImplCPU(\n            xVals, util.sizeFromShape(reduceShape), resOutShape, x.dtype);\n        res = backend.makeTensorInfo(resOutShape, x.dtype, outValues);\n        break;\n      case 'prod':\n        const {outVals, outShape, outDtype} =\n            prodImplCPU(input.shape, input.dtype, xVals, axes);\n        res = backend.makeTensorInfo(outShape, outDtype, outVals);\n        break;\n      default:\n        throw new Error(\n            `${reduceType} CPU implementation is not yet supported.`);\n    }\n  } else {\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(input.shape);\n    const batchSize = xSize / inSize;\n\n    const reduceInfo = {windowSize: inSize, inSize, batchSize, outSize: 1};\n    const dtype = RETURN_TYPES[reduceType] || sumOutType(x.dtype);\n    const uniformData = [\n      {type: 'int32', data: [inSize]},\n    ];\n    const program = new ReduceProgram(\n        reduceInfo, reduceType, backend.device.limits.maxComputeWorkgroupSizeX);\n    const reduced =\n        backend.runWebGPUProgram(program, [input], dtype, uniformData);\n    toDispose.push(reduced);\n\n    res = reshape({inputs: {x: reduced}, attrs: {shape: resOutShape}, backend});\n  }\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return res;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function all(\n    args: {inputs: AllInputs, attrs: AllAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {keepDims, axis} = attrs;\n\n  return reduce(x, axis, keepDims, 'all', backend);\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgpu',\n  kernelFunc: all as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function any(\n    args: {inputs: AnyInputs, attrs: AnyAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {keepDims, axis} = attrs;\n\n  return reduce(x, axis, keepDims, 'any', backend);\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgpu',\n  kernelFunc: any as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {getCoordsXYZ, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ArgMinMaxProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  variableNames = ['x'];\n  uniforms = 'infinityValue : f32,';\n  inputShape: number[];\n  reductionFactor: number;\n  op: string;\n  size = true;\n  private type: string;\n\n  constructor(inputShape: number[], axis: number, reduceType: 'min'|'max') {\n    const axes = [axis];\n\n    this.op = reduceType === 'min' ? '<' : '>';\n\n    // |outShape| is the shape with the removed axis\n    const [outputShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(inputShape, axes);\n\n    this.outputShape = outputShape.length === 0 ? [1] : outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    // The shared algorithm is mainly used for large reduce size. It fully\n    // utilizes the threads in one workgroup to do the reduction. However,\n    // when the reduce size is very small, it's better to use the plain\n    // algorithm to reduce the number of workgroups to speedup. The threthold\n    // can be further tuned.\n    if (util.sizeFromShape(reduceShape) < 32) {\n      this.type = 'plain';\n      this.dispatch = computeDispatch(\n          this.dispatchLayout, this.outputShape, this.workgroupSize);\n    } else {\n      this.type = 'shared';\n      // A work group only outputs a data, so we transfer [1, 1, 1] to compute\n      // dispatch size.\n      this.dispatch =\n          computeDispatch(this.dispatchLayout, this.outputShape, [1, 1, 1]);\n    }\n\n    this.inputShape = inputShape;\n    this.shaderKey = `argMinMax_${this.op}_${this.type}`;\n  }\n\n  getUserCode(): string {\n    const workgroupSizeX = this.workgroupSize[0];\n    const getInputShapeLastDim = () => {\n      if (this.inputShape.length === 1) {\n        return 'uniforms.xShape';\n      } else {\n        return `uniforms.xShape.${getCoordsXYZ(this.inputShape.length - 1)}`;\n      }\n    };\n\n    const splitOutputCoords = () => {\n      let snippet = '';\n      if (this.outputShape.length === 1) {\n        if (this.inputShape.length !== 1) {\n          snippet += 'outputCoords,';\n        }\n      } else {\n        for (let i = 0; i < this.outputShape.length; i++) {\n          snippet += `outputCoords.${getCoordsXYZ(i)},`;\n        }\n      }\n      return snippet;\n    };\n\n    if (this.type === 'shared') {\n      const sharedMemorySnippet = `\n      var<workgroup> xBestIndices : array<i32, ${workgroupSizeX}>;\n      var<workgroup> xBestValues : array<f32, ${workgroupSizeX}>;\n    `;\n      const userCode = `\n      fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n      }\n\n      ${sharedMemorySnippet}\n\n      ${main('index')} {\n        let outputIndex = index / ${workgroupSizeX};\n        let reduceLength = ${getInputShapeLastDim()};\n\n        var bestIndex = i32(localId.x);\n        var bestValue = uniforms.infinityValue;\n        let outputCoords = getCoordsFromIndex(outputIndex);\n        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;\n            k = k + ${workgroupSizeX}) {\n          let candidate = getX(${splitOutputCoords()} k);\n          if (!isnan(candidate) && candidate ${this.op} bestValue) {\n            bestValue = candidate;\n            bestIndex = k;\n          }\n        }\n        xBestValues[localId.x] = bestValue;\n        xBestIndices[localId.x] = bestIndex;\n        workgroupBarrier();\n\n        var reduceSize = min(u32(reduceLength), ${workgroupSizeX}u);\n        for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n            currentSize = reduceSize / 2u) {\n          let interval = DIV_CEIL(reduceSize, 2u);\n          if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              xBestValues[localId.x] = bestValue;\n              xBestIndices[localId.x] = xBestIndices[localId.x + interval];\n            }\n          }\n          reduceSize = interval;\n          workgroupBarrier();\n        }\n\n        if (localId.x == 0u && outputIndex < uniforms.size) {\n          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);\n        }\n      }\n    `;\n      return userCode;\n    } else {\n      const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let outputCoords = getCoordsFromIndex(index);\n          var bestIndex = 0;\n          var bestValue = getX(${splitOutputCoords()} 0);\n          let reduceLength = ${getInputShapeLastDim()};\n          for (var i = 1; i < reduceLength; i++) {\n            let candidate = getX(${splitOutputCoords()} i);\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              bestIndex = i;\n            }\n          }\n          setOutputAtIndexI32(index, bestIndex);\n        }\n      }\n      `;\n      return userCode;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: WebGPUBackend, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const program = new ArgMinMaxProgram($x.shape, axes[0], 'max');\n  const uniformData = [{type: 'float32', data: [Number.NEGATIVE_INFINITY]}];\n  const out = backend.runWebGPUProgram(program, [$x], 'int32', uniformData);\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgpu',\n  kernelFunc: argMax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: WebGPUBackend, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n  const program = new ArgMinMaxProgram($x.shape, axes[0], 'min');\n  const uniformData = [{type: 'float32', data: [Number.POSITIVE_INFINITY]}];\n  const out = backend.runWebGPUProgram(program, [$x], 'int32', uniformData);\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgpu',\n  kernelFunc: argMin as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const asin = unaryKernelFunc({opType: UnaryOpType.ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgpu',\n  kernelFunc: asin\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const asinh = unaryKernelFunc({opType: UnaryOpType.ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgpu',\n  kernelFunc: asinh\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const atan = unaryKernelFunc({opType: UnaryOpType.ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgpu',\n  kernelFunc: atan\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const atan2 = binaryKernelFunc({opType: BinaryOpType.ATAN2});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgpu',\n  kernelFunc: atan2\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const atanh = unaryKernelFunc({opType: UnaryOpType.ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgpu',\n  kernelFunc: atanh\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class PoolWithFilterSizeEqualsOneProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = `strides : vec2<i32>,`;\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'poolWithFilterSizeEqualsOne';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n\n          let xRCCorner = coords.yz * uniforms.strides;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          let value = getX(batch, xRCorner, xCCorner, d);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Pool2DProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms =\n      `strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,`;\n  // TODO(jiajia.qin@intel.com): Dynamically choose different workgroupSize for\n  // different output shapes.\n  workgroupSize: [number, number, number] = [128, 1, 1];\n  poolType: 'max'|'avg';\n  size = true;\n  computePositions: boolean;\n  flattenPositions: boolean;\n  includeBatchIndex: boolean;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions = false, flattenPositions = false,\n      includeBatchIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.poolType = poolType;\n    this.computePositions = computePositions;\n    this.flattenPositions = flattenPositions;\n    this.includeBatchIndex = includeBatchIndex;\n    this.shaderKey = `pool2D_${poolType}_${computePositions}_${\n        flattenPositions}_${includeBatchIndex}`;\n  }\n\n  getUserCode(): string {\n    let updateSnippet: string;\n    if (this.poolType === 'avg') {\n      updateSnippet = `resultValue = resultValue + value; count = count + 1.0;`;\n    } else if (this.computePositions) {\n      const positionStr = this.flattenPositions ?\n          (this.includeBatchIndex ?\n               `((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d` :\n               `(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d`) :\n          `wR * uniforms.filterDims.y + wC`;\n      updateSnippet = `let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ${positionStr};\n      }`;\n    } else {\n      updateSnippet = `resultValue = max(value, resultValue);`;\n    }\n\n    let returnValue = `resultValue`;\n    if (this.poolType === 'avg') {\n      returnValue = `resultValue / max(count, 1.0)`;\n    }\n\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          ${\n        this.computePositions ?\n            `var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;` :\n            `var resultValue = ${\n                this.poolType === 'avg' ? '0.0' : '-1.0 / pow(10.0, -20.0)'};`}\n\n          var count = 0.0;\n          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {\n            let xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {\n              let xC = xCCorner + wC;\n              if (xC < 0 || xC >= uniforms.convDims.y) {\n                continue;\n              }\n\n              let value = getX(batch, xR, xC, d);\n              ${updateSnippet}\n            }\n          }\n\n          ${\n        this.computePositions ? `setOutputAtIndexI32(index, maxPosition);` :\n                                `setOutputAtIndex(index, ${returnValue});`}\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nexport class Pool3DProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms =\n      `strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,`;\n  workgroupSize: [number, number, number] = [128, 1, 1];\n  poolType: 'max'|'avg';\n  size = true;\n  computePositions: boolean;\n  flattenPositions: boolean;\n  includeBatchIndex: boolean;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions = false, flattenPositions = false,\n      includeBatchIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.poolType = poolType;\n    this.computePositions = computePositions;\n    this.flattenPositions = flattenPositions;\n    this.includeBatchIndex = includeBatchIndex;\n    this.shaderKey = `pool3D_${poolType}_${computePositions}_${\n        flattenPositions}_${includeBatchIndex}`;\n  }\n\n  getUserCode(): string {\n    let updateSnippet: string;\n    if (this.poolType === 'avg') {\n      updateSnippet = `resultValue += value; count += 1.0;`;\n    } else if (this.computePositions) {\n      const positionStr = this.flattenPositions ?\n          (this.includeBatchIndex ?\n               `(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch` :\n               `((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch`) :\n          `wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC`;\n      updateSnippet = `let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ${positionStr};\n      }`;\n    } else {\n      updateSnippet = `resultValue = max(value, resultValue);`;\n    }\n\n    let returnValue = `resultValue`;\n    if (this.poolType === 'avg') {\n      returnValue = `resultValue / max(count, 1.0)`;\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords.x;\n          let ch = coords.u;\n\n          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n          let xDCorner = xCorner.x;\n          let xRCorner = xCorner.y;\n          let xCCorner = xCorner.z;\n\n          ${\n        this.computePositions ?\n            `var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;` :\n            `var resultValue = ${\n                this.poolType === 'avg' ? '0.0' : '-1.0 / pow(10.0, -20.0)'};`}\n\n          var count = 0.0;\n          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {\n            let xD = xDCorner + wD;\n            if (xD < 0 || xD >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {\n              let xR = xRCorner + wR;\n              if (xR < 0 || xR >= uniforms.convDims.y) {\n                continue;\n              }\n\n              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {\n                let xC = xCCorner + wC;\n                if (xC < 0 || xC >= uniforms.convDims.z) {\n                  continue;\n                }\n\n                let value = getX(batch, xD, xR, xC, ch);\n                ${updateSnippet}\n              }\n            }\n          }\n\n          ${\n        this.computePositions ? `setOutputAtIndexI32(index, maxPosition);` :\n                                `setOutputAtIndex(index, ${returnValue});`}\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: WebGPUBackend, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  return reduce(x, reductionIndices, keepDims, 'max', backend);\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgpu',\n  kernelFunc: max as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function mean(\n    args: {inputs: MeanInputs, attrs: MeanAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {keepDims, axis} = attrs;\n\n  return reduce(x, axis, keepDims, 'mean', backend);\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgpu',\n  kernelFunc: mean as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {PoolWithFilterSizeEqualsOneProgram} from '../pool_filtersizeone_webgpu';\nimport {Pool2DProgram} from '../pool_webgpu';\n\nimport {identity} from './Identity';\nimport {max} from './Max';\nimport {mean} from './Mean';\nimport {reshape} from './Reshape';\n\ntype PoolType = 'max'|'avg';\nexport function poolImpl(\n    x: TensorInfo, convInfo: backend_util.Conv2DInfo, poolType: PoolType,\n    backend: WebGPUBackend): TensorInfo {\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n\n  if (convInfo.filterWidth === convInfo.inWidth &&\n      convInfo.filterHeight === convInfo.inHeight && convInfo.batchSize === 1 &&\n      convInfo.padInfo.type === 'VALID') {\n    const length = x.shape.length;\n    const reshapeX = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: [\n          x.shape[length - 3] * x.shape[length - 2] /* height * width */,\n          x.shape[length - 1] /* channel */\n        ]\n      }\n    });\n    let reduceX;\n    if (poolType === 'avg') {\n      reduceX = mean(\n          {inputs: {x: reshapeX}, backend, attrs: {axis: 0, keepDims: false}});\n    } else {\n      util.assert(poolType === 'max', () => `Invalid pool type ${poolType}`);\n      reduceX = max({\n        inputs: {x: reshapeX},\n        backend,\n        attrs: {reductionIndices: 0, keepDims: false}\n      });\n    }\n\n    const result = reshape(\n        {inputs: {x: reduceX}, backend, attrs: {shape: convInfo.outShape}});\n    backend.disposeData(reshapeX.dataId);\n    backend.disposeData(reduceX.dataId);\n    return result;\n  }\n\n  let program: Pool2DProgram|PoolWithFilterSizeEqualsOneProgram;\n  const dimensions =\n      [{type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}];\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1) {\n    program = new PoolWithFilterSizeEqualsOneProgram(convInfo);\n  } else {\n    if (poolType === 'avg') {\n      program = new Pool2DProgram(convInfo, 'avg');\n    } else {\n      util.assert(poolType === 'max', () => `Invalid pool type ${poolType}`);\n      program = new Pool2DProgram(convInfo, 'max');\n    }\n\n    dimensions.push(\n        {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        },\n        {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]}, {\n          type: 'int32',\n          data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n        });\n  }\n\n  return backend.runWebGPUProgram(program, [x], x.dtype, dimensions);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {poolImpl} from './Pool_impl';\n\nexport function avgPool(\n    args: {inputs: AvgPoolInputs, backend: WebGPUBackend, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  return poolImpl(x, convInfo, 'avg', backend);\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgpu',\n  kernelFunc: avgPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Pool3DProgram} from '../pool_webgpu';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: WebGPUBackend,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg');\n  const dimensions = [\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data:\n          [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n    },\n    {\n      type: 'int32',\n      data: [convInfo.inDepth, convInfo.inHeight, convInfo.inWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight,\n        convInfo.effectiveFilterWidth\n      ]\n    }\n  ];\n  return backend.runWebGPUProgram(avgPoolProgram, [x], x.dtype, dimensions);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgpu',\n  kernelFunc: avgPool3D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class AvgPool2DBackpropProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy'];\n  uniforms =\n      `strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, avgMultiplier : f32,`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `avgPool2DBackprop`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n\n            dotProd = dotProd + dyValue * uniforms.avgMultiplier;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy'];\n  uniforms = `strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `avgPool3DBackprop`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              dotProd += dyValue * uniforms.avgMultiplier;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: WebGPUBackend,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const program = new AvgPool3DBackpropProgram(convInfo);\n  const avgMultiplier =\n      1 / (convInfo.filterDepth * convInfo.filterHeight * convInfo.filterWidth);\n  const uniformData = [\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth - 1 - convInfo.padInfo.front,\n        convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top,\n        convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight,\n        convInfo.effectiveFilterWidth\n      ]\n    },\n    {type: 'int32', data: [convInfo.outDepth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'float32', data: [avgMultiplier]}\n  ];\n  return backend.runWebGPUProgram(program, [dy], x.dtype, uniformData);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgpu',\n  kernelFunc: avgPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {assertNotComplex} from '../webgpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: WebGPUBackend,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const program = new AvgPool2DBackpropProgram(convInfo);\n  const avgMultiplier = 1 / (convInfo.filterHeight * convInfo.filterWidth);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top,\n        convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    },\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'float32', data: [avgMultiplier]}\n  ];\n  return backend.runWebGPUProgram(program, [dy], x.dtype, uniformData);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgpu',\n  kernelFunc: avgPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgpu',\n  kernelFunc: batchMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getCoordsXYZ, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SliceProgram implements WebGPUProgram {\n  variableNames = ['source'];\n  uniforms: string;\n  outputShape: number[];\n  shaderKey: string;\n  rank: number;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  start: number[];\n  size = true;\n\n  constructor(start: number[], destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    this.start = start;\n    this.uniforms = `start : ${getCoordsDataType(start.length)}, `;\n    this.shaderKey = 'slice';\n  }\n\n  getUserCode(): string {\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getCoords(this.rank);\n    let coordSum;\n    if (this.start.length === 1) {\n      coordSum = this.outputShape.map((_, i) => {\n        return `sourceLoc = uniforms.start + coords;`;\n      });\n    } else {\n      coordSum = this.outputShape.map((_, i) => {\n        return `sourceLoc.${coords[i]} = uniforms.start.${\n            getCoordsXYZ(i)} + coords.${coords[i]};`;\n      });\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          var sourceLoc : ${dtype};\n          let coords = getCoordsFromIndex(index);\n          ${coordSum.join('\\n')}\n          setOutputAtIndex(index, getSource(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(coord => `sourceLoc.${coord}`).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_webgpu';\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: WebGPUBackend, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTensorData = backend.tensorMap.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTensorData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // TODO(xing.xu): Add shadow slice support.\n  const program = new SliceProgram($begin, $size);\n  const uniformData = [{type: 'int32', data: $begin}];\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: WebGPUBackend,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGPU backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgpu',\n  kernelFunc: batchToSpaceND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {atomicAddSnippet} from './shader_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nconst writeSnippet = `\n  fn bincount_write(index: i32, value: f32) {\n    ${atomicAddSnippet('&result[index]', 'value', 'float32')}\n  }\n`;\n\nconst binaryWriteSnippet = `\n  fn bincount_write(index: i32, value: f32) {\n    atomicStore(&result[index], bitcast<i32>(value));\n  }\n`;\n\nexport class BincountProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'binCountSize : i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  atomic = true;\n  hasWeights = true;\n  binaryOutput = false;\n  rank: number;\n\n  constructor(\n      shape: [number]|[number, number], hasWeights: boolean,\n      binaryOutput = false) {\n    this.outputShape = shape;\n    this.rank = shape.length;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.binaryOutput = binaryOutput;\n    if (binaryOutput) {\n      this.atomic = false;\n    }\n    this.hasWeights = hasWeights;\n    if (this.hasWeights) {\n      this.variableNames.push('w');\n    }\n    this.shaderKey =\n        `bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${this.binaryOutput ? binaryWriteSnippet : writeSnippet}\n  ${main('index')} {\n    ${\n        this.rank === 1 ?\n            `if (index < uniforms.xShape) {\n      let indexVal = i32(getX(index));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${\n                this.binaryOutput ? 1. :\n                                    (this.hasWeights ? 'getW(index)' : '1.')};\n        bincount_write(indexVal, value);\n      }\n    }` :\n            `let coord = getCoordsFromIndex(index);\n    if (coordsInBounds2D(coord, uniforms.xShape)) {\n      let indexVal = i32(getX(coord[0], coord[1]));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${\n                this.binaryOutput ?\n                    1. :\n                    (this.hasWeights ? 'getW(coord[0], coord[1])' : '1.')};\n        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);\n      }\n    }`}\n  }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BincountProgram} from '../bincount_webgpu';\n\nimport {fill} from './Fill';\n\nexport function bincount(\n    args:\n        {inputs: BincountInputs, backend: WebGPUBackend, attrs: BincountAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const weightsSize = util.sizeFromShape(weights.shape);\n  const hasWeights = weightsSize > 0;\n  const outputSize: [number] = [size];\n  const dtype = weights.dtype;\n\n  const output = fill({backend, attrs: {shape: outputSize, value: 0, dtype}});\n  const program = new BincountProgram([xSize], hasWeights);\n  const uniformData = [{type: 'int32', data: [size]}];\n  const bincountInputs: TensorInfo[] = hasWeights ? [x, weights] : [x];\n  const res = backend.runWebGPUProgram(\n      program, bincountInputs, dtype, uniformData, output);\n\n  return res;\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgpu',\n  kernelFunc: bincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BroadcastArgsProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['s0', 's1'];\n  uniforms = 's0Size : i32, s1Size : i32, ';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shape: number) {\n    this.outputShape = [shape];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'broadcastArgs';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n  ${main('index')} {\n    if (index < uniforms.size) {\n      var s0 = 1.0;\n      var s1 = 1.0;\n      let indexS0 = index - uniforms.size + uniforms.s0Size;\n      let indexS1 = index - uniforms.size + uniforms.s1Size;\n      if (indexS0 >= 0) {\n        s0 = getS0(indexS0);\n      }\n      if (indexS1 >= 0) {\n        s1 = getS1(indexS1);\n      }\n\n      if (s0 == 1.0) {\n        setOutputAtIndex(index, s1);\n      } else if (s1 == 1.0) {\n        setOutputAtIndex(index, s0);\n      } else if (s0 != s1) {\n        setOutputAtIndex(index, uniforms.NAN);\n      } else {\n        setOutputAtIndex(index, s0);\n      }\n    }\n  }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BroadcastArgsProgram} from '../broadcast_args_webgpu';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: WebGPUBackend,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  if (backend.shouldExecuteOnCPU([s0, s1])) {\n    const s0TensorInfo = backend.tensorMap.get(s0.dataId);\n    const s1TensorInfo = backend.tensorMap.get(s1.dataId);\n    const s0Vals = s0TensorInfo.values as TypedArray;\n    const s1Vals = s1TensorInfo.values as TypedArray;\n    const broadcastShape = backend_util.assertAndGetBroadcastShape(\n        Array.from(s0Vals), Array.from(s1Vals));\n    return backend.makeTensorInfo(\n        [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n  }\n\n  const s0Size = util.sizeFromShape(s0.shape);\n  const s1Size = util.sizeFromShape(s1.shape);\n  const outputSize = Math.max(s0Size, s1Size);\n\n  const program = new BroadcastArgsProgram(outputSize);\n  const uniformData =\n      [{type: 'int32', data: [s0Size]}, {type: 'int32', data: [s1Size]}];\n  return backend.runWebGPUProgram(program, [s0, s1], 'int32', uniformData);\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'webgpu',\n  kernelFunc: broadcastArgs as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU as cpuNotEqual} from '../kernel_utils/shared';\n\nexport const notEqual = binaryKernelFunc({\n  opType: BinaryOpType.NOT_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuNotEqual\n});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.tensorMap.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgpu',\n  kernelFunc: real as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nexport function int(input: TensorInfo, backend: WebGPUBackend): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, UnaryOpType.TO_INT);\n  const output = backend.runWebGPUProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {castImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: WebGPUBackend, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO: Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeData(floatX.dataId);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeData(realPart.dataId);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const values = backend.tensorMap.get(x.dataId).values as TypedArray;\n    const [resultShape, resultType, resultData] =\n        castImplCPU(values, x.shape, x.dtype, dtype);\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeData(zerosTensorInfo.dataId);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const ceil =\n    unaryKernelFunc({opType: UnaryOpType.CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgpu',\n  kernelFunc: ceil\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ClipVec4Program implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  variableNames = ['A'];\n  uniforms = 'minVal : f32, maxVal : f32,';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workPerThread = 4;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  outputComponent = 4;\n  size = true;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n    this.shaderKey = 'clipVec4';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          var clampedValue = clamp(\n              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));\n          clampedValue = select(clampedValue, value, isnanVec4(value));\n          setOutputAtIndex(index, clampedValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ClipProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  variableNames = ['A'];\n  uniforms = 'minVal : f32, maxVal : f32,';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  minVal: number;\n  maxVal: number;\n  size = true;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'clip';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          if (isnan(value)) {\n            setOutputAtIndex(index, value);\n            return;\n          }\n          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {ClipVec4Program} from '../clip_vec4_webgpu';\nimport {ClipProgram} from '../clip_webgpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: WebGPUBackend,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program: ClipProgram|ClipVec4Program;\n  const uniformData = [\n    {type: 'float32', data: [clipValueMin]},\n    {type: 'float32', data: [clipValueMax]}\n  ];\n  if (util.sizeFromShape(x.shape) % 4 === 0) {\n    program = new ClipVec4Program(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgpu',\n  kernelFunc: clipByValue as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ComplexAbsProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['real', 'imag'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'complexAbs';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let re = abs(getRealByOutputIndex(index));\n        let im = abs(getImagByOutputIndex(index));\n        let mx = max(re, im);\n\n        // The length function in wgsl may be not underflow-safe on some GPUs.\n        // So the safe solution is to ensure underflow-safety in all cases.\n        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ComplexAbsProgram} from '../complex_abs_webgpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.tensorMap.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGPUProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgpu',\n  kernelFunc: complexAbs as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ConcatProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[];\n  uniforms = '';\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  offsetLength: number;\n\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape =\n        backend_util.computeOutShape(shapes, 1 /* axis */) as [number, number];\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    this.offsetLength = shapes.length - 1;\n    for (let i = 0; i < this.offsetLength; i++) {\n      this.uniforms += `offset${i} : i32,`;\n    }\n    this.shaderKey = 'concat';\n  }\n\n  getUserCode(): string {\n    const snippets: string[] = [];\n    if (this.offsetLength > 0) {\n      snippets.push(\n          `if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }`);\n      for (let i = 1; i < this.offsetLength; i++) {\n        snippets.push(\n            `else if (yC < uniforms.offset${[i]}){ ` +\n            `setOutputAtCoords(coords.x, coords.y, getT${\n                i}(yR, yC - uniforms.offset${i - 1})); }`);\n      }\n      const lastIndex = this.offsetLength;\n      const lastShiftIndex = this.offsetLength - 1;\n      snippets.push(`else { setOutputAtCoords(coords.x, coords.y, getT${\n          lastIndex}(yR, yC - uniforms.offset${lastShiftIndex})); }`);\n    } else {\n      snippets.push(`setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));`);\n    }\n\n    const userCode = `\n      ${main('index')} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            let yR = coords.x;\n            let yC = coords.y;\n\n            ${snippets.join('\\n        ')}\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.tensorMap.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgpu',\n  kernelFunc: imag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ConcatProgram} from '../concat_webgpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: WebGPUBackend): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeData(r.dataId));\n    imags.forEach(i => backend.disposeData(i.dataId));\n    backend.disposeData(realConcated.dataId);\n    backend.disposeData(imagConcated.dataId);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgpu doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeData(t.dataId));\n\n    return outInfo;\n  }\n\n  // There is a storage buffer limitation in compute stage, one for output so\n  // the maximum for input is limits.maxStorageBuffersPerShaderStage - 1\n  const maxInputNum = backend.device.limits.maxStorageBuffersPerShaderStage - 1;\n  if (inputs.length > maxInputNum) {\n    const reducedInputs = [];\n    for (let i = 0; i < inputs.length; i += maxInputNum) {\n      const subArray = inputs.slice(i, i + maxInputNum);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n    const result = concatImpl(reducedInputs, axis, backend);\n\n    for (const i of reducedInputs) {\n      backend.disposeData(i.dataId);\n    }\n\n    return result;\n  }\n\n  const {tensors2D, outShape} = computeTensors2D(inputs, axis, backend);\n  const shapes = (tensors2D).map(t => t.shape as [number, number]);\n  const program = new ConcatProgram(shapes);\n\n  const uniformData: Array<{type: string; data: number[]}> = [];\n  const offsets: number[] = new Array(shapes.length - 1);\n  if (offsets.length > 0) {\n    offsets[0] = shapes[0][1];\n    uniformData.push({type: 'int32', data: [offsets[0]]});\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n      uniformData.push({type: 'int32', data: [offsets[i]]});\n    }\n  }\n\n  const res = backend.runWebGPUProgram(\n      program, tensors2D, tensors2D[0].dtype, uniformData);\n  tensors2D.forEach(r => backend.disposeData(r.dataId));\n\n  const reshapedResult =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n  backend.disposeData(res.dataId);\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: WebGPUBackend) {\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(t => reshape({\n                                 inputs: {x: t},\n                                 backend,\n                                 attrs: {\n                                   shape: [\n                                     util.sizeFromShape(t.shape.slice(0, axis)),\n                                     util.sizeFromShape(t.shape.slice(axis))\n                                   ]\n                                 }\n                               }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args: {inputs: ConcatInputs, attrs: ConcatAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgpu',\n  kernelFunc: concat as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\nimport {typeSnippet, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, computeWorkgroupSizeForConv2d, computeWorkPerThreadForConv2d} from './webgpu_util';\n\nfunction conv2dCommonSnippet(\n    isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean,\n    fitInner: boolean, addBias = false,\n    activation: backend_util.Activation = null,\n    hasPreluActivationWeights = false, innerElementSizeX = 4,\n    innerElementSizeW = 4, innerElementSize = 4) {\n  const getXSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'resData = f32(x[xIndex]);';\n      case 3:\n        return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n      case 4:\n        return 'resData = vec4<f32>(x[xIndex / 4]);';\n      default:\n        throw new Error(\n            `innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const getWSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'return f32(W[row * uniforms.wShape[3] + col]);';\n      case 4:\n        return 'return vec4<f32>(W[(row * uniforms.wShape[3] + col) / 4]);';\n      default:\n        throw new Error(\n            `innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const coordASnippet = isChannelsLast ? `\n      let coord = vec4<i32>(batch, xRow, xCol, xCh);\n      ` :\n                                         `\n      let coord = vec4<i32>(batch, xCh, xRow, xCol);\n      `;\n\n  const coordResSnippet = isChannelsLast ? `\n      let coords = vec4<i32>(\n        batch,\n        row / outWidth,\n        row % outWidth,\n        col);\n      ` :\n                                           `\n      let coords = vec4<i32>(\n        batch,\n        row,\n        col / outWidth,\n        col % outWidth);\n      `;\n\n  const xHight = isChannelsLast ? 'uniforms.xShape[1]' : 'uniforms.xShape[2]';\n  const xWidth = isChannelsLast ? 'uniforms.xShape[2]' : 'uniforms.xShape[3]';\n  const row = isChannelsLast ? 'row' : 'col';\n  const col = isChannelsLast ? 'col' : 'row';\n  const readXSnippet = `\n      let inChannels = uniforms.wShape[2];\n      let outWidth = ${\n      isChannelsLast ? 'uniforms.outShape[2]' : 'uniforms.outShape[3]'};\n      let outRow = ${row} / outWidth;\n      let outCol = ${row} % outWidth;\n\n      let WRow = ${col} / (uniforms.filterDims[1] * inChannels);\n      let WCol = ${col} / inChannels % uniforms.filterDims[1];\n      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];\n      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];\n      let xCh = ${col} % inChannels;\n      var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n      // The bounds checking is always needed since we use it to pad zero for\n      // the 'same' padding type.\n      if (xRow >= 0 && xRow < ${xHight} && xCol >= 0 && xCol < ${xWidth}) {\n        ${coordASnippet}\n        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);\n        ${getXSnippet(innerElementSizeX)}\n      }\n      return resData;`;\n\n  const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n      ${readXSnippet}` :\n                                                            `\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${readXSnippet}\n      }\n      return ${typeSnippet(innerElementSizeX)}(0.0);`) :\n                                   (fitInner && fitBOuter ? `\n      ${readXSnippet}` :\n                                                            `\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${readXSnippet}\n      }\n      return ${typeSnippet(innerElementSizeX)}(0.0);`);\n\n  const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n  const resType = typeSnippet(innerElementSize);\n  const aType = isChannelsLast ? typeSnippet(innerElementSizeX) :\n                                 typeSnippet(innerElementSizeW);\n  const bType = isChannelsLast ? typeSnippet(innerElementSizeW) :\n                                 typeSnippet(innerElementSizeX);\n  const userCode = `\n      ${\n      activationFnSnippet(\n          activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n      fn mm_readA(batch: i32, row : i32, col : i32) -> ${aType} {\n        ${isChannelsLast ? sampleX : sampleW}\n      }\n\n      fn mm_readB(batch: i32, row : i32, col : i32) -> ${bType} {\n        ${isChannelsLast ? sampleW : sampleX}\n      }\n\n      fn mm_write(batch: i32, row : i32, col : i32, valueIn : ${resType}) {\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n        {\n        var value = valueIn;\n        let outWidth = ${\n      isChannelsLast ? 'uniforms.outShape[2]' : 'uniforms.outShape[3]'};\n        ${coordResSnippet}\n        ${biasActivationSnippet(addBias, activation)}\n        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }`;\n  return userCode;\n}\n\nexport class Conv2DMMProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  variableComponents: number[];\n  uniforms =\n      `filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number];\n  elementsPerThread: [number, number, number];\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n  isChannelsLast: boolean;\n  fitAOuter: boolean;\n  fitBOuter: boolean;\n  fitInner: boolean;\n  tileAOuter: number;\n  tileBOuter: number;\n  tileInner: number;\n  innerElementSize: number;\n  isVec4?: boolean;\n  outputComponent: number;\n  private sequentialAccessByThreads: boolean;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, dimAOuter: number, dimBOuter: number,\n      dimInner: number, addBias = false,\n      activation: backend_util.Activation = null,\n      hasPreluActivationWeights = false, sequentialAccessByThreads = false) {\n    this.outputShape = convInfo.outShape;\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.isVec4 =\n        (((convInfo.inChannels % 4 === 0 || convInfo.inChannels % 3 === 0) &&\n          this.isChannelsLast) ||\n         (convInfo.outWidth % 4 === 0 && !this.isChannelsLast)) &&\n        convInfo.outChannels % 4 === 0;\n    this.dispatchLayout = this.isChannelsLast ? {x: [3], y: [1, 2], z: [0]} :\n                                                {x: [2, 3], y: [1], z: [0]};\n    this.workgroupSize = computeWorkgroupSizeForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n    this.elementsPerThread = computeWorkPerThreadForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        this.elementsPerThread);\n\n    if (this.isVec4) {\n      this.outputComponent = 4;\n      if (this.isChannelsLast && convInfo.inChannels % 4 !== 0) {\n        this.innerElementSize = 3;\n        this.variableComponents = [1, 4];\n      } else {\n        this.innerElementSize = 4;\n        this.variableComponents = [4, 4];\n      }\n\n      if (addBias) {\n        this.variableNames.push('bias');\n        this.variableComponents.push(4);\n      }\n\n      if (hasPreluActivationWeights) {\n        this.variableNames.push('preluActivationWeights');\n        this.variableComponents.push(4);\n      }\n    } else {\n      this.innerElementSize = this.elementsPerThread[0];\n      if (addBias) {\n        this.variableNames.push('bias');\n      }\n\n      if (hasPreluActivationWeights) {\n        this.variableNames.push('preluActivationWeights');\n      }\n    }\n\n    this.sequentialAccessByThreads = sequentialAccessByThreads;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n\n    this.tileAOuter = this.workgroupSize[1] * this.elementsPerThread[1];\n    this.tileBOuter = this.workgroupSize[0] * this.elementsPerThread[0];\n    this.tileInner = Math.max(\n        this.workgroupSize[0] * this.innerElementSize, this.workgroupSize[1]);\n\n    this.fitAOuter = dimAOuter % this.tileAOuter === 0;\n    this.fitBOuter = dimBOuter % this.tileBOuter === 0;\n    this.fitInner = dimInner % this.tileInner === 0;\n\n    this.shaderKey = `conv2DMM_${this.elementsPerThread}_${this.activation}}_${\n        this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${\n        this.innerElementSize}_${this.isChannelsLast}_${\n        this.sequentialAccessByThreads}`;\n  }\n\n  getUserCode(): string {\n    const matMulSource = this.isVec4 ?\n        makeMatMulPackedVec4Source(\n            this.elementsPerThread, this.workgroupSize, !this.isChannelsLast,\n            this.tileInner) :\n        makeMatMulPackedSource(\n            this.elementsPerThread, this.workgroupSize, !this.isChannelsLast,\n            this.tileInner, false, null, this.sequentialAccessByThreads);\n    const elementsSize =\n        this.isVec4 ? [this.innerElementSize, 4, 4] : [1, 1, 1];\n    const userCode = `\n    ${\n        conv2dCommonSnippet(\n            this.isChannelsLast, this.fitAOuter, this.fitBOuter, this.fitInner,\n            this.addBias, this.activation, this.hasPreluActivationWeights,\n            elementsSize[0], elementsSize[1], elementsSize[2])}\n    ${matMulSource}\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class Conv2DNaiveProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms =\n      'filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,';\n  workgroupSize: [number, number, number] = [4, 4, 8];\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n  isChannelsLast: boolean;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: backend_util.Activation = null,\n      hasPreluActivationWeights = false) {\n    this.outputShape = convInfo.outShape;\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.dispatchLayout = this.isChannelsLast ? {x: [2], y: [1], z: [0, 3]} :\n                                                {x: [3], y: [2], z: [0, 1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.shaderKey = `conv2dnaive_${this.activation}_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n       ${\n        activationFnSnippet(\n            this.activation, this.hasPreluActivationWeights, false, 4)}\n       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{\n         let coords = vec4<i32>(batch, row, col, chan);\n         if (coordsInBounds4D(coords, uniforms.xShape)) {\n           return  getX(batch, row, col, chan);\n         } else {\n          return 0.0;\n         }\n       }\n       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{\n         let coords = vec4<i32>(row, col, xChannel, outChannel);\n         if(coordsInBounds4D(coords, uniforms.wShape)) {\n           return getW(row, col, xChannel, outChannel);\n          } else {\n            return 0.0;\n          }\n       }\n       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {\n         let coords = ${\n        this.isChannelsLast ? `vec4<i32>(batch, row, col, chan);` :\n                              `vec4<i32>(batch, chan, row, col);`}\n         if (coordsInBounds4D(coords, uniforms.outShape)) {\n           var value = valueIn;\n           ${biasActivationSnippet(this.addBias, this.activation)}\n           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);\n         }\n       }\n       ${main('index')} {\n         let coords = getOutputCoords();\n         let batch = coords[0];\n         let outChannel = ${this.isChannelsLast ? `coords[3];` : `coords[1];`}\n         let outRow = ${this.isChannelsLast ? `coords[1];` : `coords[2];`}\n         let outCol = ${this.isChannelsLast ? `coords[2];` : `coords[3];`}\n         var acc : f32 = 0.0;\n         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {\n           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {\n             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];\n             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];\n             for (var xChannel = 0; xChannel < ${\n        this.isChannelsLast ? `uniforms.xShape[3];` :\n                              `uniforms.xShape[1];`} xChannel = xChannel + 1) {\n               ${\n        this.isChannelsLast ? `let v = readInp(batch, xRow, xCol, xChannel);` :\n                              `let v = readInp(batch, xChannel, xRow, xCol);`}\n               let f = readFilt(row, col, xChannel, outChannel);\n               acc = acc + v * f;\n             }\n           }\n         }\n         writeResult(batch, outRow, outCol, outChannel, acc);\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Im2ColProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  uniforms =\n      `pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,\n       inChannels : i32,`;\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  isChannelsLast: boolean;\n  size = true;\n\n  constructor(outputShape: number[], isChannelsLast: boolean) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = isChannelsLast;\n    this.shaderKey = `im2col_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    const rowDim = this.isChannelsLast ? 1 : 2;\n    const colDim = this.isChannelsLast ? 2 : 3;\n\n    const row = this.isChannelsLast ? 'coords[1]' : 'coords[2]';\n    const col = this.isChannelsLast ? 'coords[2]' : 'coords[1]';\n    const getXSnippet = this.isChannelsLast ? 'getX(batch, xRow, xCol, ch)' :\n                                              'getX(batch, ch, xRow, xCol)';\n\n    const userCode = `\n    ${main('index')} {\n      let coords = getCoordsFromIndex(index);\n      if(index < uniforms.size) {\n        let batch = coords[0];\n        let row = ${row};\n        let col = ${col};\n        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];\n        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);\n        var value = 0.0;\n        if(xRow < uniforms.xShape[${rowDim}] && xRow >= 0) {\n          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -\n              uniforms.pads[1];\n          let xCol = offsetX + uniforms.dilations[1] * ((col %\n              uniforms.itemsPerBlockRow) / uniforms.inChannels);\n          let ch = col % uniforms.inChannels;\n          if(xCol < uniforms.xShape[${colDim}] && xCol >= 0) {\n            value = ${getXSnippet};\n          }\n        }\n        setOutputAtIndex(index, value);\n      }\n    }\n   `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv2DMMProgram} from '../conv2d_mm_webgpu';\nimport {Conv2DNaiveProgram} from '../conv2d_naive_webgpu';\nimport {Im2ColProgram} from '../im2col_webgpu';\nimport {WebGPUProgram} from '../webgpu_program';\n\nimport {batchMatMulImpl} from './BatchMatMul_impl';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: WebGPUBackend,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// conv2dByMatMul fuses height and width into one dimension to compute\n// batchMatMul, so bias and activation weights are also supposed to fuse the two\n// dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\nfunction getShapeForBatchMatMul(\n    shape: number[], isChannelsLast: boolean): number[] {\n  const length = shape.length;\n  if (length >= 3) {\n    return isChannelsLast ?\n        [\n          ...shape.slice(0, -3) /* batch */,\n          shape[length - 3] * shape[length - 2] /* height * width */,\n          shape[length - 1] /* channel */\n        ] :\n        [\n          ...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */,\n          shape[length - 2] * shape[length - 1] /* height * width */\n        ];\n  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n    return [shape[0], 1];\n  } else {\n    return null;\n  }\n}\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nfunction conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = isChannelsLast ? false : true;\n  const transposeB = false;\n\n  const sameSize = isChannelsLast &&\n      convInfo.filterHeight === convInfo.inHeight &&\n      convInfo.filterWidth === convInfo.inWidth &&\n      convInfo.padInfo.type === 'VALID';\n  const intermediates: TensorInfo[] = [];\n  let xReshaped;\n  let filterReshaped;\n\n  if (sameSize) {\n    const sharedDim =\n        convInfo.inHeight * convInfo.inWidth * convInfo.inChannels;\n    xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {shape: [1, convInfo.batchSize, sharedDim]}\n    });\n    filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, sharedDim, convInfo.outChannels]}\n    });\n  } else {\n    xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: isChannelsLast ?\n            [\n              convInfo.batchSize, convInfo.inHeight * convInfo.inWidth,\n              convInfo.inChannels\n            ] :\n            [\n              convInfo.batchSize, convInfo.inChannels,\n              convInfo.inHeight * convInfo.inWidth\n            ]\n      }\n    });\n    filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n  }\n  intermediates.push(xReshaped);\n  intermediates.push(filterReshaped);\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  const result = batchMatMulImpl({\n    a: isChannelsLast ? xReshaped : filterReshaped,\n    b: isChannelsLast ? filterReshaped : xReshaped,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    activation,\n    preluActivationWeights,\n    leakyreluAlpha\n  });\n  const out = reshape(\n      {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n  intermediates.push(result);\n\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n\n  return out;\n}\n\n// Implements the im2col algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nfunction conv2dWithIm2Col({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // row of a new matrix with shape [outHeight * outWidth,\n  // filterWidth * filterHeight * inChannels]. The filter is also rearranged so\n  // each output channel forms a col of a new matrix with shape [\n  // filterWidth * filterHeight * inChannels, outChannels]. The convolution is\n  // then computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    strideWidth,\n    strideHeight,\n    padInfo,\n    outWidth,\n    outHeight,\n    dilationWidth,\n    dilationHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = isChannelsLast ? [convInfo.batchSize, numCols, sharedDim] :\n                                      [convInfo.batchSize, sharedDim, numCols];\n\n  const im2ColProgram = new Im2ColProgram(x2ColShape, isChannelsLast);\n  const dimensions = [\n    {type: 'int32', data: [padInfo.top, padInfo.left]},      // Padding.\n    {type: 'int32', data: [strideHeight, strideWidth]},      // Stride.\n    {type: 'int32', data: [dilationHeight, dilationWidth]},  // Dilation.\n    {type: 'int32', data: [outWidth]},\n    {type: 'int32', data: [inChannels * filterWidth]},  // itemsPerBlockRow.\n    {type: 'int32', data: [inChannels]}\n  ];\n  const x2Col =\n      backend.runWebGPUProgram(im2ColProgram, [x], x.dtype, dimensions);\n\n  const intermediates: TensorInfo[] = [];\n  intermediates.push(x2Col);\n\n  const filterReshaped = reshape(\n      {inputs: {x: filter}, backend, attrs: {shape: [1, sharedDim, -1]}});\n  intermediates.push(filterReshaped);\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  const transposeA = isChannelsLast ? false : true;\n  const transposeB = false;\n  const result = batchMatMulImpl({\n    a: isChannelsLast ? x2Col : filterReshaped,\n    b: isChannelsLast ? filterReshaped : x2Col,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    activation,\n    preluActivationWeights,\n    leakyreluAlpha\n  });\n  const out = reshape(\n      {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n  intermediates.push(result);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n\n  return out;\n}\n\nexport function conv2DImpl({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const sameSize = isChannelsLast &&\n      convInfo.filterHeight === convInfo.inHeight &&\n      convInfo.filterWidth === convInfo.inWidth &&\n      convInfo.padInfo.type === 'VALID';\n  const useNaiveConv2d = env().getBool('WEBGPU_USE_NAIVE_CONV2D_DEBUG');\n\n  if (!useNaiveConv2d &&\n      (sameSize ||\n       (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' ||\n         convInfo.padInfo.type === 'VALID')))) {\n    return conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  }\n\n  const thresholdFlagValue =\n      env().getNumber('WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL');\n  const thresholdToIncreaseWorkgroups = thresholdFlagValue > -1 ?\n      thresholdFlagValue :\n      backend.thresholdToIncreaseWorkgroups;\n  const workgroupsBy32x32 = convInfo.batchSize *\n      Math.ceil((convInfo.outHeight * convInfo.outWidth) / 32) *\n      Math.ceil(convInfo.outChannels / 32);\n  if (env().getBool('WEBGPU_CONV_SEPARATE_IM2COL_SHADER') ||\n      workgroupsBy32x32 <= thresholdToIncreaseWorkgroups) {\n    return conv2dWithIm2Col({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      preluActivationWeights,\n      leakyreluAlpha,\n      activation\n    });\n  }\n\n  let program: WebGPUProgram;\n  const padInfo = [convInfo.padInfo.top, convInfo.padInfo.left];\n  const dimensions = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [...padInfo]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}\n  ];\n  if (useNaiveConv2d) {\n    program = new Conv2DNaiveProgram(\n        convInfo, hasBias, activation, hasPreluActivationWeights);\n  } else {\n    const dimAOuter = isChannelsLast ? convInfo.outHeight * convInfo.outWidth :\n                                       convInfo.outChannels;\n    const dimBOuter = isChannelsLast ? convInfo.outChannels :\n                                       convInfo.outHeight * convInfo.outWidth;\n    const dimInner =\n        convInfo.filterHeight * convInfo.filterWidth * convInfo.inChannels;\n    dimensions.push(\n        {type: 'int32', data: [dimAOuter]}, {type: 'int32', data: [dimBOuter]},\n        {type: 'int32', data: [dimInner]});\n\n    // Experiments show that sequential access is more friendly for Intel GPUs.\n    const sequentialAccessByThreads = backend.adapterInfo.isIntel();\n    program = new Conv2DMMProgram(\n        convInfo, dimAOuter, dimBOuter, dimInner, hasBias, activation,\n        hasPreluActivationWeights, sequentialAccessByThreads);\n  }\n\n  const intermediates: TensorInfo[] = [];\n  const inputVar: TensorInfo[] = [x, filter];\n  if (hasBias) {\n    if (!isChannelsLast && bias.shape.length === 1) {\n      bias = reshape(\n          {inputs: {x: bias}, backend, attrs: {shape: [bias.shape[0], 1, 1]}});\n      intermediates.push(bias);\n    }\n    inputVar.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    if (!isChannelsLast && preluActivationWeights.shape.length === 1) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: [preluActivationWeights.shape[0], 1, 1]}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n    inputVar.push(preluActivationWeights);\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({type: 'float32', data: [leakyreluAlpha]});\n    program.uniforms += ' alpha : f32,';\n  }\n  const out = backend.runWebGPUProgram(program, inputVar, x.dtype, dimensions);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n  return out;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {conv2DImpl} from './Conv2D_impl';\n\nexport function conv2d(\n    args: {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: WebGPUBackend}) {\n  const {inputs, attrs, backend} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  return conv2DImpl({x, filter, convInfo, backend});\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgpu',\n  kernelFunc: conv2d as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Conv2DDerInputProgram implements WebGPUProgram {\n  variableNames = ['dy', 'W'];\n  uniforms =\n      'filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,';\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  isChannelsLast: boolean;\n  size = false;\n  isVec4 = false;\n  workPerThread = 1;\n  outputComponent: number;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.isVec4 = this.isChannelsLast && convInfo.outChannels % 4 === 0 &&\n        convInfo.inChannels % 4 === 0;\n    if (this.isVec4) {\n      // TODO: Expand to any value.\n      this.workPerThread = 2;\n      this.outputComponent = 4;\n      this.workgroupSize = [4, 4, 4];\n      this.dispatchLayout = {x: [3], y: [2], z: [0, 1]};\n      this.dispatch = computeDispatch(\n          this.dispatchLayout, this.outputShape, this.workgroupSize,\n          [4, this.workPerThread, 1]);\n    } else {\n      this.size = true;\n      this.workPerThread = 1;\n      this.workgroupSize = [64, 1, 1];\n      this.dispatchLayout = flatDispatchLayout(this.outputShape);\n      this.dispatch = computeDispatch(\n          this.dispatchLayout, this.outputShape, this.workgroupSize);\n    }\n    this.shaderKey = `conv2DDerInput_${this.isChannelsLast}_${this.isVec4}_${\n        this.workPerThread}`;\n  }\n\n  getUserCode(): string {\n    const rowDim = this.isChannelsLast ? 1 : 2;\n    const colDim = this.isChannelsLast ? 2 : 3;\n    const channelDim = this.isChannelsLast ? 3 : 1;\n\n    const vec4Snippet = `\n    ${main()} {\n      let batch = i32(globalId.z) / uniforms.outShape[1];\n      let r = i32(globalId.z) % uniforms.outShape[1];\n      let c = i32(globalId.y) * ${this.workPerThread};\n      let d1 = i32(globalId.x) * 4;\n\n      let dyCorner = vec2<i32>(r, c) - uniforms.pads;\n\n      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n      // ? = to be determined. : = across all values in that axis.\n      var dotProd: array<vec4<f32>, ${this.workPerThread}>;\n      for (var i = 0; i < ${this.workPerThread}; i++) {\n        dotProd[i] = vec4<f32>(0.0);\n      }\n      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);\n        let wRPerm = uniforms.filterDims.x - 1 - wR;\n        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||\n            fract(dyR) > 0.0) {\n          continue;\n        }\n        let idyR = i32(dyR);\n\n        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);\n          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);\n          let wCPerm = uniforms.filterDims.y - 1 - wC;\n          var bDyCVal = true;\n          var bDyCVal2 = true;\n          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC) > 0.0) {\n            bDyCVal = false;\n          }\n          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC2) > 0.0) {\n            bDyCVal2 = false;\n          }\n\n          let idyC = i32(dyC);\n          let idyC2 = i32(dyC2);\n          if (bDyCVal && bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n              xValue = getDy(batch, idyR, idyC2, d2);\n              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),\n                                                  dot(xValue, wValue1),\n                                                  dot(xValue, wValue2),\n                                                  dot(xValue, wValue3));\n            }\n          } else if (bDyCVal) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n            }\n          } else if (bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC2, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[1] = dotProd[1] + tmpval;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n        let coords = vec4<i32>(batch, r, c + i, d1);\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);\n        }\n      }\n    }\n    `;\n    return this.isVec4 ?\n        `\n    ${vec4Snippet}\n    ` :\n        `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[${channelDim}];\n\n        let dyCorner = vec2<i32>(coords[${rowDim}], coords[${\n            colDim}]) - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);\n          let wRPerm = uniforms.filterDims.x - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||\n              wRPerm < 0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);\n            let wCPerm = uniforms.filterDims.y - 1 - wC;\n            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n                fract(dyC) > 0.0 || wCPerm < 0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {\n              let xValue = ${\n            this.isChannelsLast ? 'getDy(batch, idyR, idyC, d2)' :\n                                  'getDy(batch, d2, idyR, idyC)'};\n              let wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd = dotProd + xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\n\nexport class Conv2DDerFilterProgram implements WebGPUProgram {\n  variableNames = ['x', 'dy'];\n  uniforms =\n      'pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,';\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  isChannelsLast: boolean;\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.shaderKey = `conv2DDerFilter_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    return `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let d2 = coords[3];\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b = b + 1) {\n          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              if (${this.isChannelsLast}) {\n                let dyValue = getDy(b, yR, yC, d2);\n                let xValue = getX(b, xR, xC, d1);\n                dotProd = dotProd + xValue * dyValue;\n              } else {\n                let dyValue = getDy(b, d2, yR, yC);\n                let xValue = getX(b, d1, xR, xC);\n                dotProd = dotProd + xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements WebGPUProgram {\n  variableNames = ['x', 'dy'];\n  uniforms =\n      `pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,\n       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,`;\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `conv3DDerFilter`;\n  }\n\n  getUserCode(): string {\n    return `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wF = coords.x;\n        let wR = coords.y;\n        let wC = coords.z;\n        let d1 = coords.w;\n        let d2 = coords.u;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yF = 0; yF < uniforms.outDepth; yF++) {\n            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];\n            if (xF < 0 || xF >= uniforms.inDepth) {\n              continue;\n            }\n\n            for (var yR = 0; yR < uniforms.outHeight; yR++) {\n              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];\n              if (xR < 0 || xR >= uniforms.inHeight) {\n                continue;\n              }\n\n              for (var yC = 0; yC < uniforms.outWidth; yC++) {\n                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];\n                if (xC < 0 || xC >= uniforms.inWidth) {\n                  continue;\n                }\n\n                let dyValue = getDy(b, yF, yR, yC, d2);\n                let xValue = getX(b, xF, xR, xC, d1);\n                dotProd += xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements WebGPUProgram {\n  variableNames = ['dy', 'W'];\n  uniforms = `filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,`;\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `conv3DDerInput`;\n  }\n\n  getUserCode(): string {\n    return `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let d1 = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyFCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);\n          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {\n            continue;\n          }\n          let idyF = i32(dyF);\n\n          let wFPerm = uniforms.filterDims[0] - 1 - wF;\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            let wRPerm = uniforms.filterDims[1] - 1 - wR;\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let wCPerm = uniforms.filterDims[2] - 1 - wC;\n\n              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {\n                let xValue = getDy(batch, idyF, idyR, idyC, d2);\n                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_webgpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: WebGPUBackend,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.batchSize]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'int32', data: [convInfo.inHeight]},\n    {type: 'int32', data: [convInfo.inWidth]}\n  ];\n  return backend.runWebGPUProgram(program, [x, dy], x.dtype, uniformData);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgpu',\n  kernelFunc: conv2DBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\nimport {typeSnippet, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, computeWorkgroupSizeForConv2d, computeWorkPerThreadForConv2d} from './webgpu_util';\n\nfunction conv2dTransposeCommonSnippet(innerElementSize = 4) {\n  const getWSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'return W[getIndexFromCoords4D(coord, uniforms.wShape)];';\n      case 4:\n        return `\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];\n            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];\n            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];\n            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;\n      default:\n        throw new Error(\n            `innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n\n  const readASnippet = `\n      let outRow = row / uniforms.outShape[2];\n      let outCol = row % uniforms.outShape[2];\n\n      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];\n      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {\n        return ${typeSnippet(innerElementSize)}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {\n        return ${typeSnippet(innerElementSize)}(0.0);\n      }\n      let coord = vec4<i32>(\n          batch,\n          i32(xR),\n          i32(xC),\n          col % uniforms.outBackprop[3]);\n      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${\n      innerElementSize}];`;\n\n  const sampleA = `if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${readASnippet}\n      }\n      return ${typeSnippet(innerElementSize)}(0.0);`;\n\n  const userCode = `\n  fn mm_readA(batch: i32, row : i32, col : i32) -> ${\n      typeSnippet(innerElementSize)} {\n    ${sampleA}\n  }\n\n  fn mm_readB(batch: i32, row : i32, col : i32) -> ${\n      typeSnippet(innerElementSize)} {\n    let coordX = uniforms.filterDims.x - 1 -\n        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n    let coordY = uniforms.filterDims.y - 1 -\n        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&\n        coordX >= 0 && coordY >= 0) {\n      let rowInner = row % uniforms.outBackprop[3];\n      let coord = vec4<i32>(coordX, coordY, col, rowInner);\n      ${getWSnippet(innerElementSize)}\n    }\n    return ${typeSnippet(innerElementSize)}(0.0);\n  }\n\n  fn mm_write(batch: i32, row : i32, col : i32, valueInput : ${\n      typeSnippet(innerElementSize)}) {\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outCoord = vec4<i32>(\n          batch,\n          row / uniforms.outShape[2],\n          row % uniforms.outShape[2],\n          col);\n      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${\n      innerElementSize}] = value;\n    }\n  }`;\n  return userCode;\n}\n\nexport class Conv2DDerInputMMProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  variableComponents: number[];\n  uniforms =\n      'filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,';\n  workgroupSize: [number, number, number];\n  elementsPerThread: [number, number, number];\n  isVec4?: boolean;\n  outputComponent: number;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    util.assert(\n        convInfo.dataFormat === 'channelsLast',\n        () => 'TODO: NCHW is unimplemented');\n    this.isVec4 =\n        convInfo.inChannels % 4 === 0 && convInfo.outChannels % 4 === 0;\n    this.dispatchLayout = {x: [3], y: [1, 2], z: [0]};\n    this.workgroupSize = computeWorkgroupSizeForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n    this.elementsPerThread = computeWorkPerThreadForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        this.elementsPerThread);\n\n    if (this.isVec4) {\n      this.outputComponent = 4;\n      this.variableComponents = [4, 1];\n    }\n\n    this.shaderKey =\n        `conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`;\n  }\n\n  getUserCode(): string {\n    const matMulSource = this.isVec4 ?\n        makeMatMulPackedVec4Source(this.elementsPerThread, this.workgroupSize) :\n        makeMatMulPackedSource(this.elementsPerThread, this.workgroupSize);\n    const userCode = `\n    ${conv2dTransposeCommonSnippet(this.isVec4 ? 4 : 1)}\n    ${matMulSource}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, env, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv2DDerInputMMProgram} from '../conv_backprop_mm_webgpu';\nimport {Conv2DDerInputProgram} from '../conv_backprop_webgpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dimensions = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {\n      type: 'int32',\n      data: [\n        convInfo.filterHeight - 1 - convInfo.padInfo.top,\n        convInfo.filterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {\n      type: 'int32',\n      data: [\n        convInfo.batchSize, convInfo.outHeight, convInfo.outWidth,\n        convInfo.outChannels\n      ]\n    },\n  ];\n  let program: Conv2DDerInputProgram|Conv2DDerInputMMProgram;\n  // TODO: Experiment when to use Conv2DDerInputMMProgram algorithm.\n  if (env().getBool('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE') ||\n      convInfo.dataFormat !== 'channelsLast') {\n    program = new Conv2DDerInputProgram(convInfo);\n  } else {\n    program = new Conv2DDerInputMMProgram(convInfo);\n    const dimAOuter = convInfo.inHeight * convInfo.inWidth;\n    const dimBOuter = convInfo.inChannels;\n    const dimInner =\n        convInfo.filterHeight * convInfo.filterWidth * convInfo.outChannels;\n    dimensions.push(\n        {type: 'uint32', data: [dimAOuter]},\n        {type: 'uint32', data: [dimBOuter]},\n        {type: 'uint32', data: [dimInner]});\n  }\n  return backend.runWebGPUProgram(program, [dy, filter], 'float32', dimensions);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgpu',\n  kernelFunc: conv2DBackpropInput as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Conv3DNaiveProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms =\n      'filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `conv3dnaive`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords.x;\n        let d2 = coords.u;\n\n        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n        let xFCorner = xFRCCorner.x;\n        let xRCorner = xFRCCorner.y;\n        let xCCorner = xFRCCorner.z;\n\n        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;\n        let inputDepthVec4Remainder = uniforms.xShape.u % 4;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let xF = xFCorner + wF * uniforms.dilations[0];\n          if (xF < 0 || xF >= uniforms.xShape.y) {\n            continue;\n          }\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let xR = xRCorner + wR * uniforms.dilations[1];\n            if (xR < 0 || xR >= uniforms.xShape.z) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let xC = xCCorner + wC * uniforms.dilations[2];\n              if (xC < 0 || xC >= uniforms.xShape.w) {\n                continue;\n              }\n\n              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {\n                let xValues = vec4<f32>(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                let wValues = vec4<f32>(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (inputDepthVec4Remainder == 1) {\n                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2);\n              } else if (inputDepthVec4Remainder == 2) {\n                let xValues = vec2<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)\n                );\n                let wValues = vec2<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (inputDepthVec4Remainder == 3) {\n                let xValues = vec3<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)\n                );\n                let wValues = vec3<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }`;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv3DNaiveProgram} from '../conv3d_naive_webgpu';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: WebGPUBackend}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const padInfo =\n      [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left];\n  const dimensions = [\n    {\n      type: 'int32',\n      data: [convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth]\n    },\n    {type: 'int32', data: [...padInfo]}, {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth\n      ]\n    }\n  ];\n  const program = new Conv3DNaiveProgram(convInfo);\n  const dtype = upcastType(x.dtype, filter.dtype);\n  return backend.runWebGPUProgram(program, [x, filter], dtype, dimensions);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgpu',\n  kernelFunc: conv3D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv3DDerFilterProgram} from '../conv_backprop_webgpu';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  attrs: Conv3DBackpropFilterV2Attrs,\n  backend: WebGPUBackend,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const program = new Conv3DDerFilterProgram(convInfo);\n  const uniformData = [\n    {\n      type: 'int32',\n      data:\n          [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n    },\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {type: 'int32', data: [convInfo.batchSize]},\n    {type: 'int32', data: [convInfo.outDepth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'int32', data: [convInfo.inDepth]},\n    {type: 'int32', data: [convInfo.inHeight]},\n    {type: 'int32', data: [convInfo.inWidth]}\n  ];\n  return backend.runWebGPUProgram(program, [x, dy], dy.dtype, uniformData);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgpu',\n  kernelFunc: conv3DBackpropFilterV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv3DDerInputProgram} from '../conv_backprop_webgpu';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, pad, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const program = new Conv3DDerInputProgram(convInfo);\n  const uniformData = [\n    {\n      type: 'int32',\n      data: [convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.filterDepth - 1 - convInfo.padInfo.front,\n        convInfo.filterHeight - 1 - convInfo.padInfo.top,\n        convInfo.filterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {type: 'int32', data: [convInfo.outDepth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'int32', data: [convInfo.outChannels]}\n  ];\n\n  return backend.runWebGPUProgram(program, [dy, filter], dy.dtype, uniformData);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgpu',\n  kernelFunc: conv3DBackpropInputV2 as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const cos = unaryKernelFunc({opType: UnaryOpType.COS});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgpu',\n  kernelFunc: cos\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const cosh = unaryKernelFunc({opType: UnaryOpType.COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgpu',\n  kernelFunc: cosh\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class CropAndResizeProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  uniforms = 'extrapolationValue : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  methodId: number;\n  cropHeightBiggerThan1: boolean;\n  cropWidthBiggerThan1: boolean;\n  size = true;\n\n  constructor(\n      channnel: number, boxShape: [number, number], cropSize: [number, number],\n      method: 'bilinear'|'nearest') {\n    const [numBoxes, ] = boxShape;\n    this.outputShape = [numBoxes, cropSize[0], cropSize[1], channnel];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.methodId = method === 'bilinear' ? 1 : 0;\n    this.cropHeightBiggerThan1 = this.outputShape[1] > 1;\n    this.cropWidthBiggerThan1 = this.outputShape[2] > 1;\n    this.shaderKey = `cropAndResize_${this.methodId}_${\n        this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`;\n  }\n\n  getUserCode(): string {\n    const [inputHeightFloat, inputWidthFloat] =\n        [`f32(uniforms.imageShape[1] - 1)`, `f32(uniforms.imageShape[2] - 1)`];\n\n    const [heightRatio, heightScale, inY] = this.cropHeightBiggerThan1 ?\n        [\n          `(${inputHeightFloat} / f32(uniforms.outShape[1] - 1))`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + f32(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = this.cropWidthBiggerThan1 ?\n        [\n          `(${inputWidthFloat} / f32(uniforms.outShape[2] - 1))`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + f32(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let height_ratio = f32(${heightRatio});\n        let width_ratio = f32(${widthRatio});\n        let b = coords[0];\n        let y = coords[1];\n        let x = coords[2];\n        let d = coords[3];\n        // get box vals\n        let y1 = getBoxes(b, 0);\n        let x1 = getBoxes(b, 1);\n        let y2 = getBoxes(b, 2);\n        let x2 = getBoxes(b, 3);\n        // get image in batch index\n        let bInd = i32(round(getBoxInd(b)));\n        if(bInd < 0 || bInd >= uniforms.outShape[0]) {\n          return;\n        }\n        let height_scale = ${heightScale};\n        let width_scale = ${widthScale};\n        let in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let sourceFracIndexCR = vec2<f32>(in_x,in_y);\n        if(${this.methodId} == 1) {\n          // Compute the four integer indices.\n          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);\n          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));\n          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);\n          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);\n          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);\n          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);\n          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);\n          let top = topLeft + (topRight - topLeft) * fracCR.x;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          let newValue = top + (bottom - top) * fracCR.y;\n          setOutputAtIndex(index, newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          let sourceNearestCR = vec2<i32>(floor(\n            sourceFracIndexCR + vec2<f32>(0.5,0.5)));\n          let newValue = getImage(\n            bInd, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CropAndResizeProgram} from '../crop_and_resize_webgpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: WebGPUBackend,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape[3], boxes.shape as [number, number], cropSize, method);\n  const uniformData = [{type: 'float32', data: [extrapolationValue]}];\n  return backend.runWebGPUProgram(\n      program, [image, boxes, boxInd], 'float32', uniformData);\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgpu',\n  kernelFunc: cropAndResize as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport enum CumOpType {\n  Prod = '*',\n  Sum = '+',\n}\n\nexport class CumProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number];\n  // pow(i32, i32) is not supported, use pow(f32, f32) instead.\n  uniforms = 'index : f32,';\n  size = true;\n  exclusive: boolean;\n  reverse: boolean;\n  op: CumOpType;\n\n  constructor(\n      op: CumOpType, shape: number[], exclusive: boolean, reverse: boolean) {\n    this.workgroupSize = [128, 1, 1];\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.exclusive = exclusive;\n    this.reverse = reverse;\n    this.op = op;\n    this.shaderKey = `cum_${this.op}_${this.exclusive}_${this.reverse}`;\n  }\n\n  getUserCode(): string {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val = this.exclusive ? initVal :\n                                 `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (this.exclusive) {\n      condition = this.reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = this.reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = this.reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (this.reverse ? 'end + pow2' : 'end - pow2');\n    }\n    return `\n      ${main('index')} {\n       if (index < uniforms.size) {\n         var coords = getCoordsFromIndex(index);\n\n         let end = ${getFinalCoord(rank, 'coords', this.op)};\n         var val = ${val};\n         let pow2 = i32(pow(2.0, uniforms.index));\n         if (${condition}) {\n           let idx = ${idxString};\n           ${getFinalCoord(rank, 'coords', this.op)} = idx;\n           val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n         }\n         setOutputAtIndex(index, val);\n       }\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CumOpType, CumProgram} from '../cum_webgpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumImpl(\n    op: CumOpType, x: TensorInfo, backend: WebGPUBackend, axis: number,\n    exclusive: boolean, reverse: boolean): TensorInfo {\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGPU cumprod shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cum parallel algorithm, inspired by:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  // Note: although the algorithm is called sum, it works for any associtative\n  // operator with an identity.\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumProgram(op, permutedX.shape, false, reverse);\n    const prevResult = result;\n    const uniformData = [{type: 'float32', data: [i]}];\n    result =\n        backend.runWebGPUProgram(program, [result], result.dtype, uniformData);\n    backend.disposeData(prevResult.dataId);\n  }\n  // For exclusive cum, shift the end result in the direction of product or sum\n  // and add 1 for product or 0 for sum to the front index.\n  if (exclusive) {\n    const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    const uniformData = [{type: 'float32', data: [0]}];\n    result =\n        backend.runWebGPUProgram(program, [result], result.dtype, uniformData);\n    backend.disposeData(prevResult.dataId);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeData(result.dataId);\n    backend.disposeData(permutedX.dataId);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CumOpType} from '../cum_webgpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumprod(\n    args: {inputs: CumprodInputs, backend: WebGPUBackend, attrs: CumprodAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Prod, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'webgpu',\n  kernelFunc: cumprod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CumOpType} from '../cum_webgpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: WebGPUBackend, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Sum, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgpu',\n  kernelFunc: cumsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BincountProgram} from '../bincount_webgpu';\n\nimport {fill} from './Fill';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: WebGPUBackend,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  const xRankOne = x.shape.length === 1;\n  const weightsSize = util.sizeFromShape(weights.shape);\n  const hasWeights = weightsSize > 0;\n  const dtype = weights.dtype;\n  const xSize: [number]|[number, number] =\n      xRankOne ? [x.shape[0]] : [x.shape[0], x.shape[1]];\n  const outputSize: [number]|[number, number] =\n      xRankOne ? [size] : [x.shape[0], size];\n\n  const output = fill({backend, attrs: {shape: outputSize, value: 0, dtype}});\n  const program = new BincountProgram(xSize, hasWeights, binaryOutput);\n  const uniformData = [{type: 'int32', data: [size]}];\n  const bincountInputs: TensorInfo[] = hasWeights ? [x, weights] : [x];\n  const res = backend.runWebGPUProgram(\n      program, bincountInputs, dtype, uniformData, output);\n\n  return res;\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgpu',\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthToSpaceProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  dataFormat: string;\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  uniforms = 'blockSize : i32,';\n\n  constructor(outputShape: number[], dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `depthToSpace_${dataFormat}`;\n    this.dataFormat = dataFormat;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let h = ${this.getHeightCoordString()};\n          let w = ${this.getWidthCoordString()};\n          let d = ${this.getDepthCoordString()};\n\n          let in_h = h / uniforms.blockSize;\n          let offset_h = h % uniforms.blockSize;\n          let in_w = w / uniforms.blockSize;\n          let offset_w = w % uniforms.blockSize;\n          let offset_d = (offset_h * uniforms.blockSize + offset_w) *\n            ${this.getOutputDepthSize()};\n          let in_d = d + offset_d;\n\n          let rlt = ${this.getInputSamplingString()};\n          setOutputAtIndex(index, rlt);\n        }\n      }`;\n    return userCode;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `uniforms.outShape[3]`;\n    } else {\n      return `uniforms.outShape[1]`;\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthToSpaceProgram} from '../depth_to_space_webgpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: WebGPUBackend,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const uniformData = [\n    {type: 'int32', data: [blockSize]},\n  ];\n\n  const program = new DepthToSpaceProgram(outputShape, dataFormat);\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgpu',\n  kernelFunc: depthToSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class DepthwiseConv2DNCHWSharedProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms = `pads : vec2<i32>, inDims : vec2<i32>,`;\n  workgroupSize: [number, number, number] = [16, 16, 1];\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivation: boolean;\n  filterHeight: number;\n  filterWidth: number;\n\n  constructor(\n      outputShape: number[], filterHeight: number, filterWidth: number,\n      addBias = false, activation: backend_util.Activation = null,\n      hasPreluActivation = false) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [3], y: [2], z: [0, 1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n    this.filterHeight = filterHeight;\n    this.filterWidth = filterWidth;\n    this.shaderKey = `depthwiseNCHW_${this.activation}_${this.filterHeight}_${\n        this.filterWidth}`;\n  }\n\n  getUserCode(): string {\n    const filterSize = this.filterWidth * this.filterHeight;\n    const flatWorkgroupSize =\n        this.workgroupSize[0] * this.workgroupSize[1] * this.workgroupSize[2];\n    const tileAHeight = this.workgroupSize[1] + this.filterHeight - 1;\n    const tileAWidth = this.workgroupSize[0] + this.filterWidth - 1;\n\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, false, 4)}\n\n      var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHeight}>;\n      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${\n        this.filterHeight}>;\n      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {\n        var value = 0.0;\n        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])\n        {\n          value = getX(batch, channel, row, col);\n        }\n        return value;\n      }\n\n      ${main()} {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;\n        let channelMul = uniforms.wShape[3];\n        let d1 = coords[1] / channelMul;\n        let q = coords[1] % channelMul;\n\n        let inputRowStart = xRCCorner.x;\n        let inputColStart = xRCCorner.y;\n\n        let localRow = i32(localId.y);\n        let localCol = i32(localId.x);\n\n        // Load one tile of X into local memory.\n        for (var inputRow = localRow; inputRow < ${\n        tileAHeight}; inputRow = inputRow + ${this.workgroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${\n        tileAWidth}; inputCol = inputCol + ${this.workgroupSize[0]}) {\n            let rowOffset = inputRow - localRow;\n            let colOffset = inputCol - localCol;\n            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);\n          }\n        }\n\n        // Load one tile of W into local memory.\n        var wIndex = i32(localIndex);\n        ${\n        filterSize < flatWorkgroupSize ?\n            `if (wIndex < ${filterSize})` :\n            `for(; wIndex < ${filterSize}; wIndex = wIndex + ${\n                flatWorkgroupSize})`}\n\n        {\n          let wRow = wIndex / ${this.filterWidth};\n          let wCol = wIndex % ${this.filterWidth};\n          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);\n        }\n\n        workgroupBarrier();\n\n        var value = 0.0;\n        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {\n          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {\n            let xVal = mm_Asub[localRow + wR][localCol + wC];\n            let wVal = mm_Bsub[wR][wC];\n            value = fma(xVal, wVal, value);\n          }\n        }\n        ${biasActivationSnippet(this.addBias, this.activation)}\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthwiseConv2DVec4Program implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms = 'pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  workPerThread = 4;\n  convInfo: backend_util.Conv2DInfo;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivation: boolean;\n  outputComponent = 4;\n  virtualWidth: number;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: backend_util.Activation = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n    this.virtualWidth = Math.ceil(this.outputShape[2] / this.workPerThread) *\n        this.workPerThread;\n    const virtualOutputShape = [\n      this.outputShape[0], this.outputShape[1], this.virtualWidth,\n      this.outputShape[3]\n    ];\n    this.dispatchLayout = flatDispatchLayout(virtualOutputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, virtualOutputShape, this.workgroupSize,\n        [this.outputComponent * this.workPerThread, 1, 1]);\n\n    util.assert(\n        convInfo.dataFormat === 'channelsLast',\n        () => 'TODO: NCHW is unimplemented');\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.convInfo = convInfo;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n\n    this.shaderKey =\n        `depthwiseVec4_${activation}_${this.convInfo.filterHeight}_${\n            this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${\n            this.convInfo.strideWidth}_${this.workPerThread}`;\n  }\n\n  getUserCode(): string {\n    const xNumber = (this.workPerThread - 1) * this.convInfo.strideWidth +\n        this.convInfo.filterWidth;\n    const strideHeight = this.convInfo.strideHeight;\n    const strideWidth = this.convInfo.strideWidth;\n\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, true, 4)}\n      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {\n        var value = vec4<f32>(0.0);\n        if (col >=0 && col < uniforms.inDims[1]) {\n          value = getX(batch, row, col, channel);\n        }\n        return value;\n      }\n\n      ${main('index')} {\n        let width0 = uniforms.outShape[3] / ${this.outputComponent};\n        let d1 = (index % width0) * ${this.outputComponent};\n        var index1 = index / width0;\n        let width1 = uniforms.virtualWidth / ${this.workPerThread};\n        let c = (index1 % width1) * ${this.workPerThread};\n        index1 = index1 / width1;\n        let r = index1 % uniforms.outShape[1];\n        let batch = index1 / uniforms.outShape[1];\n\n        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${strideHeight}, ${\n        strideWidth}) - uniforms.pads;\n\n        let xRCorner = xRCCorner.x;\n        let xCCorner = xRCCorner.y;\n        var xVals : array<vec4<f32>, ${xNumber}>;\n        var dotProd : array<vec4<f32>, ${this.workPerThread}>;\n        for (var i = 0; i < ${this.workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n\n        // Use constant instead of uniform can give better performance.\n        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {\n          let xR = xRCorner + wR;\n          if (xR >=0 && xR < uniforms.inDims[0]) {\n            for (var i = 0; i < ${xNumber}; i++) {\n              xVals[i] = readX(batch, xR, xCCorner + i, d1);\n            }\n            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {\n              let wValue = getW(wR, wC, d1, 0);\n              for (var i = 0; i < ${this.workPerThread}; i++) {\n                dotProd[i] = fma(xVals[i * ${\n        strideWidth} + wC], wValue, dotProd[i]);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let coords = vec4<i32>(batch, r, c + i, d1);\n          if (coordsInBounds4D(coords, uniforms.outShape)) {\n            var value = dotProd[i];\n            ${biasActivationSnippet(this.addBias, this.activation)}\n            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthwiseConv2DProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms = `pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,\n      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,`;\n  // This is an experimental value.\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  convInfo: backend_util.Conv2DInfo;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivation: boolean;\n  isChannelsLast: boolean;\n  size = true;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: backend_util.Activation = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.convInfo = convInfo;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n    this.shaderKey = `depthwise_${this.activation}_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    const getXSnippet = this.isChannelsLast ? 'getX(batch, xR, xC, d1);' :\n                                              'getX(batch, d1, xR, xC);';\n\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, false, 4)}\n\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.${\n        this.isChannelsLast ? 'yz' : 'zw'}) * uniforms.strides - uniforms.pads;\n          let d2 = coords[${this.isChannelsLast ? 3 : 1}];\n          let channelMul = uniforms.wShape[3];\n          let d1 = d2 / channelMul;\n          let q = d2 % channelMul;\n\n          let inputRowStart = xRCCorner.x;\n          let inputColStart = xRCCorner.y;\n          let inputRowEnd = inputRowStart + uniforms.filterHeight *\n              uniforms.dilations[0];\n          let inputColEnd = inputColStart + uniforms.filterWidth *\n              uniforms.dilations[1];\n\n          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get\n          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all\n          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.\n          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.\n          var value = 0.0;\n\n          // Extract if checking out of for loop for performance.\n          if (inputRowStart >= 0 && inputColStart >= 0 &&\n            inputRowEnd < uniforms.inDims[0] &&\n                inputColEnd < uniforms.inDims[1]) {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  let xVal = ${getXSnippet};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            } else {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                if (xR < 0 || xR >= uniforms.inDims[0]) {\n                  continue;\n                }\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  if (xC < 0 || xC >= uniforms.inDims[1]) {\n                    continue;\n                  }\n\n                  let xVal = ${getXSnippet};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            }\n            ${biasActivationSnippet(this.addBias, this.activation)}\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DNCHWSharedProgram} from '../depthwise_conv2d_nchw_shared_webgpu';\nimport {DepthwiseConv2DVec4Program} from '../depthwise_conv2d_vec4_webgpu';\nimport {DepthwiseConv2DProgram} from '../depthwise_conv2d_webgpu';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */, $dataFormat);\n  const dimensions = [\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]},\n  ];\n\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  let program: DepthwiseConv2DProgram|DepthwiseConv2DVec4Program|\n      DepthwiseConv2DNCHWSharedProgram;\n  if (!isChannelsLast && convInfo.inHeight > 16 && convInfo.inWidth > 16 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      convInfo.dilationWidth === 1 && convInfo.dilationHeight === 1 &&\n      convInfo.inChannels === convInfo.outChannels) {\n    program = new DepthwiseConv2DNCHWSharedProgram(\n        convInfo.outShape, convInfo.filterHeight, convInfo.filterWidth);\n  } else if (\n      isChannelsLast && convInfo.outHeight > 4 && convInfo.outWidth > 4 &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.inChannels === convInfo.outChannels &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.inChannels % 4 === 0) {\n    program = new DepthwiseConv2DVec4Program(convInfo);\n    dimensions.push({type: 'int32', data: [program.virtualWidth]});\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n    dimensions.push(\n        {type: 'int32', data: [convInfo.filterHeight]},\n        {type: 'int32', data: [convInfo.filterWidth]},\n        {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        });\n  }\n\n  return backend.runWebGPUProgram(program, [x, filter], x.dtype, dimensions);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNative as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthwiseConv2DDerFilterProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'dy'];\n  uniforms =\n      `strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,\n      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `depthwise_conv2d_backprop_filter`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let dm = coords[3];\n        let d2 = d1 * uniforms.channelMul + dm;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yR = 0; yR < uniforms.outHeight; yR++) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC++) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              let dyValue = getDy(b, yR, yC, d2);\n              let xValue = getX(b, xR, xC, d1);\n              dotProd += xValue * dyValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy', 'W'];\n  uniforms = `strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, channelMul : i32,`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `depthwise_conv2d_backprop_input`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[3];\n        let dyCorner = coords.yz - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n\n          let idyR = i32(dyR);\n          let wRPerm = uniforms.filterDims[0] - 1 - wR;\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n\n            let idyC = i32(dyC);\n            let wCPerm = uniforms.filterDims[1] - 1 - wC;\n\n            for (var dm = 0; dm < uniforms.channelMul; dm++) {\n              let d2 = d1 * uniforms.channelMul + dm;\n              let xValue = getDy(batch, idyR, idyC, d2);\n              let wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_depthwise_webgpu';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'int32', data: [convInfo.inHeight]},\n    {type: 'int32', data: [convInfo.inWidth]},\n    {type: 'int32', data: [convInfo.batchSize]},\n    {type: 'int32', data: [convInfo.outChannels / convInfo.inChannels]}\n  ];\n  return backend.runWebGPUProgram(program, [x, dy], 'float32', uniformData);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DDerInputProgram} from '../conv_backprop_depthwise_webgpu';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n      type: 'int32',\n      data: [\n        convInfo.filterHeight - 1 - convInfo.padInfo.top,\n        convInfo.filterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'int32', data: [convInfo.outChannels / convInfo.inChannels]}\n  ];\n  return backend.runWebGPUProgram(program, [dy, filter], dy.dtype, uniformData);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DiagProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'diag';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DiagProgram} from '../diag_webgpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGPUProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeData(flat.dataId);\n  backend.disposeData(res.dataId);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgpu',\n  kernelFunc: diag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Dilation2DProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'w'];\n  uniforms =\n      'filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'dilation2d';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let neg_infinity = -3.4e38;\n           let coords = getOutputCoords();\n           let batch = coords.x;\n           let d1 = coords.w;\n           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;\n           let hBeg = outTopLeftCorner.x;\n           let wBeg = outTopLeftCorner.y;\n\n           var curVal = neg_infinity;\n           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {\n             let hIn = hBeg + h * uniforms.dilations[0];\n\n             if (hIn >= 0 && hIn < uniforms.xShape[1]) {\n               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {\n                 let wIn = wBeg + w * uniforms.dilations[1];\n\n                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {\n                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);\n                   if (val > curVal) {\n                     curVal = val;\n                   }\n                 }\n               }\n             }\n           }\n\n           setOutputAtIndex(index, curVal);\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Dilation2DProgram} from '../dilation_webgpu';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  const padInfo = [convInfo.padInfo.top, convInfo.padInfo.left];\n  const uniformData = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [...padInfo]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}\n  ];\n\n  const program = new Dilation2DProgram(convInfo);\n  const out =\n      backend.runWebGPUProgram(program, [x, filter], x.dtype, uniformData);\n\n  return out;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgpu',\n  kernelFunc: dilation2D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType} from '@tensorflow/tfjs-core';\n\nimport {atomicAddSnippet} from './shader_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Dilation2DBackpropInputProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'w', 'dy'];\n  uniforms =\n      'filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  atomic = true;\n  type: DataType;\n\n  constructor(convInfo: backend_util.Conv2DInfo, outputDtype: DataType) {\n    this.outputShape = convInfo.inShape;\n    this.dispatchLayout = flatDispatchLayout(convInfo.outShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, convInfo.outShape, this.workgroupSize);\n\n    if (outputDtype !== 'float32' && outputDtype !== 'int32') {\n      throw new Error(`Dilation2DBackpropInput only supports float32 and int32\n          types, does not support ${outputDtype} type.`);\n    }\n    this.type = outputDtype;\n    this.shaderKey = 'dilation2DBackpropInput';\n  }\n\n  getUserCode(): string {\n    // This implementation follows the TF c++ cuda implementation:\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/dilation_ops_gpu.cu.cc\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var xRMax = 0;\n           var xCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     xRMax = xR;\n                     xCMax = xC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.xShape[3] *\n               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));\n           let value = getDy(b, r, c, d);\n           ${\n        atomicAddSnippet(\n            '&result[flatIndexIn]', 'value', this.type as 'float32' | 'int32')}\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n\nexport class Dilation2DBackpropFilterProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'w', 'dy'];\n  uniforms =\n      'filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  atomic = true;\n  type: DataType;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, shape: number[],\n      outputDtype: DataType) {\n    this.outputShape = convInfo.filterShape;\n    this.dispatchLayout = flatDispatchLayout(convInfo.outShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, convInfo.outShape, this.workgroupSize);\n\n    if (outputDtype !== 'float32' && outputDtype !== 'int32') {\n      throw new Error(`Dilation2DBackpropFilter only supports float32 and int32\n          types, does not support ${outputDtype} type.`);\n    }\n    this.type = outputDtype;\n    this.shaderKey = 'dilation2DBackpropFilter';\n  }\n\n  getUserCode(): string {\n    // This implementation follows the TF c++ cuda implementation:\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/dilation_ops_gpu.cu.cc\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var wRMax = 0;\n           var wCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     wRMax = wR;\n                     wCMax = wC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);\n           let value = getDy(b, r, c, d);\n           ${\n        atomicAddSnippet(\n            '&result[flatIndexIn]', 'value', this.type as 'float32' | 'int32')}\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Dilation2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Dilation2DBackpropFilterProgram} from '../dilation_backprop_webgpu';\nimport {fill} from './Fill';\n\nexport function dilation2DBackpropFilter(args: {\n  inputs: Dilation2DBackpropFilterInputs,\n  attrs: Dilation2DAttrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, dy} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n\n  const dtype = filter.dtype;\n  const program =\n      new Dilation2DBackpropFilterProgram(convInfo, filter.shape, dtype);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]},\n    {type: 'int32', data: [util.sizeFromShape(convInfo.outShape)]}\n  ];\n  const output = fill({backend, attrs: {shape: filter.shape, value: 0, dtype}});\n  return backend.runWebGPUProgram(\n      program, [x, filter, dy], dtype, uniformData, output);\n}\n\nexport const dilation2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'webgpu',\n  kernelFunc: dilation2DBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Dilation2DBackpropInputInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Dilation2DBackpropInputProgram} from '../dilation_backprop_webgpu';\nimport {fill} from './Fill';\n\nexport function dilation2DBackpropInput(args: {\n  inputs: Dilation2DBackpropInputInputs,\n  attrs: Dilation2DAttrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, dy} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n\n  const dtype = x.dtype;\n  const program = new Dilation2DBackpropInputProgram(convInfo, dtype);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]},\n    {type: 'int32', data: [util.sizeFromShape(convInfo.outShape)]}\n  ];\n  const output =\n      fill({backend, attrs: {shape: convInfo.inShape, value: 0, dtype}});\n  return backend.runWebGPUProgram(\n      program, [x, filter, dy], dtype, uniformData, output);\n}\n\nexport const dilation2DBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'webgpu',\n  kernelFunc: dilation2DBackpropInput as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\n\nimport {getMainHeaderString as main, PixelsOpType, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DrawProgram implements WebGPUProgram {\n  variableNames = ['Image'];\n  uniforms = 'alpha: f32,';\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  type: DataType;\n  textureFormat: GPUTextureFormat;\n  pixelsOpType = PixelsOpType.DRAW;\n  size = true;\n\n  constructor(\n      outShape: number[], type: DataType, textureFormat: GPUTextureFormat) {\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.type = type;\n    this.textureFormat = textureFormat;\n    this.shaderKey = `draw_${type}_${textureFormat}`;\n  }\n\n  getUserCode(): string {\n    let calculateResult;\n    const value = this.type === 'float32' ? 'value' : 'value / 255.0';\n    calculateResult = `\n      if (uniforms.numChannels == 1) {\n        rgba[0] = ${value};\n        rgba[1] = ${value};\n        rgba[2] = ${value};\n      } else {\n        rgba[d] = ${value};\n      }`;\n\n    const userCode = `\n       @group(0) @binding(0) var outImage : texture_storage_2d<${\n        this.textureFormat}, write>;\n       ${main('index')} {\n         if (index < uniforms.size) {\n           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);\n           for (var d = 0; d < uniforms.numChannels; d = d + 1) {\n             let value = f32(inBuf[index * uniforms.numChannels + d]);\n             ${calculateResult}\n           }\n           rgba.x = rgba.x * rgba.w;\n           rgba.y = rgba.y * rgba.w;\n           rgba.z = rgba.z * rgba.w;\n           let coords = getCoordsFromIndex(index);\n           textureStore(outImage, vec2<i32>(coords.yx), rgba);\n         }\n       }\n      `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use backend file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {Draw, DrawAttrs, DrawInputs,} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DrawProgram} from '../draw_webgpu';\n\nexport function draw(\n    args: {inputs: DrawInputs, backend: WebGPUBackend, attrs: DrawAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image} = inputs;\n  const {canvas, options} = attrs;\n  const [height, width] = image.shape.slice(0, 2);\n  const {imageOptions} = options || {};\n  const alpha = imageOptions ?.alpha || 1;\n\n  //  'rgba8unorm' should work on macOS according to\n  //  https://bugs.chromium.org/p/chromium/issues/detail?id=1298618. But\n  //  failed on macOS/M2. So use 'bgra8unorm' first when available.\n  const format = backend.device.features.has('bgra8unorm-storage') ?\n      'bgra8unorm' :\n      'rgba8unorm';\n  const outShape = [height, width];\n  const program = new DrawProgram(outShape, image.dtype, format);\n  canvas.width = width;\n  canvas.height = height;\n  const backendName = 'webgpu';\n  let gpuContext = canvas.getContext(backendName);\n  let canvasWebGPU;\n  if (!gpuContext) {\n    canvasWebGPU = new OffscreenCanvas(width, height);\n    gpuContext = canvasWebGPU.getContext(backendName);\n  }\n  const numChannels = image.shape.length === 3 ? image.shape[2] : 1;\n  gpuContext.configure({\n    device: backend.device,\n    format,\n    usage: GPUTextureUsage.STORAGE_BINDING,\n    alphaMode: 'premultiplied'\n  });\n\n  const outputDtype = 'int32';\n  const output = backend.makeTensorInfo(outShape, outputDtype);\n  const info = backend.tensorMap.get(output.dataId);\n  info.resource = gpuContext.getCurrentTexture();\n  info.external = true;\n\n  const uniformData =\n      [{type: 'uint32', data: [numChannels]}, {type: 'float32', data: [alpha]}];\n  backend.runWebGPUProgram(program, [image], outputDtype, uniformData, output);\n\n  if (canvasWebGPU) {\n    const canvas2dContext = canvas.getContext('2d');\n    if (!canvas2dContext) {\n      throw new Error(\n          `Please make sure this canvas has only been used for 2d or webgpu context!`);\n    }\n    canvas2dContext.drawImage(canvasWebGPU, 0, 0);\n  }\n  backend.disposeData(output.dataId);\n  return image;\n}\n\nexport const drawConfig: KernelConfig = {\n  kernelName: Draw,\n  backendName: 'webgpu',\n  kernelFunc: draw as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nexport const multiplyKernelFunc = binaryKernelFunc({\n  opType: BinaryOpType.MUL,\n  cpuKernelImpl: cpuMultiply,\n  supportsComplex: true\n});\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgpu',\n  kernelFunc: multiplyKernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: WebGPUBackend, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return reduce(x, axis, keepDims, 'sum', backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgpu',\n  kernelFunc: sum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {multiplyKernelFunc} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: WebGPUBackend, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out =\n            multiplyKernelFunc({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeData(tensorInfo.dataId);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgpu',\n  kernelFunc: einsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const elu = unaryKernelFunc({opType: UnaryOpType.ELU});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgpu',\n  kernelFunc: elu\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BinaryOpType} from '../binary_op_util';\nimport {BinaryOpProgram} from '../binary_op_webgpu';\n\nexport const eluGrad =\n    (args: {inputs: EluGradInputs, backend: WebGPUBackend}): TensorInfo => {\n      const {inputs, backend} = args;\n      const {dy, y} = inputs;\n\n      const program =\n          new BinaryOpProgram(BinaryOpType.ELU_DER, dy.shape, y.shape);\n      return backend.runWebGPUProgram(program, [dy, y], dy.dtype);\n    };\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgpu',\n  kernelFunc: eluGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU as cpuEqual} from '../kernel_utils/shared';\n\nexport const equal = binaryKernelFunc(\n    {opType: BinaryOpType.EQUAL, dtype: 'bool', cpuKernelImpl: cpuEqual});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const erf = unaryKernelFunc({opType: UnaryOpType.ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgpu',\n  kernelFunc: erf\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const exp = unaryKernelFunc({\n  opType: UnaryOpType.EXP,\n  cpuKernelImpl: expImplCPU,\n  dtype: 'float32',\n});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgpu',\n  kernelFunc: exp\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgpu',\n  kernelFunc: expandDims as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const expm1 =\n    unaryKernelFunc({opType: UnaryOpType.EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgpu',\n  kernelFunc: expm1\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FFTProgram implements WebGPUProgram {\n  variableNames: string[] = ['real', 'imag'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'exponentMultiplier : f32, denominator: f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  component: string;\n\n  constructor(component: 'real'|'imag', shape: [number, number]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.component = component;\n    this.shaderKey = `fft_${component}`;\n  }\n\n  getUserCode(): string {\n    const opString = this.component === 'real' ?\n        'return real * expR - imag * expI;' :\n        'return real * expI + imag * expR;';\n    const userCode = `\n    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {\n      ${opString}\n    }\n\n    fn mulMatDFT(batch: i32, index: i32) -> f32 {\n      let indexRatio = f32(index) / f32(uniforms.realShape[1]);\n      let exponentMultiplierTimesIndexRatio =\n          uniforms.exponentMultiplier * indexRatio;\n\n      var result = 0.0;\n\n      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {\n        // x = (-2|2 * PI / N) * index * i;\n        let x = exponentMultiplierTimesIndexRatio * f32(i);\n        let expR = cos(x);\n        let expI = sin(x);\n        let real = getReal(batch, i);\n        let imag = getImag(batch, i);\n\n        result = result +\n            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;\n      }\n\n      return result;\n    }\n\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {FFTProgram} from '../fft_webgpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: WebGPUBackend): TensorInfo {\n  const xData = backend.tensorMap.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const toDispose = [];\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n  toDispose.push(input2D);\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape);\n  const imagProgram = new FFTProgram('imag', xShape);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const exponentMultiplier = inverse ? 2.0 * Math.PI : -2.0 * Math.PI;\n  const denominator = inverse ? xShape[1] : 1.0;\n  const uniformData = [\n    {type: 'float32', data: [exponentMultiplier]},\n    {type: 'float32', data: [denominator]}\n  ];\n\n  const realPart =\n      backend.runWebGPUProgram(realProgram, inputs, 'float32', uniformData);\n  toDispose.push(realPart);\n  const imagPart =\n      backend.runWebGPUProgram(imagProgram, inputs, 'float32', uniformData);\n  toDispose.push(imagPart);\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n  toDispose.push(complexOutput);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgpu',\n  kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FlipLeftRightProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(imageShape: [number, number, number, number]) {\n    this.outputShape = imageShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'flipLeftRight';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let coordX = uniforms.xShape[2] - coords[2] - 1;\n          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);\n          setOutputAtIndex(index, outputValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {FlipLeftRightProgram} from '../flip_left_right_webgpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n    kernelName: FlipLeftRight,\n    backendName: 'webgpu',\n    kernelFunc: ({inputs, backend}) => {\n      const {image} = inputs as FlipLeftRightInputs;\n      const webgpuBackend = backend as WebGPUBackend;\n\n      const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n      const output =\n          webgpuBackend.runWebGPUProgram(program, [image], image.dtype);\n      return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const floor =\n    unaryKernelFunc({opType: UnaryOpType.FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgpu',\n  kernelFunc: floor\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorDivImplCPU} from '../kernel_utils/shared';\n\nexport const floorDiv = binaryKernelFunc({\n  opType: BinaryOpType.FLOOR_DIV,\n  cpuKernelImpl: floorDivImplCPU,\n  dtype: 'int32'\n});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, PixelsOpType, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FromPixelsProgram implements WebGPUProgram {\n  dispatch: [number, number, number];\n  dispatchLayout: {x: number[]};\n  pixelsOpType = PixelsOpType.FROM_PIXELS;\n  outputShape: number[] = [0];\n  shaderKey: string;\n  importVideo: boolean;\n  variableNames: string[] = [];\n  workgroupSize: [number, number, number] =\n      [256, 1, 1];  // The empirical value.\n\n  constructor(outputShape: number[], numChannels: number, importVideo = false) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [numChannels, 1, 1]);\n\n    this.importVideo = importVideo;\n    this.shaderKey = `fromPixels_${this.importVideo}`;\n  }\n\n  getUserCode(): string {\n    const textureLoad = this.importVideo ?\n        'textureLoad(src, vec2<i32>(coords.yx));' :\n        'textureLoad(src, vec2<i32>(coords.yx), 0)';\n    const textureType =\n        this.importVideo ? 'texture_external' : 'texture_2d<f32>';\n    return `\n      @binding(1) @group(0) var src: ${textureType};\n      ${main('index')} {\n        let flatIndex = index * uniforms.numChannels;\n        if (flatIndex < uniforms.size) {\n          let coords = getCoordsFromIndex(flatIndex);\n          let values = ${textureLoad};\n          for (var i = 0; i < uniforms.numChannels; i = i + 1) {\n            result[flatIndex + i] = i32(floor(255.0 * values[i]));\n          }\n        }\n      }\n  `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use backend file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs, util} from '@tensorflow/tfjs-core';\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {FromPixelsProgram} from '../from_pixels_webgpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgpu',\n  kernelFunc: fromPixels as unknown as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n\nexport function fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: WebGPUBackend,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const isCanvas = (typeof (HTMLCanvasElement) !== 'undefined' &&\n                    pixels instanceof HTMLCanvasElement) ||\n      (typeof (OffscreenCanvas) !== 'undefined' &&\n       pixels instanceof OffscreenCanvas);\n  const isImageBitmap =\n      typeof (ImageBitmap) !== 'undefined' && pixels instanceof ImageBitmap;\n\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n  const outputShape = [height, width, numChannels];\n\n  const importVideo =\n      env().getBool('WEBGPU_IMPORT_EXTERNAL_TEXTURE') && isVideo;\n  const isVideoOrImage = isVideo || isImage;\n  if (isImageBitmap || isCanvas || isVideoOrImage) {\n    let resource;\n    if (importVideo) {\n      resource = backend.device.importExternalTexture(\n          {source: pixels as HTMLVideoElement});\n    } else {\n      if (isVideoOrImage) {\n        const newWillReadFrequently =\n            env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n        if (fromPixels2DContext == null ||\n            newWillReadFrequently !== willReadFrequently) {\n          willReadFrequently = newWillReadFrequently;\n          fromPixels2DContext = document.createElement('canvas').getContext(\n              '2d', {willReadFrequently});\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(\n            pixels as HTMLVideoElement | HTMLImageElement, 0, 0, width, height);\n        pixels = fromPixels2DContext.canvas;\n      }\n\n      const usage = GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING;\n      const format = 'rgba8unorm' as GPUTextureFormat;\n      const texture = backend.textureManager.acquireTexture(\n          outputShape[1], outputShape[0], format, usage);\n      backend.queue.copyExternalImageToTexture(\n          {source: pixels as HTMLCanvasElement | ImageBitmap}, {texture},\n          [outputShape[1], outputShape[0]]);\n      resource = texture;\n    }\n\n    const size = util.sizeFromShape(outputShape);\n    const strides = util.computeStrides(outputShape);\n    const program =\n        new FromPixelsProgram(outputShape, numChannels, importVideo);\n\n    const uniformData = [\n      {type: 'uint32', data: [size]}, {type: 'uint32', data: [numChannels]},\n      {type: 'uint32', data: [...strides]}\n    ];\n    const input = backend.makeTensorInfo([height, width], 'int32');\n    const info = backend.tensorMap.get(input.dataId);\n    info.resource = resource;\n\n    const result =\n        backend.runWebGPUProgram(program, [input], 'int32', uniformData);\n    backend.disposeData(input.dataId);\n    return result;\n  }\n\n  // TODO: Encoding should happen on GPU once we no longer have to download\n  // image data to the CPU.\n  const imageData = (pixels as ImageData | backend_util.PixelData).data;\n  let pixelArray = imageData;\n  if (numChannels != null && numChannels !== 4) {\n    pixelArray = new Uint8Array(pixels.width * pixels.height * numChannels);\n\n    const dataLength = imageData.length;\n    let j = 0;\n    for (let i = 0; i < dataLength; i++) {\n      if (i % 4 < numChannels) {\n        pixelArray[j++] = imageData[i];\n      }\n    }\n  }\n\n  const output =\n      backend.makeTensorInfo(outputShape, 'int32', new Int32Array(pixelArray));\n  backend.uploadToGPU(output.dataId);\n  return output;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BatchNormProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[];\n  uniforms = 'varianceEpsilon : f32,';\n  // This is an experimental value.\n  workgroupSize: [number, number, number] = [128, 1, 1];\n  offsetShape: number[]|null;\n  scaleShape: number[]|null;\n  varianceEpsilon: number;\n  size = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n    }\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n    }\n    this.offsetShape = offsetShape;\n    this.scaleShape = scaleShape;\n    this.shaderKey = 'batchNorm';\n  }\n\n  getUserCode(): string {\n    let offsetSnippet = '0.0';\n    if (this.offsetShape != null) {\n      offsetSnippet = 'getOffsetByOutputIndex(index)';\n    }\n\n    let scaleSnippet = '1.0';\n    if (this.scaleShape != null) {\n      scaleSnippet = 'getScaleByOutputIndex(index)';\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size)\n        {\n          let xValue = getXByOutputIndex(index);\n          let meanValue = getMeanByOutputIndex(index);\n          let varianValue = getVarianceByOutputIndex(index);\n          let offsetValue = ${offsetSnippet};\n          let scaleValue = ${scaleSnippet};\n          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));\n          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));\n        }\n      }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, Tensor} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {BatchNormProgram} from '../batchnorm_webgpu';\n\nexport const fusedBatchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x, scale, offset, mean, variance} = inputs as FusedBatchNormInputs;\n    const {varianceEpsilon} = attrs as unknown as FusedBatchNormAttrs;\n    const webGPUBackend = backend as WebGPUBackend;\n    const batchNormInputs = [x as Tensor, mean as Tensor, variance as Tensor];\n    let offsetShape = null;\n    if (offset != null) {\n      offsetShape = offset.shape;\n      batchNormInputs.push(offset as Tensor);\n    }\n    let scaleShape = null;\n    if (scale != null) {\n      scaleShape = scale.shape;\n      batchNormInputs.push(scale as Tensor);\n    }\n    const program = new BatchNormProgram(\n        x.shape, mean.shape, variance.shape, offsetShape, scaleShape);\n    const uniformData = [{type: 'float32', data: [varianceEpsilon]}];\n    return webGPUBackend.runWebGPUProgram(\n        program, batchNormInputs, x.dtype, uniformData);\n  }\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {conv2DImpl} from './Conv2D_impl';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  return conv2DImpl({\n    x,\n    filter,\n    convInfo,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgpu',\n  kernelFunc: fusedConv2d as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DVec4Program} from '../depthwise_conv2d_vec4_webgpu';\nimport {DepthwiseConv2DProgram} from '../depthwise_conv2d_webgpu';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n\n  const dimensions = [\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]},\n  ];\n\n  let program: DepthwiseConv2DProgram|DepthwiseConv2DVec4Program;\n  if (convInfo.outHeight > 4 && convInfo.outWidth > 4 &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.inChannels === convInfo.outChannels &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.inChannels % 4 === 0) {\n    program = new DepthwiseConv2DVec4Program(\n        convInfo, hasBias, activation, hasPreluActivationWeights);\n    dimensions.push({type: 'int32', data: [program.virtualWidth]});\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, activation, hasPreluActivationWeights);\n    dimensions.push(\n        {type: 'int32', data: [convInfo.filterHeight]},\n        {type: 'int32', data: [convInfo.filterWidth]},\n        {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        });\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({type: 'float32', data: [leakyreluAlpha]});\n    program.uniforms += ' alpha : f32,';\n  }\n  const result =\n      backend.runWebGPUProgram(program, programInputs, 'float32', dimensions);\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgpu',\n  kernelFunc: fusedDepthwiseConv2D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class GatherNDProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[] = ['A', 'indices'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  sliceDim: number;\n  constructor(sliceDim: number, shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `gathernd_${sliceDim}`;\n    this.sliceDim = sliceDim;\n    this.uniforms = `sliceDim : i32, strides : ${getCoordsDataType(sliceDim)},`;\n  }\n\n  getUserCode(): string {\n    let strideString;\n    if (this.sliceDim > 1) {\n      strideString = 'uniforms.strides[j]';\n    } else {\n      strideString = 'uniforms.strides';\n    }\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          var flattenIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexTemp = i32(round(getIndices(coords[0], j)));\n            let strideNum = ${strideString};\n            flattenIndex = flattenIndex + indexTemp * strideNum;\n          }\n\n          setOutputAtIndex(index, getA(flattenIndex, coords[1]));\n        }\n      }\n      `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {GatherNDProgram} from '../gather_nd_webgpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program = new GatherNDProgram(sliceRank, [numSlices, sliceSize]);\n  const uniformData =\n      [{type: 'int32', data: [sliceRank]}, {type: 'int32', data: strides}];\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype, uniformData);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeData(flattenIndices.dataId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(res.dataId);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgpu',\n  kernelFunc: gatherNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class GatherProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[] = ['A', 'indices'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  aShape: number[];\n  size = true;\n\n  constructor(aShape: number[], outputShape: number[]) {\n    this.outputShape = aShape.slice();\n    this.aShape = aShape;\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `gather`;\n  }\n\n  getUserCode(): string {\n    const sourceCoords = getSourceCoords(this.aShape);\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let indexZ = i32(getIndices(resRC.x, resRC.z));\n          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);\n          setOutputAtIndex(index, inBounds * getA(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: number[]): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('indexZ');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, Rank, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {GatherProgram} from '../gather_webgpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(\n    args:\n        {inputs: GatherV2Inputs, backend: WebGPUBackend, attrs: GatherV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  // Unlike WebGL, WebGPU won't check if index is out of bound by calling\n  // backend.readSync() function in debug mode.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices])) {\n    const indicesTensorData = backend.tensorMap.get(flattenIndex.dataId);\n    const indicesValues = indicesTensorData.values as TypedArray;\n    const indicesBuffer =\n        buffer(flattenIndex.shape, flattenIndex.dtype, indicesValues) as\n        TensorBuffer<Rank>;\n    const flattenXTensorData = backend.tensorMap.get(flattenX.dataId);\n    const xValues = flattenXTensorData.values as TypedArray;\n    const xBuffer =\n        buffer(flattenX.shape, flattenX.dtype, xValues) as TensorBuffer<Rank>;\n    const outBuf = gatherV2ImplCPU(xBuffer, indicesBuffer, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeData(t.dataId));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgpu',\n  kernelFunc: gatherV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU as cpuGreater} from '../kernel_utils/shared';\n\nexport const greater = binaryKernelFunc({\n  opType: BinaryOpType.GREATER,\n  cpuKernelImpl: cpuGreater,\n  dtype: 'bool',\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU as cpuGreaterEqual} from '../kernel_utils/shared';\n\nexport const greaterEqual = binaryKernelFunc({\n  opType: BinaryOpType.GREATER_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuGreaterEqual\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgpu',\n  kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const isFinite =\n    unaryKernelFunc({opType: UnaryOpType.IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgpu',\n  kernelFunc: isFinite\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const isInf =\n    unaryKernelFunc({opType: UnaryOpType.IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgpu',\n  kernelFunc: isInf\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const isNaN =\n    unaryKernelFunc({opType: UnaryOpType.IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgpu',\n  kernelFunc: isNaN\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: WebGPUBackend,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n  const uniformData = [{type: 'float32', data: [alpha]}];\n  const program =\n      new UnaryOpProgram(x.shape, UnaryOpType.LEAKYRELU, 'alpha : f32,');\n  return backend.runWebGPUProgram(program, [x], 'float32', uniformData);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgpu',\n  kernelFunc: leakyRelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU as cpuLess} from '../kernel_utils/shared';\n\nexport const less = binaryKernelFunc(\n    {opType: BinaryOpType.LESS, dtype: 'bool', cpuKernelImpl: cpuLess});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU as cpuLessEqual} from '../kernel_utils/shared';\n\nexport const lessEqual = binaryKernelFunc({\n  opType: BinaryOpType.LESS_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuLessEqual\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class LinSpaceProgram implements WebGPUProgram {\n  variableNames: string[] = [];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'start : f32, step : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shape: number) {\n    this.outputShape = [shape];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'linSpace';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {LinSpaceProgram} from '../lin_space_webgpu';\n\nexport function linSpace(args: {backend: WebGPUBackend, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n  const step = (stop - start) / (num - 1);\n\n  const program = new LinSpaceProgram(num);\n  const uniformData =\n      [{type: 'float32', data: [start]}, {type: 'float32', data: [step]}];\n  return backend.runWebGPUProgram(program, [], 'float32', uniformData);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgpu',\n  kernelFunc: linSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const log =\n    unaryKernelFunc({opType: UnaryOpType.LOG, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgpu',\n  kernelFunc: log\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const log1p = unaryKernelFunc({opType: UnaryOpType.LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgpu',\n  kernelFunc: log1p\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const logicalAnd =\n    binaryKernelFunc({opType: BinaryOpType.LOGICAL_AND, dtype: 'bool'});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const logicalNot = unaryKernelFunc({opType: UnaryOpType.LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgpu',\n  kernelFunc: logicalNot\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const logicalOr = binaryKernelFunc({opType: BinaryOpType.LOGICAL_OR});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nconst powOperatorSnippet = `\n  var powValue = 0.0;\n  let basis = uniforms.bias + uniforms.alpha * sum;\n  if (uniforms.beta == 0.5) {\n    powValue = inverseSqrt(basis);\n  } else if (uniforms.beta == 1.0) {\n    powValue = 1.0 / basis;\n  } else {\n    powValue = exp(log(basis) * (-uniforms.beta));\n  }\n`;\n\nexport class LRNProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'radius : i32, bias : f32, alpha : f32, beta : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(xShape: number[]) {\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'lrn';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n        let d = coords[3];\n\n        let x = getX(b, r, c, d);\n        var sum = 0.0;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let idx = d + i;\n          if (idx >= 0 && idx < uniforms.xShape[3]) {\n            let z = getX(b, r, c, idx);\n            sum = sum + z * z;\n          }\n        }\n        ${powOperatorSnippet}\n\n        setOutputAtIndex(index, x * powValue);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n\nexport class LRNSharedProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'radius : i32, bias : f32, alpha : f32, beta : f32,';\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  maxAllowRadius = 16;\n  elementsPerWorkgroup: number;\n\n  constructor(xShape: number[], radius: number) {\n    util.assert(\n        radius <= this.maxAllowRadius,\n        () => `Radius must be less than or equal to ${\n            this.maxAllowRadius}, current radius is ${radius}`);\n\n    this.outputShape = xShape;\n    // The reason why not using this.workgroupSize[0] + 2 * maxAllowRadius here\n    // is to make sure that there is only one time global memory load access for\n    // each thread.\n    this.elementsPerWorkgroup = this.workgroupSize[0] - 2 * this.maxAllowRadius;\n    this.dispatchLayout = {x: [3], y: [2], z: [0, 1]};\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, [\n      this.elementsPerWorkgroup, this.workgroupSize[1], this.workgroupSize[2]\n    ]);\n    this.shaderKey = 'lrn_shared';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;\n    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};\n    const maxAllowRadius = ${this.maxAllowRadius};\n\n    ${main()} {\n      let localDepth = i32(localId.x);\n      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;\n      let xDepth = workgroupDepth + localDepth - maxAllowRadius;\n      let b = i32(globalId.z) / uniforms.xShape[1];\n      let r = i32(globalId.z) - b * uniforms.xShape[1];\n      let c = i32(globalId.y);\n      let d = workgroupDepth + localDepth;\n\n      var x = 0.0;\n      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {\n        x = getX(b, r, c, xDepth);\n      }\n      lrnSub[localDepth] = x;\n      workgroupBarrier();\n\n      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {\n        var sum = 0.0;\n        let index = localDepth + maxAllowRadius;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let z = lrnSub[index + i];\n          sum = sum + z * z;\n        }\n        ${powOperatorSnippet}\n\n        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);\n      }\n    } `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {LRNProgram, LRNSharedProgram} from '../lrn_webgpu';\n\nexport function lrn(\n    args: {inputs: LRNInputs, backend: WebGPUBackend, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  // When the adjacent channels is less than or equal to 16, which could cover\n  // most cases, we use shared memory version to get better performance.\n  // The theoretical adjacent channels may be very large, but the shared memory\n  // size of hardware is limited, so we use the naive version when the adjacent\n  // channels is large.\n  let program: LRNProgram|LRNSharedProgram;\n  if (depthRadius > 16) {\n    program = new LRNProgram(x.shape);\n  } else {\n    program = new LRNSharedProgram(x.shape, depthRadius);\n  }\n  const uniformData = [\n    {type: 'int32', data: [depthRadius]}, {type: 'float32', data: [bias]},\n    {type: 'float32', data: [alpha]}, {type: 'float32', data: [beta]}\n  ];\n  const res = backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n\n  return res;\n}\n\nexport const lrnConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgpu',\n  kernelFunc: lrn as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class LRNGradProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  uniforms = 'depthRadius : i32, bias : f32, alpha : f32, beta : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(inputShape: number[]) {\n    this.outputShape = inputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'lrn_grad';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n\n        let MIN_DEPTH_BEGIN = 0;\n        let MAX_DEPTH_END = uniforms.outShape[3];\n        var result = 0.0;\n        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {\n          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);\n          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);\n\n          var norm = 0.0;\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            } else {\n              break;\n            }\n          }\n\n          norm = uniforms.alpha * norm + uniforms.bias;\n\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              var dyi = -2.0 * uniforms.alpha * uniforms.beta\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * uniforms.beta);\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, result);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {LRNGradProgram} from '../lrn_grad_webgpu';\n\nexport function lrnGrad(\n    args: {inputs: LRNGradInputs, backend: WebGPUBackend, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  const program = new LRNGradProgram(x.shape);\n  const uniformData = [\n    {type: 'int32', data: [depthRadius]}, {type: 'float32', data: [bias]},\n    {type: 'float32', data: [alpha]}, {type: 'float32', data: [beta]}\n  ];\n  const res =\n      backend.runWebGPUProgram(program, [x, y, dy], x.dtype, uniformData);\n\n  return res;\n}\n\nexport const lrnGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgpu',\n  kernelFunc: lrnGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU as cpuMaximum} from '../kernel_utils/shared';\n\nexport const maximum = binaryKernelFunc({\n  opType: BinaryOpType.MAX,\n  cpuKernelImpl: cpuMaximum,\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {poolImpl} from './Pool_impl';\n\nexport function maxPool(\n    args: {inputs: MaxPoolInputs, backend: WebGPUBackend, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  return poolImpl(x, convInfo, 'max', backend);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgpu',\n  kernelFunc: maxPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Pool3DProgram} from '../pool_webgpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: WebGPUBackend,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max');\n  const dimensions = [\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data:\n          [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n    },\n    {\n      type: 'int32',\n      data: [convInfo.inDepth, convInfo.inHeight, convInfo.inWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight,\n        convInfo.effectiveFilterWidth\n      ]\n    }\n  ];\n  return backend.runWebGPUProgram(maxPoolProgram, [x], x.dtype, dimensions);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgpu',\n  kernelFunc: maxPool3d as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class MaxPool2DBackpropProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy', 'maxPos'];\n  uniforms =\n      `strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'maxPool2DBackprop';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            let curPosValue = wR * uniforms.filterDims[1] + wC;\n            let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy', 'maxPos'];\n  uniforms = `strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'maxPool3DBackprop';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;\n\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;\n              let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_webgpu';\nimport {Pool3DProgram} from '../pool_webgpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: WebGPUBackend,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  let uniformData = [\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data:\n          [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n    },\n    {\n      type: 'int32',\n      data: [convInfo.inDepth, convInfo.inHeight, convInfo.inWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight,\n        convInfo.effectiveFilterWidth\n      ]\n    }\n  ];\n  const maxPool3dPositions = backend.runWebGPUProgram(\n      maxPool3dPositionsProgram, [x], 'int32', uniformData);\n\n  const maxPool3dBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  uniformData = [\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth - 1 - convInfo.padInfo.front,\n        convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top,\n        convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight,\n        convInfo.effectiveFilterWidth\n      ]\n    },\n    {type: 'int32', data: [convInfo.outDepth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]}\n  ];\n  const result = backend.runWebGPUProgram(\n      maxPool3dBackpropProgram, [dy, maxPool3dPositions], x.dtype, uniformData);\n  backend.disposeData(maxPool3dPositions.dataId);\n\n  return result;\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgpu',\n  kernelFunc: maxPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_webgpu';\nimport {Pool2DProgram} from '../pool_webgpu';\nimport {assertNotComplex} from '../webgpu_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: WebGPUBackend,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n\n  const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', true);\n  let uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]}, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    }\n  ];\n  const maxPoolPositions = backend.runWebGPUProgram(\n      maxPoolPositionsProgram, [x], 'int32', uniformData);\n\n  const maxPoolBackpropProgram = new MaxPool2DBackpropProgram(convInfo);\n  uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top,\n        convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    },\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]}\n  ];\n  const result = backend.runWebGPUProgram(\n      maxPoolBackpropProgram, [dy, maxPoolPositions], x.dtype, uniformData);\n  backend.disposeData(maxPoolPositions.dataId);\n\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgpu',\n  kernelFunc: maxPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Pool2DProgram} from '../pool_webgpu';\n\nexport function maxPoolWithArgmax(args: {\n  inputs: MaxPoolWithArgmaxInputs,\n  attrs: MaxPoolWithArgmaxAttrs,\n  backend: WebGPUBackend\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {filterSize, strides, pad, includeBatchInIndex} = attrs;\n  const {x} = inputs;\n\n  util.assert(\n      x.shape.length === 4,\n      () => `Error in maxPool: input must be rank 4 but got rank ${\n          x.shape.length}.`);\n  const dilations: [number, number] = [1, 1];\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad);\n\n  const uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]}, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    }\n  ];\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput =\n      backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput =\n      backend.runWebGPUProgram(program, [x], 'int32', uniformData);\n  return [poolOutput, indexOutput];\n}\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgpu',\n  kernelFunc: maxPoolWithArgmax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function min(\n    args: {inputs: MinInputs, backend: WebGPUBackend, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return reduce(x, axis, keepDims, 'min', backend);\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgpu',\n  kernelFunc: min as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU as cpuMinimum} from '../kernel_utils/shared';\n\nexport const minimum = binaryKernelFunc({\n  opType: BinaryOpType.MIN,\n  cpuKernelImpl: cpuMinimum,\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class MirrorPadProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  uniforms = '';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  xShape: number[];\n  offset: number;\n  size = true;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.xShape = xShape;\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.offset = mode === 'reflect' ? 0 : 1;\n    this.shaderKey = `mirrorPad_${mode}`;\n  }\n\n  getUserCode(): string {\n    const rank = this.xShape.length;\n    // The length of paddings are same with the rank of the input tensor.\n    const start = this.xShape.map((_, i) => `uniforms.pad${i}[0]`).join(',');\n    const end = this.xShape\n                    .map(\n                        (_, i) => `uniforms.pad${i}[0] + uniforms.xShape${\n                            rank > 1 ? `[${i}]` : ''}`)\n                    .join(',');\n\n    const shaderStart = rank === 1 ? 'start' : 'start[i]';\n    const shaderEnd = rank === 1 ? 'end' : 'end[i]';\n    const shaderOutC = rank === 1 ? 'outC' : 'outC[i]';\n    const dtype = getCoordsDataType(rank);\n    const unpackedCoords = rank > 1 ?\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank) :\n        'coords';\n\n    return `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let start = ${dtype}(${start});\n          let end = ${dtype}(${end});\n          var outC = getCoordsFromIndex(index);\n          for (var i = 0; i < ${rank}; i = i + 1) {\n            if (${shaderOutC} < ${shaderStart}) {\n              ${shaderOutC} = ${shaderStart} * 2 - ${shaderOutC} - ${\n        this.offset};\n            } else if(${shaderOutC} >= ${shaderEnd}) {\n              ${shaderOutC} = (${shaderEnd} - 1) * 2 - ${shaderOutC} + ${\n        this.offset};\n            }\n          }\n          let coords = outC - start;\n          setOutputAtIndex(index, getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, MirrorPad, MirrorPadAttrs, MirrorPadInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {MirrorPadProgram} from '../mirror_pad_webgpu';\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MirrorPadInputs;\n    const {paddings, mode} = attrs as unknown as MirrorPadAttrs;\n    const webGPUBackend = backend as WebGPUBackend;\n\n    const uniformData = paddings.map(p => {\n      return {type: 'int32', data: [p[0], p[1]]};\n    });\n    const program = new MirrorPadProgram(x.shape, paddings, mode);\n    const output =\n        webGPUBackend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const mod = binaryKernelFunc({opType: BinaryOpType.MOD});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class MultinomialProgram implements WebGPUProgram {\n  variableNames: string[] = ['probs'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'seed : f32, numOutcomes: i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(batchSize: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'multinomial';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {\n      let HASHSCALE1 = 443.8975;\n      let p = resultUV * seed;\n      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);\n      p3 = p3 + dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n\n        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),\n            f32(coords[0]) / f32(uniforms.outShape[0]));\n        let r = random(uniforms.seed, resUV);\n        var cdf = 0.0;\n        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {\n          cdf = cdf + getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutputAtIndexI32(index, i);\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {flatDispatchLayout} from './webgpu_util';\n\nexport class SoftmaxProgram implements WebGPUProgram {\n  variableNames = ['logits'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number];\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;  // [rows, cols]\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = [this.outputShape[0], 1, 1];\n    if (this.outputShape[1] >= 4096) {\n      this.workgroupSize = [256, 1, 1];\n    } else {\n      this.workgroupSize = [64, 1, 1];\n    }\n    this.shaderKey = 'softmax';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    var<workgroup> buf : array<f32, ${this.workgroupSize[0]}>;\n    var<workgroup> rowMaxShared : f32;\n    var<workgroup> rowSumShared : f32;\n    const blockSize = ${this.workgroupSize[0]};\n    ${main('index')} {\n      let row = index / blockSize;\n      let tid = i32(localId.x);\n      let cols = uniforms.outShape[1];\n\n      var threadMax = -3.402823e+38f;\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = getLogits(row, col);\n        threadMax = max(threadMax, value);\n      }\n      if (tid < cols) {\n        buf[tid] = threadMax;\n      }\n      workgroupBarrier();\n\n      var reduceSize = min(cols, blockSize);\n      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n        reduceSize = currSize + (reduceSize & 1);\n        if (tid < currSize) {\n          buf[tid] = max(buf[tid], buf[tid + reduceSize]);\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowMaxShared = buf[0];\n      }\n      workgroupBarrier();\n\n      var threadSum = 0.0;\n      for (var col = tid; col < cols; col += blockSize) {\n        let subExp = exp(getLogits(row, col) - rowMaxShared);\n        threadSum += subExp;\n      }\n      buf[tid] = threadSum;\n      workgroupBarrier();\n\n      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n        if (tid < currSize) {\n          buf[tid] = buf[tid] + buf[tid + currSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowSumShared = buf[0];\n      }\n      workgroupBarrier();\n\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;\n        setOutputAtCoords(row, col, value);\n      }\n  }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {SoftmaxProgram} from '../softmax_webgpu';\n\nimport {reshape} from './Reshape';\n\nexport function softmax(\n    args: {inputs: SoftmaxInputs, backend: WebGPUBackend, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsReshaped = reshape({\n    inputs: {x: logits},\n    backend,\n    attrs: {\n      shape: [\n        util.sizeFromShape(logits.shape) / logits.shape[dim], logits.shape[dim]\n      ]\n    }\n  });\n  const program = new SoftmaxProgram(logitsReshaped.shape);\n  const res = backend.runWebGPUProgram(program, [logitsReshaped], logits.dtype);\n  const resReshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: logits.shape}});\n  backend.disposeData(logitsReshaped.dataId);\n  backend.disposeData(res.dataId);\n  return resReshaped;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgpu',\n  kernelFunc: softmax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {MultinomialProgram} from '../multinomial_webgpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: WebGPUBackend,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numSamples);\n  const uniformData =\n      [{type: 'float32', data: [seed]}, {type: 'int32', data: [numOutcomes]}];\n  const res = backend.runWebGPUProgram(program, [probs], 'int32', uniformData);\n  if (!normalized) {\n    backend.disposeData(probs.dataId);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgpu',\n  kernelFunc: multinomial as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {negImplCPU} from '../kernel_utils/shared';\n\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.tensorMap.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  const program = new UnaryOpProgram(x.shape, UnaryOpType.NEG);\n\n  return backend.runWebGPUProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: WebGPUBackend,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  console.warn(\n      'tf.nonMaxSuppression() in webgpu locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = kernel_impls.nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgpu',\n  kernelFunc: nonMaxSuppressionV3 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nexport type TypedArray = Float32Array|Int32Array|Uint8Array;\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: WebGPUBackend,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  console.warn(\n      'tf.nonMaxSuppression() in webgpu locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} =\n      kernel_impls.nonMaxSuppressionV5Impl(\n          boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n          scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgpu',\n  kernelFunc: nonMaxSuppressionV5 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class OneHotProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'onValue : f32, offValue : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(numIndices: number, depth: number) {\n    this.outputShape = [numIndices, depth];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'onehot';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,\n                                      f32(i32(round(getX(coords.x))) == coords.y)));\n        }\n      }\n    `;\n\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {OneHotProgram} from '../onehot_webgpu';\nimport {reshape} from './Reshape';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: WebGPUBackend, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n\n  const uniformData =\n      [{type: 'float32', data: [onValue]}, {type: 'float32', data: [offValue]}];\n  const result =\n      backend.runWebGPUProgram(program, [reshaped], dtype, uniformData);\n  backend.disposeData(reshaped.dataId);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeData(result.dataId);\n\n  return out;\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgpu',\n  kernelFunc: oneHot as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeData(realPart.dataId);\n    backend.disposeData(r.dataId);\n    backend.disposeData(imagPart.dataId);\n    backend.disposeData(i.dataId);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgpu',\n  kernelFunc: zerosLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeData(realPart.dataId);\n    backend.disposeData(r.dataId);\n    backend.disposeData(imagPart.dataId);\n    backend.disposeData(i.dataId);\n\n    return result;\n  } else {\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgpu',\n  kernelFunc: onesLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: WebGPUBackend, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgpu',\n  kernelFunc: pack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport function padCommon(shape: number[], fillZero = false): string {\n  const rank = shape.length;\n  const type = getCoordsDataType(rank);\n  const start = shape.map((_, i) => `uniforms.pad${i}[0]`).join(',');\n  const end = shape\n                  .map(\n                      (_, i) => `uniforms.pad${i}[0] + uniforms.xShape${\n                          rank > 1 ? `[${i}]` : ''}`)\n                  .join(',');\n  const startValue = rank > 1 ? `${type}(${start})` : `${start}`;\n  const endValue = rank > 1 ? `${type}(${end})` : `${end}`;\n\n  const leftPadCondition =\n      rank > 1 ? `any(paddedCoords < start)` : `paddedCoords < start`;\n  const rightPadCondition =\n      rank > 1 ? `any(paddedCoords >= end)` : `paddedCoords >= end`;\n\n  const unpackedCoords = rank > 1 ?\n      ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank) :\n      'coords';\n  return `\n        let start = ${startValue};\n        let end = ${endValue};\n        if (${leftPadCondition} || ${rightPadCondition}) {\n          setOutputAtIndex(index, ${fillZero ? 0.0 : 'uniforms.constantValue'});\n        } else {\n          let coords = paddedCoords - start;\n          setOutputAtIndex(index, getX(${unpackedCoords}));\n        }\n  `;\n}\n\nexport class PadProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'constantValue : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  xShape: number[];\n  size = true;\n\n  constructor(xShape: number[], paddings: Array<[number, number]>) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.xShape = xShape;\n    this.shaderKey = 'pad';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let paddedCoords = getCoordsFromIndex(index);\n          ${padCommon(this.xShape)}\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\nimport {PadProgram} from '../pad_webgpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs,\n            backend: WebGPUBackend,\n            attrs: PadV2Attrs}): TensorInfo => {\n      const {inputs, backend, attrs} = args;\n      const {x} = inputs;\n      const {paddings, constantValue} = attrs;\n      if (paddings.every(p => util.arraysEqual(p, [0, 0]))) {\n        return identity({inputs: {x}, backend});\n      }\n      if (util.sizeFromShape(x.shape) === 0) {\n        // Short-circuit the computation, since x doesn't have value, only\n        // the shape is used to compute output shape to pad.\n        const outputShape = paddings.map(\n            (p, i) =>\n                p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n        return fill({\n          backend,\n          attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n        });\n      }\n      const uniformData = [{type: 'float32', data: [constantValue]}];\n      paddings.map(p => uniformData.push({type: 'int32', data: [p[0], p[1]]}));\n      const program = new PadProgram(x.shape, paddings);\n      return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n    };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgpu',\n  kernelFunc: padV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const pow = binaryKernelFunc({\n  opType: BinaryOpType.POW,\n});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {BinaryOpProgram} from '../binary_op_webgpu';\n\nexport function prelu(args: {inputs: PreluInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = new BinaryOpProgram(BinaryOpType.PRELU, x.shape, alpha.shape);\n  return backend.runWebGPUProgram(program, [x, alpha], 'float32');\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgpu',\n  kernelFunc: prelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: WebGPUBackend, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return reduce(x, axis, keepDims, 'prod', backend);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgpu',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: WebGPUBackend, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgpu',\n  kernelFunc: range as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const realDiv = binaryKernelFunc({opType: BinaryOpType.DIV});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgpu',\n  kernelFunc: realDiv as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const reciprocal = unaryKernelFunc({opType: UnaryOpType.RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgpu',\n  kernelFunc: reciprocal\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const relu = unaryKernelFunc({opType: UnaryOpType.RELU});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgpu',\n  kernelFunc: relu\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const relu6 = unaryKernelFunc({opType: UnaryOpType.RELU6});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgpu',\n  kernelFunc: relu6\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ResizeBilinearProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number) {\n    this.outputShape = [inputShape[0], newHeight, newWidth, inputShape[3]];\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `resizeBilinear`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC =\n            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *\n            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);\n\n          // Compute the four integer indices.\n          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);\n          let sourceCeilRC = vec2<i32>(\n            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));\n\n          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);\n\n          let top = topLeft + (topRight - topLeft) * fracRC.y;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          let newValue = top + (bottom - top) * fracRC.x;\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeBilinearProgram} from '../resize_bilinear_webgpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, size, halfPixelCenters} = attrs;\n\n  const [newHeight, newWidth] = size;\n  const adjustHeight = alignCorners && newHeight > 1 ? 1.0 : 0.0;\n  const adjustWidth = alignCorners && newWidth > 1 ? 1.0 : 0.0;\n  const halfPixelCentersValue = halfPixelCenters ? 0.5 : 0.0;\n  const uniformData = [\n    {type: 'float32', data: [adjustHeight, adjustWidth]},\n    {type: 'float32', data: [halfPixelCentersValue]}\n  ];\n\n  const program = new ResizeBilinearProgram(\n      images.shape as [number, number, number, number], newHeight, newWidth);\n\n  return backend.runWebGPUProgram(program, [images], 'float32', uniformData);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgpu',\n  kernelFunc: resizeBilinear as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ResizeBilinearBackpropProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy'];\n  uniforms =\n      `effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,\n       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  alignCorners: boolean;\n  size = true;\n\n  constructor(\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.alignCorners = alignCorners;\n    this.shaderKey = `resizeBilinearBackprop_${alignCorners}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let dxR = f32(dyR) * uniforms.heightScale;\n              let topDxRIndex = i32(floor(dxR));\n              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));\n              let dxRLerp = dxR - f32(topDxRIndex);\n              let inverseDxRLerp = 1.0 - dxRLerp;\n\n              let dxC = f32(dyC) * uniforms.widthScale;\n              let leftDxCIndex = i32(floor(dxC));\n              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));\n              let dxCLerp = dxC - f32(leftDxCIndex);\n              let inverseDxCLerp = 1.0 - dxCLerp;\n\n              if (r == topDxRIndex && c == leftDxCIndex) {\n                // topLeft\n                accumulator +=\n                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n              }\n\n              if (r == topDxRIndex && c == rightDxCIndex) {\n                // topRight\n                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == leftDxCIndex) {\n                // bottomLeft\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == rightDxCIndex) {\n                // bottomRight\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeBilinearBackpropProgram} from '../resize_bilinear_backprop_webgpu';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const [, xHeight, xWidth, ] =\n      images.shape as [number, number, number, number];\n  const [, yHeight, yWidth] = dy.shape as [number, number, number, number];\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  const program = new ResizeBilinearBackpropProgram(\n      images.shape as [number, number, number, number], alignCorners);\n  const uniformData = [\n    {type: 'int32', data: effectiveXSize},\n    {type: 'int32', data: effectiveYSize},\n    {type: 'float32', data: [heightScale]},\n    {type: 'float32', data: [widthScale]},\n    {type: 'float32', data: [invHeightScale]},\n    {type: 'float32', data: [invWidthScale]},\n    {type: 'int32', data: [winHeight]}, {type: 'int32', data: [winWidth]}\n  ];\n  return backend.runWebGPUProgram(program, [dy], dy.dtype, uniformData);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgpu',\n  kernelFunc: resizeBilinearGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ResizeNearestNeighborProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'adjustHeightWidth : vec2<f32>, roundBase : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  halfPixelCenters: boolean;\n  size = true;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, halfPixelCenters: boolean) {\n    this.outputShape = [inputShape[0], newHeight, newWidth, inputShape[3]];\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.halfPixelCenters = halfPixelCenters;\n    this.shaderKey = `resizeNearest_${halfPixelCenters}`;\n  }\n\n  getUserCode(): string {\n    let sourceFracIndexRC: string;\n    if (this.halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2<f32>(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2<f32>(rc) * effectiveInputOverOutputRatioRC`;\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC = ${sourceFracIndexRC};\n\n          // Compute the coordinators of nearest neighbor point.\n          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));\n          let sourceNearestRC = vec2<i32>(\n            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));\n          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_webgpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n  const adjustHeight = alignCorners && newHeight > 1 ? 1.0 : 0.0;\n  const adjustWidth = alignCorners && newWidth > 1 ? 1.0 : 0.0;\n  // When align corners is false, we rounds the value with floor.\n  const roundBase = alignCorners ? 0.5 : 0.0;\n  const uniformData = [\n    {type: 'float32', data: [adjustHeight, adjustWidth]},\n    {type: 'float32', data: [roundBase]}\n  ];\n\n  const program = new ResizeNearestNeighborProgram(\n      images.shape as [number, number, number, number], newHeight, newWidth,\n      halfPixelCenters);\n  return backend.runWebGPUProgram(program, [images], images.dtype, uniformData);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgpu',\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ResizeNearestNeigborBackpropProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy'];\n  uniforms =\n      `effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,\n       winHeight : i32, winWidth : i32,`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  alignCorners: boolean;\n  size = true;\n\n  constructor(\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.alignCorners = alignCorners;\n    this.shaderKey = `resizeNearestNeigborBackprop_${alignCorners}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *\n                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));\n\n              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *\n                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));\n\n              let sourceNearestRow =\n                  i32(min(f32(uniforms.outShape[1] - 1),\n                  ${\n        this.alignCorners ? 'floor(sourceFracRow + 0.5)' :\n                            'floor(sourceFracRow)'}));\n\n              let sourceNearestCol =\n                  i32(min(f32(uniforms.outShape[2] - 1),\n                  ${\n        this.alignCorners ? 'floor(sourceFracCol + 0.5)' :\n                            'floor(sourceFracCol)'}));\n\n              if (r == sourceNearestRow && c == sourceNearestCol) {\n                accumulator += getDy(b, dyR, dyC, d);\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_webgpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const [, xHeight, xWidth] = images.shape as [number, number, number, number];\n  const [, yHeight, yWidth] = dy.shape as [number, number, number, number];\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      images.shape as [number, number, number, number], alignCorners);\n  const uniformData = [\n    {type: 'int32', data: effectiveXSize},\n    {type: 'int32', data: effectiveYSize},\n    {type: 'float32', data: [invHeightScale]},\n    {type: 'float32', data: [invWidthScale]},\n    {type: 'int32', data: [winHeight]}, {type: 'int32', data: [winWidth]}\n  ];\n  return backend.runWebGPUProgram(program, [dy], dy.dtype, uniformData);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgpu',\n  kernelFunc: resizeNearestNeighborGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ReverseProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(xShape: [number, number, number, number]) {\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.uniforms = ` axis : vec4<i32>,`;\n    this.shaderKey = 'reverse';\n  }\n\n  getUserCode(): string {\n    const reverseCoordsSnippet = `\n      // Using uniform variables as judging conditions, so the function has\n      // coherent execution within all threads.\n      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {\n        var reverseCoords = coords;\n        if (uniforms.axis[0] == 1) {\n          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;\n        }\n        if (uniforms.axis[1] == 1) {\n          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;\n        }\n        if (uniforms.axis[2] == 1) {\n          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;\n        }\n        if (uniforms.axis[3] == 1) {\n          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;\n        }\n\n        return reverseCoords;\n      }\n    `;\n    const userCode = `\n      ${reverseCoordsSnippet}\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let reverseCoords = getReverseCoords(coords);\n          setOutputAtIndex(index, getX(reverseCoords[0],\n              reverseCoords[1], reverseCoords[2], reverseCoords[3]));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ReverseProgram} from '../reverse_webgpu';\n\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\nexport function reverse(\n    args: {inputs: ReverseInputs, backend: WebGPUBackend, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const xShape = x.shape;\n  const xShape4D: [number, number, number, number] = [1, 1, 1, 1];\n  xShape.forEach((d, i) => {\n    const index = i + 4 - xRank;\n    xShape4D[index] = d;\n  });\n\n  const axes = util.parseAxisParam(dims, x.shape);\n  const dims4D: [number, number, number, number] = [0, 0, 0, 0];\n  axes.forEach(ax => {\n    const index = ax + 4 - xRank;\n    dims4D[index] = 1;\n  });\n  const uniformData = [{type: 'int32', data: dims4D}];\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: xShape4D}});\n\n  const program = new ReverseProgram(xShape4D);\n  const values = backend.runWebGPUProgram(\n      program, [xReshaped], xReshaped.dtype, uniformData);\n  backend.disposeData(xReshaped.dataId);\n\n  const result =\n      reshape({inputs: {x: values}, backend, attrs: {shape: xShape}});\n  backend.disposeData(values.dataId);\n\n  return result;\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgpu',\n  kernelFunc: reverse as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class RotateProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  fillSnippet: string;\n  size = true;\n\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    this.outputShape = imageShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.uniforms = `centerX : f32, centerY : f32, sinRadians : f32,\n          cosRadians : f32,`;\n    this.shaderKey = 'rotate';\n    this.outputShape = imageShape;\n\n    if (typeof fillValue === 'number') {\n      this.uniforms += ` fillValue : f32,`;\n      this.fillSnippet = `var outputValue = uniforms.fillValue;`;\n      this.shaderKey += '_float';\n    } else {\n      this.uniforms += ` fillValue : vec3<f32>,`;\n      this.fillSnippet = `var outputValue = uniforms.fillValue[coords[3]];`;\n      this.shaderKey += '_vec3';\n    }\n  }\n\n  getUserCode(): string {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *\n                uniforms.sinRadians;\n            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *\n                uniforms.cosRadians;\n            let coordX = i32(round(coordXFloat + uniforms.centerX));\n            let coordY = i32(round(coordYFloat + uniforms.centerY));\n            ${this.fillSnippet}\n            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&\n                coordY < uniforms.xShape[1]) {\n              outputValue = getX(coords[0], coordY, coordX, coords[3]);\n            }\n            setOutputAtIndex(index, outputValue);\n          }\n        }\n      `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {RotateProgram} from '../rotate_webgpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n    kernelName: RotateWithOffset,\n    backendName: 'webgpu',\n    kernelFunc: ({inputs, attrs, backend}) => {\n      const {image} = inputs as RotateWithOffsetInputs;\n      const {radians, fillValue, center} =\n          attrs as unknown as RotateWithOffsetAttrs;\n      const webgpuBackend = backend as WebGPUBackend;\n\n      const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n      const [centerX, centerY] =\n          backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n      const uniformData = [\n            {type: 'float32', data: [centerX]},\n            {type: 'float32', data: [centerY]},\n            {type: 'float32', data: [Math.sin(radians)]},\n            {type: 'float32', data: [Math.cos(radians)]}\n          ];\n\n      if (typeof fillValue === 'number') {\n        uniformData.push(\n            {type: 'float32', data: [Number.parseFloat(fillValue.toFixed(2))]});\n      } else {\n        uniformData.push({type: 'float32', data: fillValue});\n      }\n\n      const output = webgpuBackend.runWebGPUProgram(\n          program, [image], image.dtype, uniformData);\n      return output;\n   }\n };\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const round = unaryKernelFunc({opType: UnaryOpType.ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgpu',\n  kernelFunc: round\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const rsqrt =\n    unaryKernelFunc({opType: UnaryOpType.RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgpu',\n  kernelFunc: rsqrt\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\n\nimport {atomicAddSnippet} from './shader_util';\nimport {dataTypeToGPUType, getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ScatterProgram implements WebGPUProgram {\n  variableNames = ['updates', 'indices'];\n  uniforms: string;\n  outputShape: number[];\n  sumDupeIndices: boolean;\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  updatesRank: number;\n  indicesRank: number;\n  sliceDimGreaterThanOne: boolean;\n  atomic = true;\n  type: DataType;\n\n  constructor(\n      flattenXShape: number[], sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      outputDtype: DataType, sumDupeIndices = true) {\n    this.outputShape = shape;\n    this.type = outputDtype;\n    this.sumDupeIndices = sumDupeIndices;\n    this.dispatchLayout = flatDispatchLayout(flattenXShape);\n    // Dispatching based on |updates| shape instead of output shape.\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, flattenXShape, this.workgroupSize);\n    this.sliceDimGreaterThanOne = sliceDim > 1;\n    this.shaderKey =\n        `scatter_${indicesRank}_${updatesRank}_${this.sliceDimGreaterThanOne}_${\n            outputDtype}_${sumDupeIndices}_${strides.length}`;\n    const stridesType = getCoordsDataType(strides.length);\n    this.uniforms =\n        `sliceDim : i32, strides: ${stridesType}, updatesSize: i32,`;\n    this.updatesRank = updatesRank;\n    this.indicesRank = indicesRank;\n  }\n\n  getUserCode(): string {\n    let indicesString = '';\n    if (this.indicesRank === 1) {\n      indicesString = 'coords[0]';\n    } else if (this.indicesRank === 2) {\n      indicesString = 'coords[0], j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    const strideString = this.sliceDimGreaterThanOne ? 'uniforms.strides[j]' :\n                                                       'uniforms.strides';\n\n    let outCoordsString = '';\n    let getUpdatesCoordsFromFlatIndex = '';\n    if (this.dispatchLayout.x.length === 1) {\n      outCoordsString = 'flattenedIndex';\n      getUpdatesCoordsFromFlatIndex = `\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {\n        return index;\n      }\n      `;\n    } else if (this.dispatchLayout.x.length === 2) {\n      outCoordsString = 'vec2<i32>(flattenedIndex, coords[1])';\n      getUpdatesCoordsFromFlatIndex = `\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {\n        // N.B. |updates| could be a scalar tensor, conceptually representing a\n        // 2D tensor with all values equal to that. By design, its size must be\n        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|\n        // gives the other.\n        let sliceSize = uniforms.outShape[1];\n        let d0 = index / sliceSize;\n        let d1 = index - d0 * sliceSize;\n        return vec2<i32>(d0, d1);\n      }\n      `;\n    }\n    const updatesString =\n        Array.from({length: this.updatesRank}, (_, idx) => `coords[${idx}]`);\n    const updatesSnippet = `getUpdates(${updatesString.join(', ')})`;\n\n    const userCode = `\n    ${getUpdatesCoordsFromFlatIndex}\n      ${main('index')} {\n        if (index < uniforms.updatesSize) {\n          let coords = getUpdatesCoordsFromFlatIndex(index);\n          var flattenedIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexInside = i32(round(${indicesSnippet}));\n            flattenedIndex = flattenedIndex + indexInside * ${strideString};\n          }\n          let updateValue =\n              ${dataTypeToGPUType(this.type)}(${updatesSnippet});\n          let flatIndex = getOutputIndexFromCoords(${outCoordsString});\n\n          ${\n        this.sumDupeIndices ?\n            atomicAddSnippet(\n                '&result[flatIndex]', 'updateValue',\n                this.type as 'float32' | 'int32') :\n            `atomicStore(&result[flatIndex], bitcast<i32>(updateValue));`}\n        }\n      }`;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ScatterProgram} from '../scatter_webgpu';\n\nimport {fill} from './Fill';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: WebGPUBackend,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const type = flattenX.dtype;\n  const output =\n      fill({backend, attrs: {shape: flattenShape, value: 0, dtype: type}});\n  const size = util.sizeFromShape(flattenX.shape);\n  const uniformData = [\n    {type: 'int32', data: [sliceRank]}, {type: 'int32', data: strides},\n    {type: 'int32', data: [size]}\n  ];\n  const program = new ScatterProgram(\n      flattenX.shape, sliceRank, flattenIndices.shape.length,\n      flattenX.shape.length, strides, flattenShape, type);\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndices], type, uniformData, output);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeData(flattenIndices.dataId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(res.dataId);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgpu',\n  kernelFunc: scatterNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SearchSortedProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['sortedSequence', 'values'];\n  uniforms = 'numInputs : i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  side: string;\n\n  constructor(outputShape: [number, number], side: 'left'|'right') {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.side = side;\n    this.shaderKey = `search_sorted_${side}`;\n  }\n\n  getUserCode(): string {\n    const boundComparator = this.side === 'left' ? '<' : '<=';\n    const userCode = `\n      fn findBound(batch: i32, value: f32) -> i32 {\n        var left = i32(0);\n        var right = uniforms.numInputs;\n        while (left < right) {\n          var mid = (left + right) / 2;\n          if (getSortedSequence(batch, mid) ${boundComparator} value) {\n            left = mid + 1;\n          } else {\n            right = mid;\n          }\n        }\n        return right;\n      }\n\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let value = getValuesByOutputIndex(index);\n          setOutputAtIndexI32(index, findBound(coords[0], value));\n        }\n      }\n    `;\n\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {SearchSortedProgram} from '../search_sorted_webgpu';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: WebGPUBackend,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const program =\n      new SearchSortedProgram([values.shape[0], values.shape[1]], side);\n  const uniformData = [{type: 'int32', data: [sortedSequence.shape[1]]}];\n  return backend.runWebGPUProgram(\n      program, [sortedSequence, values], 'int32', uniformData);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'webgpu',\n  kernelFunc: searchSorted as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SelectProgram implements WebGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  cRank: number;\n  rank: number;\n  size = true;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.cRank = cRank;\n    this.rank = rank;\n    this.shaderKey = 'select';\n  }\n\n  getUserCode(): string {\n    // TODO(WGSL): below code can be merged with getUserCode.\n    let cCoords;\n    let abCoords;\n    if (this.rank > 4) {\n      throw Error(`Where for rank ${this.rank} is not yet supported`);\n    }\n\n    if (this.rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < this.outputShape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < this.cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let cVal = getC(${cCoords});\n          if (cVal >= 1.0) {\n            setOutputAtIndex(index, getA(${abCoords}));\n          } else {\n            setOutputAtIndex(index, getB(${abCoords}));\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {SelectProgram} from '../select_webgpu';\n\nexport function select(args: {inputs: SelectInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGPUProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgpu',\n  kernelFunc: select as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const selu = unaryKernelFunc({opType: UnaryOpType.SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgpu',\n  kernelFunc: selu\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sigmoid = unaryKernelFunc({opType: UnaryOpType.SIGMOID});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sign = unaryKernelFunc({opType: UnaryOpType.SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgpu',\n  kernelFunc: sign\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sin = unaryKernelFunc({opType: UnaryOpType.SIN});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgpu',\n  kernelFunc: sin\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sinh = unaryKernelFunc({opType: UnaryOpType.SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgpu',\n  kernelFunc: sinh\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const softplus = unaryKernelFunc({opType: UnaryOpType.SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgpu',\n  kernelFunc: softplus\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {padCommon} from './pad_webgpu';\nimport {getSwitchedCoords} from './transpose_webgpu';\nimport {getCoordsDataType, getCoordsFromIndexSnippet, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SpaceToBatchNDProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = '';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  newDim: number[];\n  xShape: number[];\n  paddedXShape: number[];\n  size = true;\n\n  constructor(\n      xShape: number[], paddedXShape: number[],\n      paddings: Array<[number, number]>, reshapedPaddedXShape: number[],\n      newDim: number[], paddedXShapeStridesShapeLength: number) {\n    const outputShape: number[] = new Array(reshapedPaddedXShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = reshapedPaddedXShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.newDim = newDim;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.xShape = xShape;\n    this.paddedXShape = paddedXShape;\n    this.uniforms += `reshapedPaddedXShape : ${\n        getCoordsDataType(\n            reshapedPaddedXShape.length)}, paddedXShapeStrides : ${\n        getCoordsDataType(paddedXShapeStridesShapeLength)}, `;\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.shaderKey = `spaceToBatchND_${newDim}`;\n  }\n\n  getUserCode(): string {\n    const dtype = getCoordsDataType(this.outputShape.length);\n    const switched = getSwitchedCoords(this.newDim);\n\n    const userCode = `\n      ${getCoordsFromIndexSnippet(this.paddedXShape, 'PaddedX')}\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${\n        dtype}(${switched}), uniforms.reshapedPaddedXShape);\n          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);\n          ${padCommon(this.xShape, true)}\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {SpaceToBatchNDProgram} from '../space_to_batchND_webgpu';\n\nimport {reshape} from './Reshape';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: WebGPUBackend,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGPU backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedXShape = completePaddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedXShape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedXShape, blockShape, prod, false);\n\n  const paddedXShapeStrides = util.computeStrides(paddedXShape);\n  const program = new SpaceToBatchNDProgram(\n      x.shape, paddedXShape, completePaddings, reshapedPaddedShape,\n      permutedReshapedPaddedPermutation, paddedXShapeStrides.length);\n  const uniformData = [\n    {type: 'int32', data: reshapedPaddedShape},\n    {type: 'int32', data: paddedXShapeStrides}\n  ];\n  completePaddings.map(\n      p => uniformData.push({type: 'int32', data: [p[0], p[1]]}));\n  const paddedXT = backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n  backend.disposeData(paddedXT.dataId);\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgpu',\n  kernelFunc: spaceToBatchND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\n\nimport {atomicAddSnippet} from './shader_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SparseSegmentSumProgram implements WebGPUProgram {\n  variableNames = ['input', 'indices', 'segmentIds'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'segmentSize : i32, sparseSize : i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  atomic = true;\n  type: DataType;\n\n  constructor(outShape: number[], sparseSize: number, outputDtype: DataType) {\n    this.outputShape = outShape;\n    this.type = outputDtype;\n    this.dispatchLayout = flatDispatchLayout([sparseSize]);\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, [sparseSize], this.workgroupSize);\n\n    this.shaderKey = 'sparseSegmentSum';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.sparseSize) {\n        let indexInSegmentIds = index / uniforms.segmentSize;\n        let indexInSegment = index % uniforms.segmentSize;\n        let indexInInput = indices[indexInSegmentIds];\n        let segmentId = segmentIds[indexInSegmentIds];\n\n        let value = input[indexInInput * uniforms.segmentSize + indexInSegment];\n        let outIndex = segmentId * uniforms.segmentSize + indexInSegment;\n        ${\n        atomicAddSnippet(\n            '&result[outIndex]', 'value', this.type as 'float32' | 'int32')}\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n\nexport class SparseSegmentIdCountProgram implements WebGPUProgram {\n  variableNames = ['segmentIds'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  atomic = true;\n\n  constructor(outShape: number, segmentIdsShape: number[]) {\n    this.outputShape = [outShape];\n    this.dispatchLayout = flatDispatchLayout(segmentIdsShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, segmentIdsShape, this.workgroupSize);\n\n    this.shaderKey = 'sparseSegmentIdCountProgram';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.segmentIdsShape) {\n        let segmentId = segmentIds[index];\n        ${atomicAddSnippet('&result[segmentId]', '1', 'int32')}\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n\nexport class SparseSegmentMeanProgram implements WebGPUProgram {\n  variableNames = ['segmentSum', 'sameSegmentIdCount'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'segmentSize : i32';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  type: DataType;\n\n  constructor(outShape: number[], outputDtype: DataType) {\n    this.outputShape = outShape;\n    this.type = outputDtype;\n    this.dispatchLayout = flatDispatchLayout(outShape);\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, outShape, this.workgroupSize);\n\n    this.shaderKey = 'sparseSegmentMean';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let segmentId = index / uniforms.segmentSize;\n        let count = sameSegmentIdCount[segmentId];\n        if (count != 0) {\n          ${\n        this.type === 'float32' ?\n            'setOutputAtIndex(index, segmentSum[index] / f32(count));' :\n            'setOutputAtIndexI32(index, segmentSum[index] / count);'}\n        }\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {fill} from '../kernels/Fill';\nimport {SparseSegmentIdCountProgram, SparseSegmentMeanProgram, SparseSegmentSumProgram} from '../sparse_segment_reduce_webgpu';\nimport {WebGPUProgram} from '../webgpu_program';\n\nexport function sparseSegmentReduce(\n    input: TensorInfo, indices: TensorInfo, segmentIds: TensorInfo,\n    isSum = false, backend: WebGPUBackend): TensorInfo {\n  const inputSize = util.sizeFromShape(input.shape);\n  const segmentSize = inputSize / input.shape[0];\n  const dtype = input.dtype;\n\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const numIndices = util.sizeFromShape(indices.shape);\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? $segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  let program: WebGPUProgram;\n  const outputShape = input.shape.slice();\n  outputShape[0] = outputRows;\n\n  const sparseSize = numIndices * segmentSize;\n  const sparseSegmentSum =\n      fill({backend, attrs: {shape: outputShape, value: 0, dtype}});\n  program = new SparseSegmentSumProgram(outputShape, sparseSize, dtype);\n  let uniformData = [\n    {type: 'int32', data: [segmentSize]}, {type: 'int32', data: [sparseSize]}\n  ];\n  const $sparseSegmentSum = backend.runWebGPUProgram(\n      program, [input, indices, segmentIds], dtype, uniformData,\n      sparseSegmentSum);\n\n  if (isSum) {\n    return $sparseSegmentSum;\n  }\n\n  const sparseSegmentIdCount =\n      fill({backend, attrs: {shape: [outputRows], value: 0, dtype: 'int32'}});\n  program = new SparseSegmentIdCountProgram(outputRows, segmentIds.shape);\n  const $sparseSegmentIdCount = backend.runWebGPUProgram(\n      program, [segmentIds], 'int32', null, sparseSegmentIdCount);\n\n  const sparseSegmentMean =\n      fill({backend, attrs: {shape: outputShape, value: 0, dtype}});\n  program = new SparseSegmentMeanProgram(outputShape, dtype);\n  uniformData = [{type: 'int32', data: [segmentSize]}];\n  const $sparseSegmentMean = backend.runWebGPUProgram(\n      program, [$sparseSegmentSum, $sparseSegmentIdCount], dtype, uniformData,\n      sparseSegmentMean);\n\n  backend.disposeData($sparseSegmentSum.dataId);\n  backend.disposeData($sparseSegmentIdCount.dataId);\n  return $sparseSegmentMean;\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {sparseSegmentReduce} from '../kernel_utils/sparse_segment_reduce';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n\n  return sparseSegmentReduce(data, indices, segmentIds, false, backend);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgpu',\n  kernelFunc: sparseSegmentMean as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {sparseSegmentReduce} from '../kernel_utils/sparse_segment_reduce';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n\n  return sparseSegmentReduce(data, indices, segmentIds, true, backend);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgpu',\n  kernelFunc: sparseSegmentSum as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class TileProgram implements WebGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.rank = this.outputShape.length;\n    this.shaderKey = 'tile';\n  }\n\n  getUserCode(): string {\n    const sourceCoords = getSourceCoords(this.rank, 'uniforms.');\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          setOutputAtIndex(index, getA(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nfunction getSourceCoords(rank: number, uniformPrefix = ''): string {\n  if (rank >= 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `(resRC % ${uniformPrefix}aShape)`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n  const sourceCoords = [];\n  for (let i = 0; i < rank; i++) {\n    sourceCoords.push(`(${currentCoords[i]} % ${uniformPrefix}aShape[${i}])`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_webgpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: WebGPUBackend, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank >= 5 case.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string' ||\n      x.shape.length >= 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGPUProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgpu',\n  kernelFunc: tile as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_webgpu';\n\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: WebGPUBackend,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n\n  const sumDupeIndices = false;\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const $sparseIndices = reshape({\n    inputs: {x: sparseIndices},\n    backend,\n    attrs: {shape: [numUpdates, sliceRank]}\n  });\n  const $sparseValues = sparseValues.shape.length ?\n      reshape({\n        inputs: {x: sparseValues},\n        backend,\n        attrs: {shape: [numUpdates, sliceSize]}\n      }) :\n      identity({inputs: {x: sparseValues}, backend});\n\n  const type = $sparseValues.dtype;\n  const zero =\n      backend.makeTensorInfo([], type, util.makeZerosTypedArray(1, type));\n\n  // Fill output tensor with the default value.\n  const $defaultValue = reshape({\n    inputs: {x: defaultValue},\n    backend,\n    attrs: {shape: Array(flattenShape.length).fill(1)}\n  });\n  const $denseValues =\n      tile({inputs: {x: $defaultValue}, backend, attrs: {reps: flattenShape}});\n\n  const size = util.sizeFromShape([numUpdates, sliceSize]);\n  const uniformData = [\n    {type: 'int32', data: [sliceRank]},\n    {type: 'int32', data: strides},\n    {type: 'int32', data: [size]},\n  ];\n\n  switch (numUpdates) {\n    case 0:\n      break;\n    case 1:\n      if (true) {\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            $sparseValues.shape.length, strides, flattenShape, type,\n            sumDupeIndices);\n        backend.runWebGPUProgram(\n            program, [$sparseValues, $sparseIndices], type, uniformData,\n            $denseValues);\n      }\n      break;\n    default:\n      if (true) {\n        // First replace the default value with 0 at indices.\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            zero.shape.length, strides, flattenShape, type, sumDupeIndices);\n        backend.runWebGPUProgram(\n            program, [zero, $sparseIndices], type, uniformData, $denseValues);\n      }\n      {\n        // Then replace 0 with the (sum of) sparse value(s) at indices.\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            $sparseValues.shape.length, strides, flattenShape, type);\n        backend.runWebGPUProgram(\n            program, [$sparseValues, $sparseIndices], type, uniformData,\n            $denseValues);\n      }\n  }\n\n  const denseValues = reshape(\n      {inputs: {x: $denseValues}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeData($sparseIndices.dataId);\n  backend.disposeData($sparseValues.dataId);\n  backend.disposeData($defaultValue.dataId);\n  backend.disposeData(zero.dataId);\n  backend.disposeData($denseValues.dataId);\n  return denseValues;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgpu',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: WebGPUBackend, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgpu',\n  kernelFunc: splitV as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sqrt = unaryKernelFunc({opType: UnaryOpType.SQRT});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgpu',\n  kernelFunc: sqrt\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const webGPUBackend = backend as WebGPUBackend;\n    const program = new UnaryOpProgram(x.shape, UnaryOpType.SQUARE);\n    return webGPUBackend.runWebGPUProgram(program, [x], x.dtype);\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const squaredDifference = binaryKernelFunc({\n  opType: BinaryOpType.SQUARED_DIFFERENCE,\n});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {x} = inputs;\n  const program =\n      new UnaryOpProgram(x.shape, UnaryOpType.STEP, 'stepAlpha : f32,');\n  const uniformData = [{type: 'float32', data: [attrs.alpha]}];\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgpu',\n  kernelFunc: step as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class StridedSliceProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  uniforms: string;\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  // TODO(xing.xu): Increase the workPerThread.\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    const dtype = getCoordsDataType(this.outputShape.length);\n    this.uniforms = `begin : ${dtype},  strides : ${dtype}, `;\n    this.shaderKey = 'stridedSlice';\n  }\n\n  getUserCode(): string {\n    const rank = this.outputShape.length;\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * uniforms.strides + uniforms.begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          this.outputShape\n              .map((_, i) => {\n                outputAxis++;\n                return this.outputShape.length === 1 ?\n                    `coords * uniforms.strides[${i}] + uniforms.begin[${i}]` :\n                    `coords[${outputAxis - 1}] * uniforms.strides[${\n                        i}] + uniforms.begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index);\n           setOutputAtIndex(index, getX(${newCoords}));\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {StridedSliceProgram} from '../strided_slice_webgpu';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: WebGPUBackend,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeData(sliced.dataId);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      const values = backend.readSync(x.dataId) as TypedArray;\n      const xBuf = buffer(x.shape, x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram(finalShapeSparse);\n      const uniformData =\n          [{type: 'int32', data: $begin}, {type: 'int32', data: $strides}];\n      const resultValues =\n          backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n      result = reshape(\n          {inputs: {x: resultValues}, backend, attrs: {shape: finalShape}});\n      backend.disposeData(resultValues.dataId);\n    }\n  }\n\n  return result;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgpu',\n  kernelFunc: stridedSlice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: WebGPUBackend,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgpu',\n  kernelFunc: stringNGrams as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nexport const sub = binaryKernelFunc(\n    {opType: BinaryOpType.SUB, cpuKernelImpl: cpuSub, supportsComplex: true});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const tan = unaryKernelFunc({opType: UnaryOpType.TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgpu',\n  kernelFunc: tan\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const tanh = unaryKernelFunc({opType: UnaryOpType.TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgpu',\n  kernelFunc: tanh\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, TensorInfo, TensorScatterUpdate, TensorScatterUpdateAttrs, TensorScatterUpdateInputs, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ScatterProgram} from '../scatter_webgpu';\n\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\n\nexport function tensorScatterUpdate(args: {\n  inputs: TensorScatterUpdateInputs,\n  backend: WebGPUBackend,\n  attrs: TensorScatterUpdateAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {tensor, indices, updates} = inputs;\n  const {} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, tensor.shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(tensor.shape, indices.dtype);\n  }\n\n  const toDispose = [];\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  toDispose.push(flattenIndices);\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n  toDispose.push(flattenX);\n  const flattenTensor =\n      reshape({inputs: {x: tensor}, backend, attrs: {shape: flattenShape}});\n  toDispose.push(flattenTensor);\n  const output = tile({\n    inputs: {x: flattenTensor},\n    backend,\n    attrs: {reps: Array(flattenShape.length).fill(1)}\n  });\n  const program = new ScatterProgram(\n      [numUpdates, sliceSize], sliceRank, flattenIndices.shape.length,\n      flattenX.shape.length, strides, flattenShape, tensor.dtype, false);\n  const size = util.sizeFromShape([numUpdates, sliceSize]);\n  const uniformData = [\n    {type: 'int32', data: [sliceRank]},\n    {type: 'int32', data: strides},\n    {type: 'int32', data: [size]},\n  ];\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndices], flattenTensor.dtype, uniformData,\n      output);\n  toDispose.push(res);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: tensor.shape}});\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return reshaped;\n}\n\nexport const tensorScatterUpdateConfig: KernelConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'webgpu',\n  kernelFunc: tensorScatterUpdate as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\n\nexport class SwapProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'indices'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  size = true;\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.uniforms = `inputSize : i32, firstPass : i32, negativeInf : f32,\n        dir : i32, inc : i32,`;\n    this.shaderKey = 'swap';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // We compare elements pair-wise within a group of size 2 * inc.\n            // The comparing rule for each group alternates between ascending\n            // and descending. Within each group, we compare each pair at\n            // positions i and i+inc. To decide whether an element at position i\n            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n            // inc, it is in the first half of the group, we denote it as x0,\n            // otherwise we denote it as x1.\n            // For example, as shown in the Bitonic top K paper referenced\n            // above, Figure5(a) shows that element[1] is in the second half of\n            // the group when group size is 2, but it is in the first half of\n            // the group when group size is 4.\n            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;\n            var i = 0;\n            if (isFirstInPair) {\n              i = elemIdx;\n            } else {\n              i = elemIdx - uniforms.inc;\n            }\n\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.inc;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.inc));\n            }\n\n            var x0 = f32(0.0);\n            var x1 = f32(0.0);\n            if (i0 < uniforms.inputSize) {\n              x0 = getX(batch, i0);\n            } else {\n              x0 = uniforms.negativeInf;\n            }\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = uniforms.negativeInf;\n            }\n\n            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;\n            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n            if (reverse == isGreater) {\n              // Elements in opposite order of direction\n              let iTemp = i0;\n              i0 = i1;\n              i1 = iTemp;\n            }\n            if (isFirstInPair) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `;\n    return userCode;\n  }\n}\n\nexport class MergeProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'indices'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  size = true;\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    // |n| Size of the original input of TopK\n    // |firstPass| indicates if this is the first time swap is being used which\n    // means no indices input containing the top K is present yet.\n    // |k| Top k elements desired\n    this.uniforms = `inputSize : i32, firstPass : i32, k : i32,`;\n    this.shaderKey = 'merge';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // The output size is half of the previous size.\n            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _\n            // (k=4), we only need to output the indices at positions |, the\n            // indices at positions _ can be thrown away, see Figure5(b) After\n            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced\n            // above.\n            // For example, the paper shows we only need to output the orange\n            // bars. The output sequence should look like this | | | | | | | |.\n            // Because the sequence is halved, to map the output index back to\n            // the previous sequence to find the corresponding value, we need\n            // to double the index. When we double the index, we basically\n            // interpolate a position, so 2i looks like\n            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k\n            // position of each 2k positions by - elemIdx % k. E.g. for output\n            // at index 4,5,6,7, we want to get the corresponding element at\n            // original index 8,9,10,11, for output at index 8,9,10,11,\n            // we want to get the corresponding element at original index\n            // 16,17,18,19, so on and so forth.\n\n            var i = 0;\n            if (elemIdx < uniforms.k) {\n              i = elemIdx;\n            } else {\n              i = elemIdx * 2 - elemIdx % uniforms.k;\n            }\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.k;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.k));\n            }\n\n            let x0 = getX(batch, i0);\n            var x1 = f32(0.0);\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = x0;\n            }\n\n            if (x0 >= x1) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {topKImplCPU} from '../kernel_utils/shared';\nimport {MergeProgram, SwapProgram} from '../top_k_webgpu';\nimport {fill} from './Fill';\nimport {gatherV2} from './GatherV2';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nfunction disposeIntermediateTensorInfoOrNull(\n    backend: WebGPUBackend, tensorInfo: TensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeData(tensorInfo.dataId);\n  }\n}\n\nfunction roundUpToPow2(num: number) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(\n    args: {inputs: TopKInputs, backend: WebGPUBackend, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted}= attrs;\n\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const [allTopKVals, allTopKIndices] =\n        topKImplCPU(xVals, xShape, x.dtype as NumericDataType, k, sorted);\n\n    return [\n      backend.makeTensorInfo(\n          allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend.makeTensorInfo(\n          allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend.makeTensorInfo(xShape, x.dtype, []),\n      backend.makeTensorInfo(xShape, 'int32', [])\n    ];\n  }\n\n  if (lastDim === 1 /* firstPass */) {\n    return [\n      x, fill({attrs: {shape: xShape, dtype: 'int32', value: 0}, backend})\n    ];\n  }\n\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape({inputs: {x}, attrs: {shape: [batch, lastDim]}, backend});\n\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices: TensorInfo = null;\n\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n\n  const runSwap = (dir: number, inc: number, shape: number[]) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const firstPass = indices === null ? 1 : 0;\n    const uniformDataSwap = [\n        {type: 'int32', data: [lastDim]},\n        {type: 'int32', data: [firstPass]},\n        {type: 'float32', data: [Number.NEGATIVE_INFINITY]},\n        {type: 'int32', data: [dir]},\n        {type: 'int32', data: [inc]}\n    ];\n    const prevIndices = indices;\n    indices = backend.runWebGPUProgram(\n        program, inputs, 'int32', uniformDataSwap);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const uniformDataMerge = [\n        {type: 'int32', data: [lastDim]},\n        {type: 'int32', data: [firstPass]},\n        {type: 'int32', data: [kPow2]}\n    ];\n    const prevIndices = indices;\n    indices = backend.runWebGPUProgram(\n        mergeProgram, inputs, 'int32', uniformDataMerge);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice(\n      {inputs: {x: indices}, backend, attrs: {begin: 0, size: [batch, k]}});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  // Gather values on last dimension\n  let values = gatherV2(\n      {inputs: {x: x2D, indices}, backend, attrs: {axis: 1, batchDims: 1}});\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n\n  prevIndices = indices;\n  indices = reshape({inputs: {x: indices}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  const prevValues = values;\n  values = reshape({inputs: {x: values}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n\n  return [values, indices];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgpu',\n  kernelFunc: topK as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class TransformProgram implements WebGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  uniforms = 'interpolationModeId : i32, fillModeId : i32, fillValue : f32,';\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'transform';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n          fn mapCoord(outCoord : f32, len : f32) -> f32{\n            var inCoord = outCoord;\n            if(uniforms.fillModeId == 2) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  if (inCoord < sz2) {\n                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +\n                    inCoord;\n                  }\n                  if (inCoord < -len) {\n                    inCoord = inCoord + sz2;\n                  } else {\n                    inCoord = -inCoord - 1.0;\n                  }\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));\n                  if (inCoord >= len) {\n                    inCoord = sz2 - inCoord - 1.0;\n                  }\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 3) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 4) {\n              return clamp(outCoord, 0.0, len - 1.0);\n            }\n            return outCoord;\n          }\n          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,\n            channel : i32) -> f32 {\n            var outputValue : f32;\n            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {\n                outputValue = getImage(batch, coordY, coordX, channel);\n            } else {\n              outputValue = uniforms.fillValue;\n            }\n            return outputValue;\n          }\n\n          ${main('index')} {\n            if (index < uniforms.size) {\n              let coords = getCoordsFromIndex(index);\n              var outputValue : f32;\n              let batch = coords[0];\n              let x = coords[2];\n              let y = coords[1];\n              let channel = coords[3];\n              let xf = f32(x);\n              let yf = f32(y);\n              let a1 = getTransforms(batch, 0);\n              let a2 = getTransforms(batch, 1);\n              let a3 = getTransforms(batch, 2);\n              let b1 = getTransforms(batch, 3);\n              let b2 = getTransforms(batch, 4);\n              let b3 = getTransforms(batch, 5);\n              let c1 = getTransforms(batch, 6);\n              let c2 = getTransforms(batch, 7);\n              let projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = uniforms.fillValue;\n              } else {\n                let inX = (a1 * xf + a2 * yf + a3) / projection;\n                let inY = (b1 * xf + b2 * yf + b3) / projection;\n                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));\n                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));\n\n                if (uniforms.interpolationModeId == 1) {\n                  let coordY = i32(round(mapY));\n                  let coordX = i32(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  let yFloor = floor(mapY);\n                  let xFloor = floor(mapX);\n                  let yCeil = yFloor + 1.0;\n                  let xCeil = xFloor + 1.0;\n                  let valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);\n                  let valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutputAtIndex(index, outputValue);\n            }\n          }\n        `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {TransformProgram} from '../transform_webgpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: WebGPUBackend,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(outShape);\n  const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n  let fillModeId: number;\n  switch (fillMode) {\n    case 'constant':\n      fillModeId = 1;\n      break;\n    case 'reflect':\n      fillModeId = 2;\n      break;\n    case 'wrap':\n      fillModeId = 3;\n      break;\n    case 'nearest':\n      fillModeId = 4;\n      break;\n    default:\n      fillModeId = 1;\n      break;\n  }\n  const uniformData = [\n    {type: 'int32', data: [interpolationModeId]},\n    {type: 'int32', data: [fillModeId]}, {type: 'float32', data: [fillValue]}\n  ];\n  return backend.runWebGPUProgram(\n      program, [image, transforms], 'float32', uniformData);\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgpu',\n  kernelFunc: transform as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: WebGPUBackend, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgpu',\n  kernelFunc: unpack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\n\nimport {atomicAddSnippet} from './shader_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class UnsortedSegmentSumProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'segmentIds'];\n  uniforms = 'numSegments : i32, xSize: i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  atomic = true;\n  type: DataType;\n\n  constructor(inShape: number[], outShape: number[], outputDtype: DataType) {\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(inShape);\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, inShape, this.workgroupSize);\n    if (outputDtype !== 'float32' && outputDtype !== 'int32') {\n      throw new Error(`UnsortedSegmentSum only supports float32 and int32\n              types, does not support ${outputDtype} type.`);\n    }\n    this.type = outputDtype;\n    this.shaderKey = 'unsortedSegmentSum';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.xSize) {\n        let coords = getXCoordsFromIndex(index);\n        let b = coords[0];\n        let inCol = coords[1];\n\n        let segmentId = i32(getSegmentIds(inCol));\n        if (segmentId >= 0) {\n          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;\n          let value = getX(b, inCol);\n\n          ${\n        atomicAddSnippet(\n            '&result[flatIndex]', 'value', this.type as 'float32' | 'int32')}\n        }\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnsortedSegmentSumProgram} from '../unsorted_segment_sum_webgpu';\n\nimport {fill} from './Fill';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: WebGPUBackend,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const dtype = x.dtype;\n  const shape = [a2D.shape[0], numSegments];\n  const output = fill({backend, attrs: {shape, value: 0, dtype}});\n  const program = new UnsortedSegmentSumProgram(a2D.shape, shape, dtype);\n  const uniformData = [\n    {type: 'int32', data: [numSegments]},\n    {type: 'int32', data: [util.sizeFromShape(a2D.shape)]}\n  ];\n  const segResult = backend.runWebGPUProgram(\n      program, [a2D, segmentIds], dtype, uniformData, output);\n\n  const reshaped =\n      reshape({inputs: {x: segResult}, backend, attrs: {shape: outShape}});\n  toDispose.push(segResult);\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgpu',\n  kernelFunc: unsortedSegmentSum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {dilation2DBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2DBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {drawConfig} from './kernels/Draw';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedBatchNormConfig} from './kernels/FusedBatchNorm';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {lrnConfig} from './kernels/LRN';\nimport {lrnGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tensorScatterUpdateConfig} from './kernels/TensorScatterUpdate';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  depthwiseConv2dNativeConfig,\n  diagConfig,\n  dilation2DConfig,\n  dilation2DBackpropFilterConfig,\n  dilation2DBackpropInputConfig,\n  drawConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  fromPixelsConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedBatchNormConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  log1pConfig,\n  logConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  lrnConfig,\n  lrnGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPoolGradConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tensorScatterUpdateConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n"],"names":["webgpu_util.isWebGPUSupported","webgpu_util.GPUBytesPerElement","webgpu_program.makeShaderKey","webgpu_program.compileProgram","webgpu_program.PixelsOpType","main","concatImpl","reshape","select","cpuAdd","cpuTranspose","getCoords","cpuNotEqual","cpuMultiply","cpuEqual","getSourceCoords","cpuGreater","cpuGreaterEqual","cpuLess","cpuLessEqual","cpuMaximum","cpuMinimum","cpuSub"],"mappings":"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"}