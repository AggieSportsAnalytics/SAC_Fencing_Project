/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
export class TextureManager {
    constructor(device) {
        this.device = device;
        this.numUsedTextures = 0;
        this.numFreeTextures = 0;
        this.freeTextures = new Map();
        this.usedTextures = new Map();
        this.numBytesUsed = 0;
        this.numBytesAllocated = 0;
    }
    acquireTexture(width, height, format, usage) {
        const bytesPerElement = getBytesPerElement(format);
        const byteSize = width * height * bytesPerElement;
        const key = getTextureKey(width, height, format, usage);
        if (!this.freeTextures.has(key)) {
            this.freeTextures.set(key, []);
        }
        if (!this.usedTextures.has(key)) {
            this.usedTextures.set(key, []);
        }
        this.numBytesUsed += byteSize;
        this.numUsedTextures++;
        if (this.freeTextures.get(key).length > 0) {
            this.numFreeTextures--;
            const newTexture = this.freeTextures.get(key).shift();
            this.usedTextures.get(key).push(newTexture);
            return newTexture;
        }
        this.numBytesAllocated += byteSize;
        const newTexture = this.device.createTexture({
            size: [width, height],
            format,
            usage,
        });
        this.usedTextures.get(key).push(newTexture);
        return newTexture;
    }
    releaseTexture(texture) {
        if (this.freeTextures.size === 0) {
            return;
        }
        const width = texture.width;
        const height = texture.height;
        const format = texture.format;
        const usage = texture.usage;
        const key = getTextureKey(width, height, format, usage);
        if (!this.freeTextures.has(key)) {
            this.freeTextures.set(key, []);
        }
        this.freeTextures.get(key).push(texture);
        this.numFreeTextures++;
        this.numUsedTextures--;
        const textureList = this.usedTextures.get(key);
        const textureIndex = textureList.indexOf(texture);
        if (textureIndex < 0) {
            throw new Error('Cannot release a texture that was never provided by this ' +
                'texture manager');
        }
        textureList.splice(textureIndex, 1);
        const bytesPerElement = getBytesPerElement(format);
        const byteSize = width * height * bytesPerElement;
        this.numBytesUsed -= byteSize;
    }
    getNumUsedTextures() {
        return this.numUsedTextures;
    }
    getNumFreeTextures() {
        return this.numFreeTextures;
    }
    dispose() {
        this.freeTextures.forEach((textures, key) => {
            textures.forEach(texture => {
                texture.destroy();
            });
        });
        this.usedTextures.forEach((textures, key) => {
            textures.forEach(texture => {
                texture.destroy();
            });
        });
        this.freeTextures = new Map();
        this.usedTextures = new Map();
        this.numUsedTextures = 0;
        this.numFreeTextures = 0;
        this.numBytesUsed = 0;
        this.numBytesAllocated = 0;
    }
}
function getTextureKey(width, height, format, usage) {
    return `${width}_${height}_${format}_${usage}`;
}
function getBytesPerElement(format) {
    if (format === 'rgba8unorm') {
        return 16;
    }
    else {
        throw new Error(`${format} is not supported!`);
    }
}
//# sourceMappingURL=data:application/json;base64,